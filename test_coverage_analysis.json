{
  "timestamp": 1748997427.4415731,
  "project_root": ".",
  "source_files_analyzed": 173,
  "test_files_found": 2424,
  "overall_metrics": {
    "total_files": 173,
    "total_lines": 108857,
    "covered_lines": 17489,
    "overall_coverage_percentage": 16.07,
    "files_with_tests": 102,
    "test_coverage_percentage": 58.96,
    "files_with_tdd_comments": 106,
    "tdd_comment_compliance": 61.27,
    "average_complexity": 13.21,
    "quality_score": 47.29
  },
  "tdd_compliance": {
    "total_files": 173,
    "compliant_files": 4,
    "compliance_percentage": 2.31,
    "compliance_score": "Needs Improvement"
  },
  "coverage_gaps": [
    {
      "file": "advanced_iterative_mlacs_optimizer.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "apple_silicon_mlacs_optimizer.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "build_verification.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "comprehensive_functional_verification.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "comprehensive_ui_visibility_verification.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "config_manager.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "enhanced_mlacs_benchmark.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "headless_test_suite.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "mcp_applescript_server.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "model_manager.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "production_startup.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "production_supervisor_worker_3tier_memory_system.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "quick_mlacs_benchmark.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "real_world_testing_verification.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "simple_cascading_backend.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "source_code_ui_verification.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "sources/agents/code_agent.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "sources/agents/file_agent.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "sources/agents/mcp_agent.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "sources/agents/planner_agent.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "sources/fast_api.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "sources/speech_to_text.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "sources/text_to_speech.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "sources/tools/BashInterpreter.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "sources/tools/C_Interpreter.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "sources/tools/GoInterpreter.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "sources/tools/JavaInterpreter.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "sources/tools/PyInterpreter.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "sources/tools/fileFinder.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "sources/tools/flightSearch.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "sources/tools/mcpFinder.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "sources/tools/webSearch.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "testflight_comprehensive_build_verification.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "verify_memory_system_ui_integration.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "verify_testflight_builds.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "xcode_project_structure_compliance.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "High"
    },
    {
      "file": "comprehensive_mlacs_performance_analysis.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "comprehensive_multi_llm_tier_testing_framework.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "comprehensive_test_suite.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "e2e_view_navigation_test.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "focused_supervisor_worker_memory_performance_test.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "fully_headless_e2e_test.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "headless_multi_llm_benchmark.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "iterative_mlacs_optimizer.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "langgraph_state_coordination_sandbox.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "langgraph_tier_management_sandbox.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "mlacs_headless_benchmark.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "mlacs_optimization_framework.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "mlacs_production_demo.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "mlacs_self_learning_framework.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "mlacs_workflow_templates.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "multi_llm_tier_testing_direct.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "quick_apple_silicon_langchain_test.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "quick_langgraph_state_coordination_test.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "quick_vector_knowledge_test.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "scripts/tdd_test_runner.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "setup.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/advanced_memory_management.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/agenticseek_deerflow_integration.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/agenticseek_streaming_integration.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/agents/casual_agent.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/browser.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/cascading_provider.py",
      "issues": [
        "No test files found",
        "Missing TDD comment block"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/comprehensive_backend_endpoints.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/copilotkit_multi_agent_backend.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/core_data_session_manager.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/deer_flow_orchestrator.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/enhanced_agent_router.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/enhanced_browser_automation.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/enhanced_multi_agent_coordinator.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/interaction.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/langchain_monitoring_observability.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/langchain_vector_knowledge_system.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/langgraph_copilotkit_coordinator.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/language.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/logger.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/pydantic_ai_core_integration_backup.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/pydantic_ai_real_time_optimization_engine_production.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/router.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/schemas.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/simple_router.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/specialized_agents.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/streaming_response_system.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/supervisor_handoffs.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/tools/safety.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/tools/searxSearch.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/utility.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "sources/voice_first_multi_agent_integration.py",
      "issues": [
        "No test files found",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "supervisor_worker_3tier_memory_performance_test.py",
      "issues": [
        "Missing TDD comment block",
        "Low coverage: 0.0%"
      ],
      "priority": "Medium"
    },
    {
      "file": "api.py",
      "issues": [
        "Missing TDD comment block"
      ],
      "priority": "Low"
    },
    {
      "file": "cli.py",
      "issues": [
        "Missing TDD comment block"
      ],
      "priority": "Low"
    },
    {
      "file": "comprehensive_memory_system_integration_test.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "comprehensive_mlacs_headless_test_framework.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "enhanced_backend.py",
      "issues": [
        "Missing TDD comment block"
      ],
      "priority": "Low"
    },
    {
      "file": "langchain_video_workflows_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "langgraph_advanced_coordination_patterns_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "langgraph_framework_decision_engine_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "langgraph_framework_performance_prediction_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "langgraph_state_coordination_simplified_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "langgraph_task_analysis_routing_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "mlacs_comprehensive_performance_benchmarking_suite.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "mlacs_langchain_integration_hub_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "mlacs_performance_optimizer.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "mlacs_phase1_optimization_implementation_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/agents/agent.py",
      "issues": [
        "Missing TDD comment block"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/agents/browser_agent.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/apple_silicon_memory_optimizer.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/browser_automation_integration.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/chain_of_thought_sharing.py",
      "issues": [
        "No test files found"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/cross_llm_verification_system.py",
      "issues": [
        "No test files found"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/dynamic_role_assignment_system.py",
      "issues": [
        "No test files found"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/enhanced_interpreter_system.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/enhanced_voice_pipeline_system.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/graphiti_temporal_knowledge_integration.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langchain_agent_system.py",
      "issues": [
        "No test files found"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langchain_apple_silicon_tools.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langchain_mlacs_integration_hub.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langchain_vector_knowledge.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langchain_video_workflows.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langchain_video_workflows_production.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langgraph_apple_silicon_optimization_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langgraph_complex_workflow_structures.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langgraph_decision_optimization_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langgraph_dynamic_complexity_routing_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langgraph_framework_coordinator.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langgraph_framework_performance_prediction_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langgraph_framework_selection_criteria_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langgraph_framework_selection_learning_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langgraph_graphiti_temporal_knowledge_integration_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langgraph_hybrid_framework_coordination_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langgraph_intelligent_framework_router.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langgraph_memory_aware_state_creation_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langgraph_multi_tier_memory_system_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langgraph_neural_engine_gpu_acceleration_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langgraph_parallel_node_execution_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langgraph_performance_analytics_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langgraph_state_coordination.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langgraph_tier_management_system.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/langgraph_workflow_state_management_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/llm_provider.py",
      "issues": [
        "Missing TDD comment block"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/mcp_integration_system.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/memory.py",
      "issues": [
        "Missing TDD comment block"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/mlacs_langchain_integration_hub.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/mlacs_phase1_optimization_implementation_production.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/multi_agent_coordinator.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/multi_llm_orchestration_engine.py",
      "issues": [
        "No test files found"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/openai_multi_agent_memory_system.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/openai_tier3_graphiti_integration_sandbox.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/production_voice_pipeline.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/pydantic_ai_advanced_memory_integration.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/pydantic_ai_advanced_memory_integration_production.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/pydantic_ai_communication_models.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/pydantic_ai_core_integration.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/pydantic_ai_enterprise_workflow_plugins.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/pydantic_ai_enterprise_workflow_plugins_production.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/pydantic_ai_langchain_langgraph_bridge.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/pydantic_ai_langchain_langgraph_bridge_production.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/pydantic_ai_production_communication_workflows.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/pydantic_ai_production_communication_workflows_production.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/pydantic_ai_real_time_optimization_engine.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/pydantic_ai_tier_aware_agent_factory.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/pydantic_ai_validated_tool_integration.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/simplified_session_manager.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/swiftui_voice_api_bridge.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/tool_ecosystem_integration.py",
      "issues": [
        "Low coverage: 50.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/tools/tools.py",
      "issues": [
        "Missing TDD comment block"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/video_generation_coordination_system.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/voice_enabled_agent_router.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    },
    {
      "file": "sources/voice_pipeline_bridge.py",
      "issues": [
        "Low coverage: 0.0%"
      ],
      "priority": "Low"
    }
  ],
  "file_analysis": {
    "advanced_iterative_mlacs_optimizer.py": {
      "file_path": "advanced_iterative_mlacs_optimizer.py",
      "functions": [
        "__init__",
        "_load_base_results",
        "_create_advanced_scenarios",
        "_apply_quality_aware_routing",
        "_calculate_query_similarity",
        "_compress_context",
        "_calculate_adaptive_timeout",
        "_calculate_response_quality",
        "_calculate_performance_score",
        "_calculate_quality_score_advanced",
        "_calculate_cost_score",
        "_estimate_scenario_cost",
        "_extract_patterns",
        "_calculate_confidence_score",
        "_extract_learning_insights",
        "_update_strategy_effectiveness",
        "_generate_advanced_analysis",
        "_rank_strategies_by_effectiveness",
        "_analyze_cost_trends",
        "_analyze_quality_trends",
        "_analyze_learning_progression",
        "_generate_advanced_recommendations",
        "_print_advanced_summary"
      ],
      "classes": [
        "AdvancedOptimizationStrategy",
        "OptimizationResult",
        "LearningInsight",
        "AdvancedIterativeMLACSOptimizer"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 862,
        "lines_covered": 0,
        "lines_missing": 862,
        "coverage_percentage": 0.0,
        "complexity_score": 15.259740259740258,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 96.29629629629629,
        "type_hints": 71.73913043478261,
        "error_handling": 13.043478260869565,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "api.py": {
      "file_path": "api.py",
      "functions": [
        "initialize_system"
      ],
      "classes": [],
      "test_files": [
        "_Sandbox/Environment/TestDrivenFeatures/ContentViewRefactoring_TDD/01_WriteTests/test_contentviewrefactoring_integration.py",
        "_macOS/tests/test_endpoints.py",
        "_macOS/tests/test_model_api.py",
        "e2e_view_navigation_test.py",
        "focused_supervisor_worker_memory_performance_test.py",
        "fully_headless_e2e_test.py",
        "supervisor_worker_3tier_memory_performance_test.py",
        "test_apple_silicon_langchain_tools.py",
        "test_apple_silicon_langchain_tools_comprehensive.py",
        "test_backend.py",
        "test_copilotkit_integration.py",
        "test_langchain_vector_knowledge.py",
        "test_langgraph_multi_tier_memory_comprehensive.py",
        "test_langgraph_performance_analytics_comprehensive.py",
        "test_langgraph_state_coordination_comprehensive.py",
        "test_langgraph_workflow_state_management_comprehensive.py",
        "test_production_mlacs_langchain_integration_hub.py",
        "test_pydantic_ai_core_integration_comprehensive.py",
        "test_pydantic_ai_production_communication_workflows.py",
        "test_pydantic_ai_production_communication_workflows_production.py",
        "test_voice_integration_pipeline.py",
        "test_voice_pipeline_integration.py",
        "venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
        "venv/lib/python3.13/site-packages/bs4/tests/test_formatter.py",
        "venv/lib/python3.13/site-packages/bs4/tests/test_pageelement.py",
        "venv/lib/python3.13/site-packages/colorama/tests/ansitowin32_test.py",
        "venv/lib/python3.13/site-packages/colorama/tests/initialise_test.py",
        "venv/lib/python3.13/site-packages/llvmlite/tests/test_binding.py",
        "venv/lib/python3.13/site-packages/llvmlite/tests/test_ir.py",
        "venv/lib/python3.13/site-packages/mypyc/test/test_external.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/isomorphism/tests/test_tree_isomorphism.py",
        "venv/lib/python3.13/site-packages/networkx/utils/tests/test_mapped_queue.py",
        "venv/lib/python3.13/site-packages/nltk/test/unit/test_corenlp.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudadrv/test_context_stack.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudadrv/test_cuda_driver.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudadrv/test_cuda_memory.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_gufunc_scalar.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_intrinsics.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_lang.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_libdevice.py",
        "venv/lib/python3.13/site-packages/numba/tests/doc_examples/test_interval_example.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_api.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_builtins.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_cgutils.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_dictobject.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_entrypoints.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_extending.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_generators.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_gil.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_heapq.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_mixed_tuple_unroller.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_ndarray_subclasses.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_nrt.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_nrt_refct.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_pythonapi.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_target_extension.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_unicode.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_api.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_array_api_info.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_array_coercion.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_cython.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_defchararray.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_deprecations.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_indexing.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_limited_api.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_mem_overlap.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_multiarray.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_nditer.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_numeric.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_regression.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_stringdtype.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_strings.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_ufunc.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_umath.py",
        "venv/lib/python3.13/site-packages/numpy/f2py/tests/test_character.py",
        "venv/lib/python3.13/site-packages/numpy/f2py/tests/test_docs.py",
        "venv/lib/python3.13/site-packages/numpy/f2py/tests/test_f2py2e.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_arraysetops.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_function_base.py",
        "venv/lib/python3.13/site-packages/numpy/matrixlib/tests/test_interaction.py",
        "venv/lib/python3.13/site-packages/numpy/tests/test_public_api.py",
        "venv/lib/python3.13/site-packages/numpy/typing/tests/test_typing.py",
        "venv/lib/python3.13/site-packages/pooch/tests/test_downloaders.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_bsd.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_misc.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_posix.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_windows.py",
        "venv/lib/python3.13/site-packages/pyflakes/test/test_api.py",
        "venv/lib/python3.13/site-packages/regex/test_regex.py",
        "venv/lib/python3.13/site-packages/scipy/_lib/tests/test__util.py",
        "venv/lib/python3.13/site-packages/scipy/_lib/tests/test_array_api.py",
        "venv/lib/python3.13/site-packages/scipy/_lib/tests/test_deprecation.py",
        "venv/lib/python3.13/site-packages/scipy/_lib/tests/test_import_cycles.py",
        "venv/lib/python3.13/site-packages/scipy/_lib/tests/test_public_api.py",
        "venv/lib/python3.13/site-packages/scipy/cluster/tests/test_hierarchy.py",
        "venv/lib/python3.13/site-packages/scipy/cluster/tests/test_vq.py",
        "venv/lib/python3.13/site-packages/scipy/constants/tests/test_constants.py",
        "venv/lib/python3.13/site-packages/scipy/differentiate/tests/test_differentiate.py",
        "venv/lib/python3.13/site-packages/scipy/fft/tests/test_basic.py",
        "venv/lib/python3.13/site-packages/scipy/fft/tests/test_fftlog.py",
        "venv/lib/python3.13/site-packages/scipy/fft/tests/test_helper.py",
        "venv/lib/python3.13/site-packages/scipy/fft/tests/test_real_transforms.py",
        "venv/lib/python3.13/site-packages/scipy/integrate/tests/test_cubature.py",
        "venv/lib/python3.13/site-packages/scipy/integrate/tests/test_quadpack.py",
        "venv/lib/python3.13/site-packages/scipy/integrate/tests/test_quadrature.py",
        "venv/lib/python3.13/site-packages/scipy/integrate/tests/test_tanhsinh.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_bsplines.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_fitpack.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_fitpack2.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_interpnd.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_interpolate.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_ndgriddata.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_pade.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_polyint.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_rbf.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_rbfinterp.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_rgi.py",
        "venv/lib/python3.13/site-packages/scipy/io/tests/test_mmio.py",
        "venv/lib/python3.13/site-packages/scipy/linalg/tests/test_basic.py",
        "venv/lib/python3.13/site-packages/scipy/ndimage/tests/test_c_api.py",
        "venv/lib/python3.13/site-packages/scipy/ndimage/tests/test_datatypes.py",
        "venv/lib/python3.13/site-packages/scipy/ndimage/tests/test_filters.py",
        "venv/lib/python3.13/site-packages/scipy/ndimage/tests/test_fourier.py",
        "venv/lib/python3.13/site-packages/scipy/ndimage/tests/test_interpolation.py",
        "venv/lib/python3.13/site-packages/scipy/ndimage/tests/test_measurements.py",
        "venv/lib/python3.13/site-packages/scipy/ndimage/tests/test_morphology.py",
        "venv/lib/python3.13/site-packages/scipy/ndimage/tests/test_splines.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_bracket.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_chandrupatla.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_optimize.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_array_tools.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_bsplines.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_cont2discrete.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_czt.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_dltisys.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_filter_design.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_fir_filter_design.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_ltisys.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_max_len_seq.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_peak_finding.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_savitzky_golay.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_short_time_fft.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_signaltools.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_splines.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_upfirdn.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_waveforms.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/tests/test_array_api.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/tests/test_base.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/tests/test_coo.py",
        "venv/lib/python3.13/site-packages/scipy/spatial/tests/test_spherical_voronoi.py",
        "venv/lib/python3.13/site-packages/scipy/special/tests/test_basic.py",
        "venv/lib/python3.13/site-packages/scipy/special/tests/test_cython_special.py",
        "venv/lib/python3.13/site-packages/scipy/special/tests/test_logsumexp.py",
        "venv/lib/python3.13/site-packages/scipy/special/tests/test_mpmath.py",
        "venv/lib/python3.13/site-packages/scipy/special/tests/test_support_alternative_backends.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_axis_nan_policy.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_distributions.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_entropy.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_fast_gen_inversion.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_morestats.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_qmc.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_resampling.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_sampling.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_stats.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_variation.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/integration/test_pip_install_sdist.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_bdist_wheel.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_build_ext.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_install_scripts.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_sdist.py",
        "venv/lib/python3.13/site-packages/sklearn/cluster/tests/test_k_means.py",
        "venv/lib/python3.13/site-packages/sklearn/datasets/tests/test_openml.py",
        "venv/lib/python3.13/site-packages/sklearn/decomposition/tests/test_pca.py",
        "venv/lib/python3.13/site-packages/sklearn/inspection/tests/test_permutation_importance.py",
        "venv/lib/python3.13/site-packages/sklearn/linear_model/tests/test_ridge.py",
        "venv/lib/python3.13/site-packages/sklearn/linear_model/tests/test_sgd.py",
        "venv/lib/python3.13/site-packages/sklearn/metrics/cluster/tests/test_supervised.py",
        "venv/lib/python3.13/site-packages/sklearn/metrics/tests/test_common.py",
        "venv/lib/python3.13/site-packages/sklearn/metrics/tests/test_pairwise_distances_reduction.py",
        "venv/lib/python3.13/site-packages/sklearn/model_selection/tests/test_search.py",
        "venv/lib/python3.13/site-packages/sklearn/model_selection/tests/test_split.py",
        "venv/lib/python3.13/site-packages/sklearn/preprocessing/tests/test_data.py",
        "venv/lib/python3.13/site-packages/sklearn/preprocessing/tests/test_label.py",
        "venv/lib/python3.13/site-packages/sklearn/tests/test_common.py",
        "venv/lib/python3.13/site-packages/sklearn/tests/test_config.py",
        "venv/lib/python3.13/site-packages/sklearn/tests/test_metadata_routing.py",
        "venv/lib/python3.13/site-packages/sklearn/tests/test_multioutput.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_array_api.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_estimator_checks.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_indexing.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_multiclass.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_plotting.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_tags.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_validation.py",
        "venv/lib/python3.13/site-packages/sympy/matrices/tests/test_commonmatrix.py",
        "venv/lib/python3.13/site-packages/sympy/printing/tests/test_latex.py",
        "venv/lib/python3.13/site-packages/sympy/printing/tests/test_python.py",
        "venv/lib/python3.13/site-packages/sympy/stats/tests/test_continuous_rv.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/distributed_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/nn/api/remote_module_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/rpc/dist_autograd_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/rpc/faulty_agent_rpc_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/rpc/jit/rpc_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/rpc/rpc_test.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_exports.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_testing_raisesgroup.py",
        "venv/lib/python3.13/site-packages/websocket/tests/test_app.py",
        "venv/lib/python3.13/site-packages/websocket/tests/test_http.py",
        "venv/lib/python3.13/site-packages/websocket/tests/test_websocket.py"
      ],
      "coverage": {
        "lines_total": 222,
        "lines_covered": 188,
        "lines_missing": 34,
        "coverage_percentage": 85.0,
        "complexity_score": 5.829596412556054,
        "test_score": 0.85,
        "tdd_compliance": true
      },
      "code_quality": {
        "docstring_coverage": 0.0,
        "type_hints": 100,
        "error_handling": 100.0,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "apple_silicon_mlacs_optimizer.py": {
      "file_path": "apple_silicon_mlacs_optimizer.py",
      "functions": [
        "__init__",
        "_detect_apple_silicon",
        "_create_apple_optimized_scenarios",
        "_calculate_quality_with_apple_bonus",
        "_calculate_multi_llm_quality_with_apple_bonus",
        "_calculate_apple_metrics",
        "_generate_apple_optimization_insights",
        "_generate_apple_recommendations",
        "_print_apple_summary",
        "__init__",
        "start_monitoring",
        "stop_monitoring",
        "get_current_metrics",
        "get_thermal_state",
        "get_summary",
        "__init__",
        "__init__",
        "__init__"
      ],
      "classes": [
        "AppleOptimizationStrategy",
        "ApplePerformanceMetrics",
        "AppleSiliconMLACSOptimizer",
        "AppleSiliconPerformanceMonitor",
        "UnifiedMemoryPool",
        "NeuralEngineCoordinator",
        "MetalComputeCoordinator"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 701,
        "lines_covered": 0,
        "lines_missing": 701,
        "coverage_percentage": 0.0,
        "complexity_score": 13.838120104438643,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 80.0,
        "type_hints": 52.77777777777778,
        "error_handling": 25.0,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "build_verification.py": {
      "file_path": "build_verification.py",
      "functions": [
        "pretty_print",
        "main",
        "__init__",
        "verify_syntax",
        "verify_imports",
        "verify_enhanced_features",
        "verify_dependencies",
        "run_integration_tests",
        "generate_report"
      ],
      "classes": [
        "BuildVerification"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 279,
        "lines_covered": 0,
        "lines_missing": 279,
        "coverage_percentage": 0.0,
        "complexity_score": 11.604095563139932,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 90.0,
        "type_hints": 0.0,
        "error_handling": 38.88888888888889,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "cli.py": {
      "file_path": "cli.py",
      "functions": [],
      "classes": [],
      "test_files": [
        "e2e_view_navigation_test.py",
        "fully_headless_e2e_test.py",
        "test_backend.py",
        "test_enhanced_voice_pipeline_system.py",
        "test_langgraph_framework_coordinator.py",
        "test_production_mlacs_langchain_integration_hub.py",
        "test_production_mlacs_simple.py",
        "test_streaming_response_integration.py",
        "test_suite.py",
        "venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_dask.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_memmapping.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_numpy_pickle.py",
        "venv/lib/python3.13/site-packages/mpmath/tests/test_eigen.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/approximation/tests/test_clique.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/approximation/tests/test_density.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/approximation/tests/test_ramsey.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/centrality/tests/test_harmonic_centrality.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/coloring/tests/test_coloring.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/community/tests/test_asyn_fluid.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/community/tests/test_kclique.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/community/tests/test_label_propagation.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/components/tests/test_strongly_connected.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/connectivity/tests/test_edge_augmentation.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/connectivity/tests/test_edge_kcomponents.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/isomorphism/tests/test_isomorphism.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/isomorphism/tests/test_vf2pp.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/shortest_paths/tests/test_astar.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/shortest_paths/tests/test_weighted.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_asteroidal.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_chains.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_chordal.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_clique.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_cuts.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_cycles.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_d_separation.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_dag.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_euler.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_lowest_common_ancestors.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_max_weight_clique.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_voronoi.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tree/tests/test_recognition.py",
        "venv/lib/python3.13/site-packages/networkx/drawing/tests/test_pylab.py",
        "venv/lib/python3.13/site-packages/networkx/generators/tests/test_community.py",
        "venv/lib/python3.13/site-packages/networkx/generators/tests/test_duplication.py",
        "venv/lib/python3.13/site-packages/networkx/generators/tests/test_geometric.py",
        "venv/lib/python3.13/site-packages/networkx/generators/tests/test_time_series.py",
        "venv/lib/python3.13/site-packages/networkx/readwrite/tests/test_text.py",
        "venv/lib/python3.13/site-packages/networkx/utils/tests/test_misc.py",
        "venv/lib/python3.13/site-packages/nltk/test/unit/test_json2csv_corpus.py",
        "venv/lib/python3.13/site-packages/nltk/test/unit/translate/test_ibm_model.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/doc_examples/test_sessionize.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_array_methods.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_cli.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_extending.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_help.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_linalg.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_lists.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_parfors.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_ufuncs.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_conversion_utils.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_indexerrors.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_item_selection.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_mem_overlap.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_multiarray.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_numeric.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_regression.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_simd.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_ufunc.py",
        "venv/lib/python3.13/site-packages/numpy/_pyinstaller/tests/test_pyinstaller.py",
        "venv/lib/python3.13/site-packages/numpy/f2py/tests/test_f2py2e.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_arraypad.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_index_tricks.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_ufunclike.py",
        "venv/lib/python3.13/site-packages/numpy/ma/tests/test_core.py",
        "venv/lib/python3.13/site-packages/numpy/ma/tests/test_old_ma.py",
        "venv/lib/python3.13/site-packages/numpy/matrixlib/tests/test_defmatrix.py",
        "venv/lib/python3.13/site-packages/numpy/testing/tests/test_utils.py",
        "venv/lib/python3.13/site-packages/numpy/tests/test_public_api.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_bsd.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_connections.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_testutils.py",
        "venv/lib/python3.13/site-packages/regex/test_regex.py",
        "venv/lib/python3.13/site-packages/scipy/cluster/tests/test_hierarchy.py",
        "venv/lib/python3.13/site-packages/scipy/integrate/tests/test_quadpack.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_fitpack2.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_interpolate.py",
        "venv/lib/python3.13/site-packages/scipy/io/tests/test_wavfile.py",
        "venv/lib/python3.13/site-packages/scipy/ndimage/tests/test_morphology.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test__differential_evolution.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_linprog.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_milp.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_optimize.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_slsqp.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_peak_finding.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/linalg/_eigen/arpack/tests/test_arpack.py",
        "venv/lib/python3.13/site-packages/scipy/spatial/tests/test_distance.py",
        "venv/lib/python3.13/site-packages/scipy/spatial/tests/test_slerp.py",
        "venv/lib/python3.13/site-packages/scipy/spatial/tests/test_spherical_voronoi.py",
        "venv/lib/python3.13/site-packages/scipy/spatial/transform/tests/test_rotation_groups.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_distributions.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_fit.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_mgc.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_stats.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_survival.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_build_clib.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_build_meta.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_config_discovery.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_setuptools.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_windows_wrappers.py",
        "venv/lib/python3.13/site-packages/sklearn/_loss/tests/test_loss.py",
        "venv/lib/python3.13/site-packages/sklearn/cluster/tests/test_affinity_propagation.py",
        "venv/lib/python3.13/site-packages/sklearn/cluster/tests/test_dbscan.py",
        "venv/lib/python3.13/site-packages/sklearn/cluster/tests/test_hdbscan.py",
        "venv/lib/python3.13/site-packages/sklearn/cluster/tests/test_hierarchical.py",
        "venv/lib/python3.13/site-packages/sklearn/cluster/tests/test_k_means.py",
        "venv/lib/python3.13/site-packages/sklearn/cluster/tests/test_optics.py",
        "venv/lib/python3.13/site-packages/sklearn/datasets/tests/test_base.py",
        "venv/lib/python3.13/site-packages/sklearn/decomposition/tests/test_nmf.py",
        "venv/lib/python3.13/site-packages/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py",
        "venv/lib/python3.13/site-packages/sklearn/ensemble/tests/test_forest.py",
        "venv/lib/python3.13/site-packages/sklearn/gaussian_process/tests/test_kernels.py",
        "venv/lib/python3.13/site-packages/sklearn/impute/tests/test_impute.py",
        "venv/lib/python3.13/site-packages/sklearn/impute/tests/test_knn.py",
        "venv/lib/python3.13/site-packages/sklearn/linear_model/tests/test_coordinate_descent.py",
        "venv/lib/python3.13/site-packages/sklearn/manifold/tests/test_isomap.py",
        "venv/lib/python3.13/site-packages/sklearn/manifold/tests/test_mds.py",
        "venv/lib/python3.13/site-packages/sklearn/manifold/tests/test_t_sne.py",
        "venv/lib/python3.13/site-packages/sklearn/metrics/_plot/tests/test_confusion_matrix_display.py",
        "venv/lib/python3.13/site-packages/sklearn/metrics/cluster/tests/test_unsupervised.py",
        "venv/lib/python3.13/site-packages/sklearn/metrics/tests/test_classification.py",
        "venv/lib/python3.13/site-packages/sklearn/metrics/tests/test_common.py",
        "venv/lib/python3.13/site-packages/sklearn/metrics/tests/test_dist_metrics.py",
        "venv/lib/python3.13/site-packages/sklearn/metrics/tests/test_pairwise.py",
        "venv/lib/python3.13/site-packages/sklearn/metrics/tests/test_pairwise_distances_reduction.py",
        "venv/lib/python3.13/site-packages/sklearn/model_selection/tests/test_search.py",
        "venv/lib/python3.13/site-packages/sklearn/neighbors/tests/test_ball_tree.py",
        "venv/lib/python3.13/site-packages/sklearn/neighbors/tests/test_graph.py",
        "venv/lib/python3.13/site-packages/sklearn/neighbors/tests/test_kd_tree.py",
        "venv/lib/python3.13/site-packages/sklearn/neighbors/tests/test_kde.py",
        "venv/lib/python3.13/site-packages/sklearn/neighbors/tests/test_lof.py",
        "venv/lib/python3.13/site-packages/sklearn/neighbors/tests/test_nca.py",
        "venv/lib/python3.13/site-packages/sklearn/neighbors/tests/test_nearest_centroid.py",
        "venv/lib/python3.13/site-packages/sklearn/neighbors/tests/test_neighbors.py",
        "venv/lib/python3.13/site-packages/sklearn/neighbors/tests/test_neighbors_pipeline.py",
        "venv/lib/python3.13/site-packages/sklearn/neighbors/tests/test_neighbors_tree.py",
        "venv/lib/python3.13/site-packages/sklearn/neural_network/tests/test_rbm.py",
        "venv/lib/python3.13/site-packages/sklearn/preprocessing/tests/test_common.py",
        "venv/lib/python3.13/site-packages/sklearn/preprocessing/tests/test_data.py",
        "venv/lib/python3.13/site-packages/sklearn/semi_supervised/tests/test_label_propagation.py",
        "venv/lib/python3.13/site-packages/sklearn/tests/test_calibration.py",
        "venv/lib/python3.13/site-packages/sklearn/tests/test_isotonic.py",
        "venv/lib/python3.13/site-packages/sklearn/tests/test_public_functions.py",
        "venv/lib/python3.13/site-packages/sklearn/tests/test_random_projection.py",
        "venv/lib/python3.13/site-packages/sklearn/tree/tests/test_monotonic_tree.py",
        "venv/lib/python3.13/site-packages/sklearn/tree/tests/test_tree.py",
        "venv/lib/python3.13/site-packages/sympy/combinatorics/tests/test_fp_groups.py",
        "venv/lib/python3.13/site-packages/sympy/combinatorics/tests/test_galois.py",
        "venv/lib/python3.13/site-packages/sympy/combinatorics/tests/test_generators.py",
        "venv/lib/python3.13/site-packages/sympy/combinatorics/tests/test_group_constructs.py",
        "venv/lib/python3.13/site-packages/sympy/combinatorics/tests/test_group_numbers.py",
        "venv/lib/python3.13/site-packages/sympy/combinatorics/tests/test_homomorphisms.py",
        "venv/lib/python3.13/site-packages/sympy/combinatorics/tests/test_named_groups.py",
        "venv/lib/python3.13/site-packages/sympy/combinatorics/tests/test_pc_groups.py",
        "venv/lib/python3.13/site-packages/sympy/combinatorics/tests/test_perm_groups.py",
        "venv/lib/python3.13/site-packages/sympy/combinatorics/tests/test_permutations.py",
        "venv/lib/python3.13/site-packages/sympy/combinatorics/tests/test_polyhedron.py",
        "venv/lib/python3.13/site-packages/sympy/combinatorics/tests/test_testutil.py",
        "venv/lib/python3.13/site-packages/sympy/core/tests/test_cache.py",
        "venv/lib/python3.13/site-packages/sympy/core/tests/test_numbers.py",
        "venv/lib/python3.13/site-packages/sympy/discrete/tests/test_convolutions.py",
        "venv/lib/python3.13/site-packages/sympy/geometry/tests/test_point.py",
        "venv/lib/python3.13/site-packages/sympy/integrals/tests/test_manual.py",
        "venv/lib/python3.13/site-packages/sympy/physics/mechanics/tests/test_lagrange.py",
        "venv/lib/python3.13/site-packages/sympy/physics/vector/tests/test_point.py",
        "venv/lib/python3.13/site-packages/sympy/polys/agca/tests/test_extensions.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_euclidtools.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_groebnertools.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_subresultants_qq_zz.py",
        "venv/lib/python3.13/site-packages/sympy/printing/pretty/tests/test_pretty.py",
        "venv/lib/python3.13/site-packages/sympy/printing/tests/test_latex.py",
        "venv/lib/python3.13/site-packages/sympy/printing/tests/test_repr.py",
        "venv/lib/python3.13/site-packages/sympy/printing/tests/test_str.py",
        "venv/lib/python3.13/site-packages/sympy/tensor/tests/test_tensor.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/rpc/rpc_test.py",
        "venv/lib/python3.13/site-packages/trio/_core/_tests/test_exceptiongroup_gc.py",
        "venv/lib/python3.13/site-packages/trio/_core/_tests/test_run.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_dtls.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_highlevel_open_tcp_listeners.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_highlevel_open_tcp_stream.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_highlevel_open_unix_stream.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_highlevel_serve_listeners.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_highlevel_socket.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_highlevel_ssl_helpers.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_socket.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_ssl.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_testing.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_util.py",
        "venv/lib/python3.13/site-packages/websocket/tests/test_abnf.py",
        "venv/lib/python3.13/site-packages/websocket/tests/test_app.py",
        "venv/lib/python3.13/site-packages/websocket/tests/test_cookiejar.py",
        "venv/lib/python3.13/site-packages/websocket/tests/test_http.py",
        "venv/lib/python3.13/site-packages/websocket/tests/test_url.py",
        "venv/lib/python3.13/site-packages/websocket/tests/test_websocket.py"
      ],
      "coverage": {
        "lines_total": 64,
        "lines_covered": 54,
        "lines_missing": 10,
        "coverage_percentage": 85.0,
        "complexity_score": 8.823529411764707,
        "test_score": 0.85,
        "tdd_compliance": true
      },
      "code_quality": {
        "docstring_coverage": 0.0,
        "type_hints": 0.0,
        "error_handling": 50.0,
        "function_complexity": 100.0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "comprehensive_functional_verification.py": {
      "file_path": "comprehensive_functional_verification.py",
      "functions": [
        "main",
        "__init__",
        "log_test",
        "test_production_build_exists",
        "test_source_code_quality",
        "test_api_integration",
        "test_ui_completeness",
        "test_human_usability_requirements",
        "test_data_realism",
        "test_production_readiness",
        "test_no_broken_functionality",
        "run_comprehensive_tests"
      ],
      "classes": [
        "ComprehensiveFunctionalTester"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 388,
        "lines_covered": 0,
        "lines_missing": 388,
        "coverage_percentage": 0.0,
        "complexity_score": 12.562814070351758,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 84.61538461538461,
        "type_hints": 0.0,
        "error_handling": 0.0,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "comprehensive_memory_system_integration_test.py": {
      "file_path": "comprehensive_memory_system_integration_test.py",
      "functions": [
        "__init__"
      ],
      "classes": [
        "ComprehensiveMemorySystemTest"
      ],
      "test_files": [
        "comprehensive_memory_system_integration_test.py"
      ],
      "coverage": {
        "lines_total": 496,
        "lines_covered": 0,
        "lines_missing": 496,
        "coverage_percentage": 0.0,
        "complexity_score": 6.981132075471698,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 50.0,
        "type_hints": 100,
        "error_handling": 100,
        "function_complexity": 36.0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "comprehensive_mlacs_headless_test_framework.py": {
      "file_path": "comprehensive_mlacs_headless_test_framework.py",
      "functions": [
        "timer_decorator",
        "async_timer_decorator",
        "wrapper",
        "__init__",
        "_initialize_system",
        "_initialize_database",
        "_initialize_framework_instances",
        "_register_built_in_test_suites",
        "_register_optimization_engine_tests",
        "_register_communication_workflows_tests",
        "_register_enterprise_plugins_tests",
        "_register_langchain_integration_tests",
        "_register_cross_framework_tests",
        "_register_performance_benchmark_tests",
        "_register_ci_cd_tests",
        "_load_existing_test_data",
        "_initialize_ci_cd_hooks",
        "execute_test_suite",
        "_execute_tests_sequential",
        "_execute_tests_parallel",
        "_execute_single_test",
        "_test_optimization_engine_initialization",
        "_test_performance_metric_recording",
        "_test_optimization_recommendations",
        "_test_resource_allocation",
        "_test_performance_prediction",
        "_test_communication_system_initialization",
        "_test_workflow_creation",
        "_test_message_routing",
        "_test_plugin_system_initialization",
        "_test_plugin_registration",
        "_test_security_scanning",
        "_test_langchain_hub_initialization",
        "_test_framework_compatibility",
        "_test_data_consistency",
        "_test_framework_performance_benchmark",
        "_test_memory_usage_analysis",
        "_test_build_validation",
        "_test_deployment_verification",
        "_pre_build_hook",
        "_post_build_hook",
        "_pre_deployment_hook",
        "_post_deployment_hook",
        "_get_memory_usage",
        "_get_cpu_usage",
        "_get_stack_trace",
        "_persist_test_execution",
        "_generate_test_report",
        "get_system_status",
        "create_test_framework"
      ],
      "classes": [
        "TestCategory",
        "TestStatus",
        "TestPriority",
        "FrameworkType",
        "TestCase",
        "TestResult",
        "TestSuite",
        "TestExecution",
        "MLACSHeadlessTestFramework",
        "MLACSTestFrameworkFactory"
      ],
      "test_files": [
        "test_comprehensive_mlacs_headless_framework.py"
      ],
      "coverage": {
        "lines_total": 1336,
        "lines_covered": 0,
        "lines_missing": 1336,
        "coverage_percentage": 0.0,
        "complexity_score": 11.453449430676491,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 93.33333333333333,
        "type_hints": 20.0,
        "error_handling": 24.0,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "comprehensive_mlacs_performance_analysis.py": {
      "file_path": "comprehensive_mlacs_performance_analysis.py",
      "functions": [
        "main",
        "__init__",
        "analyze_all_mlacs_performance",
        "_analyze_optimization_engine",
        "_analyze_headless_testing",
        "_analyze_framework_integration",
        "_analyze_historical_data",
        "_generate_performance_summary",
        "_generate_optimization_framework",
        "_generate_baseline_recommendations",
        "_generate_resource_optimization",
        "_generate_regression_monitoring",
        "_generate_implementation_roadmap",
        "_save_analysis_results",
        "_generate_summary_report"
      ],
      "classes": [
        "PerformanceMetrics",
        "OptimizationRecommendation",
        "MLACSPerformanceAnalyzer"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 803,
        "lines_covered": 0,
        "lines_missing": 803,
        "coverage_percentage": 0.0,
        "complexity_score": 4.374240583232078,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 94.44444444444444,
        "type_hints": 43.333333333333336,
        "error_handling": 23.333333333333332,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "comprehensive_multi_llm_tier_testing_framework.py": {
      "file_path": "comprehensive_multi_llm_tier_testing_framework.py",
      "functions": [
        "__init__",
        "_initialize_providers",
        "_estimate_cost",
        "get_provider_statistics",
        "__init__",
        "__init__",
        "_start_system_monitoring",
        "_stop_system_monitoring",
        "_calculate_overall_test_score",
        "json_serializer",
        "monitor_loop"
      ],
      "classes": [
        "LLMProvider",
        "LLMProviderConfig",
        "MultiLLMTestScenario",
        "LLMAPICall",
        "MultiLLMTestResult",
        "LLMProviderManager",
        "MultiLLMCoordinationEngine",
        "ComprehensiveMultiLLMTierTester"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 1348,
        "lines_covered": 0,
        "lines_missing": 1348,
        "coverage_percentage": 0.0,
        "complexity_score": 7.062937062937063,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 78.94736842105263,
        "type_hints": 100,
        "error_handling": 100,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "comprehensive_test_suite.py": {
      "file_path": "comprehensive_test_suite.py",
      "functions": [
        "__init__"
      ],
      "classes": [
        "ComprehensiveTestSuite"
      ],
      "test_files": [
        "_macOS/tests/test_endpoints.py",
        "comprehensive_memory_system_integration_test.py",
        "scripts/test_coverage_analyzer.py",
        "test_apple_silicon_langchain_tools.py",
        "test_apple_silicon_langchain_tools_comprehensive.py",
        "test_enhanced_voice_pipeline_system.py",
        "test_graphiti_temporal_knowledge_integration.py",
        "test_langgraph_complex_workflow_comprehensive.py",
        "test_langgraph_intelligent_framework_router_comprehensive.py",
        "test_langgraph_memory_aware_state_creation_comprehensive.py",
        "test_langgraph_multi_tier_memory_comprehensive.py",
        "test_langgraph_performance_analytics_comprehensive.py",
        "test_langgraph_tier_management_comprehensive.py",
        "test_langgraph_workflow_state_management_comprehensive.py",
        "test_pydantic_ai_core_integration_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 667,
        "lines_covered": 0,
        "lines_missing": 667,
        "coverage_percentage": 0.0,
        "complexity_score": 7.818930041152264,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 0.0,
        "type_hints": 100,
        "error_handling": 100,
        "function_complexity": 69.0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "comprehensive_ui_visibility_verification.py": {
      "file_path": "comprehensive_ui_visibility_verification.py",
      "functions": [
        "main",
        "__init__",
        "verify_dashboard_elements",
        "verify_agents_elements",
        "verify_tasks_elements",
        "verify_settings_elements",
        "verify_general_ui_elements",
        "verify_api_integration",
        "_verify_elements",
        "find_main_js_file",
        "generate_manual_testing_guide",
        "run_comprehensive_verification",
        "create_human_testing_guide"
      ],
      "classes": [
        "UIVisibilityVerifier"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 584,
        "lines_covered": 0,
        "lines_missing": 584,
        "coverage_percentage": 0.0,
        "complexity_score": 7.046979865771812,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 85.71428571428571,
        "type_hints": 0.0,
        "error_handling": 3.8461538461538463,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "config_manager.py": {
      "file_path": "config_manager.py",
      "functions": [
        "to_dict",
        "to_dict",
        "__init__",
        "_get_or_create_encryption_key",
        "get_current_config",
        "get_provider_configs",
        "get_api_keys_status",
        "set_api_key",
        "_update_env_file",
        "update_provider_config",
        "get_available_models_for_provider"
      ],
      "classes": [
        "ProviderConfig",
        "APIKeyInfo",
        "ConfigManager"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 313,
        "lines_covered": 0,
        "lines_missing": 313,
        "coverage_percentage": 0.0,
        "complexity_score": 16.666666666666664,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 57.14285714285714,
        "type_hints": 52.27272727272727,
        "error_handling": 18.181818181818183,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "e2e_view_navigation_test.py": {
      "file_path": "e2e_view_navigation_test.py",
      "functions": [
        "__init__",
        "run_applescript",
        "launch_app",
        "quit_app",
        "take_screenshot",
        "click_navigation_button",
        "get_ui_elements",
        "validate_view_elements",
        "generate_navigation_report"
      ],
      "classes": [
        "AdvancedViewNavigationTest"
      ],
      "test_files": [
        "e2e_view_navigation_test.py"
      ],
      "coverage": {
        "lines_total": 501,
        "lines_covered": 0,
        "lines_missing": 501,
        "coverage_percentage": 0.0,
        "complexity_score": 9.124767225325884,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 90.0,
        "type_hints": 69.44444444444444,
        "error_handling": 55.55555555555556,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "enhanced_backend.py": {
      "file_path": "enhanced_backend.py",
      "functions": [],
      "classes": [],
      "test_files": [
        "e2e_view_navigation_test.py"
      ],
      "coverage": {
        "lines_total": 326,
        "lines_covered": 277,
        "lines_missing": 49,
        "coverage_percentage": 85.0,
        "complexity_score": 4.624277456647398,
        "test_score": 0.85,
        "tdd_compliance": true
      },
      "code_quality": {
        "docstring_coverage": 0.0,
        "type_hints": 100,
        "error_handling": 100,
        "function_complexity": 100.0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "enhanced_mlacs_benchmark.py": {
      "file_path": "enhanced_mlacs_benchmark.py",
      "functions": [
        "__init__",
        "_create_enhanced_scenarios",
        "_calculate_quality_score",
        "_calculate_multi_llm_quality_score",
        "_calculate_enhanced_metrics",
        "_analyze_provider_performance",
        "_calculate_coordination_overhead",
        "_calculate_parallel_efficiency",
        "_calculate_quality_distribution",
        "_estimate_total_cost",
        "_generate_cache_key",
        "_generate_performance_insights",
        "_generate_optimization_recommendations",
        "_create_empty_metrics",
        "_print_enhanced_summary",
        "__init__",
        "start_monitoring",
        "stop_monitoring",
        "_monitor_loop",
        "get_summary"
      ],
      "classes": [
        "EnhancedPerformanceMetrics",
        "BenchmarkScenario",
        "OptimizationStrategy",
        "EnhancedMLACSBenchmark",
        "ResourceMonitor"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 978,
        "lines_covered": 0,
        "lines_missing": 978,
        "coverage_percentage": 0.0,
        "complexity_score": 11.590038314176246,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 92.0,
        "type_hints": 55.00000000000001,
        "error_handling": 15.0,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "focused_supervisor_worker_memory_performance_test.py": {
      "file_path": "focused_supervisor_worker_memory_performance_test.py",
      "functions": [
        "__init__",
        "init_database",
        "__init__",
        "__init__",
        "_calculate_improvements",
        "_generate_recommendation"
      ],
      "classes": [
        "PerformanceResult",
        "ThreeTierMemorySystem",
        "SupervisorWorkerAgent",
        "FocusedPerformanceTest"
      ],
      "test_files": [
        "focused_supervisor_worker_memory_performance_test.py"
      ],
      "coverage": {
        "lines_total": 342,
        "lines_covered": 0,
        "lines_missing": 342,
        "coverage_percentage": 0.0,
        "complexity_score": 8.108108108108109,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 50.0,
        "type_hints": 100,
        "error_handling": 8.333333333333332,
        "function_complexity": 41.333333333333336
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "fully_headless_e2e_test.py": {
      "file_path": "fully_headless_e2e_test.py",
      "functions": [
        "__init__",
        "preserve_user_context",
        "restore_user_context",
        "run_silent_applescript",
        "launch_app_headless",
        "quit_app_silent",
        "take_silent_screenshot",
        "interact_with_app_headless",
        "generate_headless_report"
      ],
      "classes": [
        "FullyHeadlessE2ETest"
      ],
      "test_files": [
        "fully_headless_e2e_test.py"
      ],
      "coverage": {
        "lines_total": 438,
        "lines_covered": 0,
        "lines_missing": 438,
        "coverage_percentage": 0.0,
        "complexity_score": 11.064718162839249,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 90.0,
        "type_hints": 61.111111111111114,
        "error_handling": 66.66666666666666,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "headless_multi_llm_benchmark.py": {
      "file_path": "headless_multi_llm_benchmark.py",
      "functions": [
        "__init__",
        "_initialize_optimization",
        "_generate_realistic_response",
        "get_performance_stats",
        "__init__",
        "_initialize_database",
        "initialize_providers",
        "create_complex_benchmark_queries",
        "_evaluate_response_quality",
        "_store_benchmark_result",
        "_generate_performance_summary",
        "_analyze_optimization_effectiveness",
        "_save_benchmark_results",
        "generate_benchmark_report",
        "__init__",
        "start_monitoring",
        "stop_monitoring",
        "_monitor_loop",
        "_collect_metrics",
        "get_current_metrics",
        "get_summary"
      ],
      "classes": [
        "LLMProvider",
        "BenchmarkType",
        "OptimizationLevel",
        "BenchmarkResult",
        "ComplexQuery",
        "HeadlessLLMProvider",
        "MultiLLMBenchmarkFramework",
        "SystemMonitor"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 875,
        "lines_covered": 0,
        "lines_missing": 875,
        "coverage_percentage": 0.0,
        "complexity_score": 9.351753453772583,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 89.65517241379311,
        "type_hints": 36.904761904761905,
        "error_handling": 11.904761904761903,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "headless_test_suite.py": {
      "file_path": "headless_test_suite.py",
      "functions": [
        "__init__",
        "run_applescript",
        "launch_agenticseek_app",
        "quit_agenticseek_app",
        "get_window_info",
        "click_button_by_name",
        "navigate_to_view",
        "take_screenshot",
        "check_ui_elements_visible",
        "__init__",
        "__init__"
      ],
      "classes": [
        "MacOSAutomation",
        "E2ETestRunner",
        "HeadlessTestSuite"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 624,
        "lines_covered": 0,
        "lines_missing": 624,
        "coverage_percentage": 0.0,
        "complexity_score": 8.64381520119225,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 78.57142857142857,
        "type_hints": 93.18181818181817,
        "error_handling": 77.27272727272727,
        "function_complexity": 42.81818181818182
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "iterative_mlacs_optimizer.py": {
      "file_path": "iterative_mlacs_optimizer.py",
      "functions": [
        "__init__",
        "_calculate_query_complexity",
        "_check_cache",
        "_cache_result",
        "_create_cached_result",
        "_record_performance_data",
        "__init__",
        "_create_optimization_iterations",
        "_calculate_performance_metrics",
        "_calculate_improvement",
        "_extract_patterns_from_iteration",
        "_evaluate_optimization_success",
        "_analyze_iteration_results",
        "_calculate_overall_optimization_score",
        "_extract_learning_insights",
        "save_iteration_results"
      ],
      "classes": [
        "OptimizationIteration",
        "LearningMetric",
        "OptimizationConfiguration",
        "IterationResult",
        "LearningInsight",
        "OptimizedMLACSBenchmark",
        "IterativeMLACSOptimizer"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 648,
        "lines_covered": 0,
        "lines_missing": 648,
        "coverage_percentage": 0.0,
        "complexity_score": 16.690042075736326,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 91.30434782608695,
        "type_hints": 39.0625,
        "error_handling": 3.125,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "langchain_video_workflows_sandbox.py": {
      "file_path": "langchain_video_workflows_sandbox.py",
      "functions": [
        "__init__",
        "_initialize_database",
        "_initialize_workflow_templates",
        "get_project_status",
        "get_collaboration_analytics",
        "__init__",
        "start_project_tracking",
        "record_stage_performance",
        "stop_project_tracking",
        "_calculate_efficiency_score",
        "__init__",
        "invoke",
        "from_messages",
        "format_prompt",
        "__init__",
        "run"
      ],
      "classes": [
        "VideoQuality",
        "VideoStage",
        "LLMRole",
        "VideoRequest",
        "VideoScript",
        "VideoAsset",
        "VideoProject",
        "LLMCollaborationMetric",
        "VideoWorkflowOrchestrator",
        "VideoWorkflowPerformanceTracker",
        "BaseMessage",
        "HumanMessage",
        "AIMessage",
        "SystemMessage",
        "BaseCallbackHandler",
        "Runnable",
        "ChatPromptTemplate",
        "LLMChain"
      ],
      "test_files": [
        "test_langchain_video_workflows_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 974,
        "lines_covered": 0,
        "lines_missing": 974,
        "coverage_percentage": 0.0,
        "complexity_score": 7.685009487666034,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 52.94117647058824,
        "type_hints": 98.4375,
        "error_handling": 68.75,
        "function_complexity": 19.625
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "langgraph_advanced_coordination_patterns_sandbox.py": {
      "file_path": "langgraph_advanced_coordination_patterns_sandbox.py",
      "functions": [
        "__init__",
        "_classify_error",
        "_update_performance_metrics",
        "_adapt_performance_profile",
        "__init__",
        "_initialize_specialized_agents",
        "_initialize_coordination_patterns",
        "_initialize_database",
        "_calculate_coordination_metrics",
        "_calculate_efficiency_rating"
      ],
      "classes": [
        "AdvancedCoordinationPattern",
        "AgentSpecialization",
        "ExecutionContext",
        "CoordinationStrategy",
        "AdvancedTaskRequirements",
        "CoordinationMetrics",
        "AdvancedAgentNode",
        "AdvancedCoordinationEngine",
        "DynamicLoadBalancer",
        "ConsensusEngine",
        "ErrorRecoveryManager",
        "IntelligentResultSynthesizer",
        "AdaptivePatternSelector"
      ],
      "test_files": [
        "test_langgraph_advanced_coordination_patterns_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 1378,
        "lines_covered": 0,
        "lines_missing": 1378,
        "coverage_percentage": 0.0,
        "complexity_score": 9.587217043941411,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 91.30434782608695,
        "type_hints": 100,
        "error_handling": 40.0,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "langgraph_framework_decision_engine_sandbox.py": {
      "file_path": "langgraph_framework_decision_engine_sandbox.py",
      "functions": [
        "__init__",
        "analyze_complexity",
        "_calculate_complexity_score",
        "_normalize_value",
        "_determine_complexity_level",
        "_estimate_dependency_chains",
        "_detect_workflow_patterns",
        "_estimate_execution_time",
        "_estimate_memory_usage",
        "_estimate_llm_calls",
        "_estimate_computation_cost",
        "__init__",
        "_initialize_capability_profiles",
        "get_framework_capabilities",
        "update_framework_performance",
        "__init__",
        "_initialize_database",
        "_calculate_framework_score",
        "_determine_confidence",
        "_generate_decision_reasoning",
        "_extract_key_factors",
        "_analyze_trade_offs",
        "_store_decision_in_database",
        "record_decision_outcome",
        "get_decision_accuracy",
        "__init__"
      ],
      "classes": [
        "FrameworkType",
        "TaskComplexity",
        "DecisionConfidence",
        "WorkflowPattern",
        "TaskAnalysis",
        "FrameworkCapabilities",
        "FrameworkDecision",
        "TaskComplexityAnalyzer",
        "FrameworkCapabilityAssessor",
        "FrameworkDecisionEngine",
        "FrameworkPerformancePredictor"
      ],
      "test_files": [
        "test_langgraph_framework_decision_engine_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 896,
        "lines_covered": 0,
        "lines_missing": 896,
        "coverage_percentage": 0.0,
        "complexity_score": 13.380281690140844,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 89.1891891891892,
        "type_hints": 32.69230769230769,
        "error_handling": 0.0,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "langgraph_framework_performance_prediction_sandbox.py": {
      "file_path": "langgraph_framework_performance_prediction_sandbox.py",
      "functions": [
        "__init__",
        "_initialize_database",
        "store_performance_data",
        "get_historical_data",
        "get_performance_trends",
        "store_prediction_result",
        "get_prediction_accuracy",
        "__init__",
        "analyze_framework_profile",
        "_calculate_resource_efficiency",
        "_analyze_pattern_performance",
        "_analyze_complexity_performance",
        "_estimate_startup_overhead",
        "_estimate_coordination_overhead",
        "_estimate_memory_overhead",
        "_analyze_performance_trends",
        "_calculate_improvement_rate",
        "_identify_degradation_indicators",
        "_calculate_execution_time_trends",
        "_calculate_data_quality_score",
        "_get_default_profile",
        "__init__",
        "_initialize_feature_extractors",
        "train_prediction_models",
        "_extract_features_and_targets",
        "_extract_execution_time_features",
        "_extract_resource_usage_features",
        "_extract_quality_score_features",
        "_extract_success_rate_features",
        "_extract_overhead_features",
        "_extract_target",
        "_get_feature_names",
        "_create_ensemble_model",
        "_save_models",
        "get_best_model",
        "__init__",
        "_combine_predictions",
        "__init__",
        "_initialize_synthetic_data",
        "_extract_prediction_features",
        "_calculate_prediction_confidence",
        "_get_feature_importance",
        "_calculate_historical_variance",
        "_get_fallback_prediction",
        "record_actual_performance",
        "get_prediction_accuracy_report",
        "__init__",
        "predict"
      ],
      "classes": [
        "PredictionConfidence",
        "ModelType",
        "PredictionMetric",
        "HistoricalDataPoint",
        "PredictionResult",
        "FrameworkPerformanceProfile",
        "PredictionModel",
        "HistoricalDataManager",
        "FrameworkProfileAnalyzer",
        "PredictionModelManager",
        "APIEnhancedPredictor",
        "FrameworkPerformancePredictor",
        "EnsembleModel"
      ],
      "test_files": [
        "test_langgraph_framework_performance_prediction_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 1347,
        "lines_covered": 0,
        "lines_missing": 1347,
        "coverage_percentage": 0.0,
        "complexity_score": 17.574086836664367,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 86.88524590163934,
        "type_hints": 27.604166666666668,
        "error_handling": 11.458333333333332,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "langgraph_state_coordination_sandbox.py": {
      "file_path": "langgraph_state_coordination_sandbox.py",
      "functions": [
        "__init__",
        "_initialize_state",
        "_initialize_agent_nodes",
        "_create_agent_function",
        "_calculate_data_quality",
        "_should_handle_error",
        "_select_agents_for_task",
        "_determine_execution_order",
        "_analyze_agent_dependencies",
        "_create_parallel_groups",
        "check_parallel_completion",
        "supervisor_router"
      ],
      "classes": [
        "AgentState",
        "StateTransitionType",
        "CoordinationPattern",
        "WorkflowState",
        "AgentNode",
        "StateTransition",
        "CoordinationContext",
        "StateCoordinationEngine"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 795,
        "lines_covered": 0,
        "lines_missing": 795,
        "coverage_percentage": 0.0,
        "complexity_score": 11.396648044692737,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 85.0,
        "type_hints": 91.66666666666666,
        "error_handling": 12.5,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "langgraph_state_coordination_simplified_sandbox.py": {
      "file_path": "langgraph_state_coordination_simplified_sandbox.py",
      "functions": [
        "__init__",
        "add_node",
        "add_edge",
        "add_conditional_edges",
        "set_entry_point",
        "set_finish_point",
        "compile",
        "__init__",
        "__init__",
        "_initialize_state",
        "_initialize_agent_nodes",
        "_initialize_checkpointer",
        "_create_agent_function",
        "_should_handle_error",
        "_select_agents_for_task",
        "_determine_execution_order",
        "_analyze_agent_dependencies",
        "_create_parallel_groups",
        "check_parallel_completion",
        "supervisor_router"
      ],
      "classes": [
        "AgentState",
        "StateTransitionType",
        "CoordinationPattern",
        "AgentRole",
        "AgentCapability",
        "WorkflowState",
        "TaskAnalysis",
        "AgentNode",
        "StateTransition",
        "CoordinationContext",
        "StateGraph",
        "WorkflowExecutor",
        "StateCoordinationEngine"
      ],
      "test_files": [
        "test_langgraph_state_coordination_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 962,
        "lines_covered": 0,
        "lines_missing": 962,
        "coverage_percentage": 0.0,
        "complexity_score": 11.770244821092279,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 84.84848484848484,
        "type_hints": 58.75,
        "error_handling": 15.0,
        "function_complexity": 15.049999999999997
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "langgraph_task_analysis_routing_sandbox.py": {
      "file_path": "langgraph_task_analysis_routing_sandbox.py",
      "functions": [
        "__init__",
        "_initialize_pattern_library",
        "_pattern_type_to_enum",
        "_get_default_metrics",
        "get_performance_stats",
        "__init__",
        "estimate_resources",
        "__init__",
        "predict_quality",
        "__init__",
        "_initialize_database",
        "_apply_routing_strategy",
        "_priority_to_factor",
        "_get_fallback_strategy",
        "_generate_routing_reasoning",
        "_extract_key_routing_factors",
        "_generate_risk_mitigation",
        "_check_sla_compliance",
        "_get_default_routing_decision",
        "_store_routing_decision",
        "record_routing_outcome",
        "get_routing_performance"
      ],
      "classes": [
        "RoutingStrategy",
        "TaskPriority",
        "ResourceType",
        "AnalysisStatus",
        "ResourceRequirement",
        "TaskMetrics",
        "RoutingDecision",
        "AdvancedTaskAnalyzer",
        "ResourceEstimator",
        "QualityPredictor",
        "IntelligentTaskRouter"
      ],
      "test_files": [
        "test_langgraph_task_analysis_routing_comprehensive.py",
        "test_langgraph_task_analysis_routing_comprehensive_fixed.py"
      ],
      "coverage": {
        "lines_total": 823,
        "lines_covered": 0,
        "lines_missing": 823,
        "coverage_percentage": 0.0,
        "complexity_score": 11.024498886414253,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 87.87878787878788,
        "type_hints": 46.590909090909086,
        "error_handling": 4.545454545454546,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "langgraph_tier_management_sandbox.py": {
      "file_path": "langgraph_tier_management_sandbox.py",
      "functions": [
        "__init__",
        "_initialize_tier_configurations",
        "_initialize_database",
        "_map_limit_to_usage_metric",
        "get_tier_features",
        "get_tier_limits",
        "__init__"
      ],
      "classes": [
        "UserTier",
        "TierLimitType",
        "DegradationStrategy",
        "UsageMetricType",
        "TierConfiguration",
        "UsageMetric",
        "TierViolation",
        "UpgradeRecommendation",
        "TierManager",
        "TierAwareCoordinationWrapper"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 926,
        "lines_covered": 0,
        "lines_missing": 926,
        "coverage_percentage": 0.0,
        "complexity_score": 8.072653884964682,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 88.23529411764706,
        "type_hints": 100,
        "error_handling": 50.0,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "mcp_applescript_server.py": {
      "file_path": "mcp_applescript_server.py",
      "functions": [
        "__init__",
        "create_response",
        "create_error",
        "execute_applescript",
        "app_launch",
        "app_quit",
        "click_button",
        "get_ui_info",
        "take_screenshot",
        "validate_ui_elements",
        "handle_tool_call"
      ],
      "classes": [
        "MCPMessage",
        "AppleScriptMCPServer"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 457,
        "lines_covered": 0,
        "lines_missing": 457,
        "coverage_percentage": 0.0,
        "complexity_score": 14.316239316239315,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 92.3076923076923,
        "type_hints": 65.9090909090909,
        "error_handling": 36.36363636363637,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "mlacs_comprehensive_performance_benchmarking_suite.py": {
      "file_path": "mlacs_comprehensive_performance_benchmarking_suite.py",
      "functions": [
        "timer_decorator",
        "memory_monitor_decorator",
        "wrapper",
        "wrapper",
        "__init__",
        "_initialize_system",
        "_initialize_database",
        "_initialize_framework_instances",
        "_register_benchmark_suites",
        "_register_optimization_engine_benchmarks",
        "_register_communication_workflows_benchmarks",
        "_register_enterprise_plugins_benchmarks",
        "_register_langchain_integration_benchmarks",
        "_register_headless_testing_benchmarks",
        "_register_cross_framework_benchmarks",
        "_load_performance_baselines",
        "_initialize_system_monitoring",
        "execute_benchmark_suite",
        "_execute_single_benchmark",
        "_benchmark_optimization_engine",
        "_benchmark_communication_workflows",
        "_benchmark_enterprise_plugins",
        "_benchmark_langchain_integration",
        "_benchmark_headless_testing",
        "_benchmark_cross_framework",
        "_calculate_performance_summary",
        "_update_performance_baseline",
        "generate_optimization_recommendations",
        "_start_monitoring",
        "_stop_monitoring",
        "_get_system_info",
        "_persist_benchmark_execution",
        "_persist_performance_baseline",
        "_generate_benchmark_report",
        "get_system_status",
        "create_benchmarking_suite"
      ],
      "classes": [
        "BenchmarkMetric",
        "BenchmarkSuite",
        "BenchmarkExecution",
        "PerformanceBaseline",
        "MLACSPerformanceBenchmarkingSuite",
        "MLACSBenchmarkingSuiteFactory"
      ],
      "test_files": [
        "test_benchmarking_suite_simple.py"
      ],
      "coverage": {
        "lines_total": 1132,
        "lines_covered": 0,
        "lines_missing": 1132,
        "coverage_percentage": 0.0,
        "complexity_score": 14.715447154471544,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 88.09523809523809,
        "type_hints": 36.11111111111111,
        "error_handling": 43.05555555555556,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "mlacs_headless_benchmark.py": {
      "file_path": "mlacs_headless_benchmark.py",
      "functions": [
        "__init__",
        "_initialize_providers",
        "__init__",
        "_create_benchmark_queries",
        "_count_insights",
        "_count_recommendations"
      ],
      "classes": [
        "BenchmarkComplexity",
        "QualityMetric",
        "BenchmarkQuery",
        "LLMProvider",
        "BenchmarkResult",
        "RealLLMProviderManager",
        "MLACSHeadlessBenchmark"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 796,
        "lines_covered": 0,
        "lines_missing": 796,
        "coverage_percentage": 0.0,
        "complexity_score": 5.7579318448883665,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 84.61538461538461,
        "type_hints": 100,
        "error_handling": 41.66666666666667,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "mlacs_langchain_integration_hub_sandbox.py": {
      "file_path": "mlacs_langchain_integration_hub_sandbox.py",
      "functions": [
        "to_dict",
        "__init__",
        "_initialize_integration_patterns",
        "get_coordination_summary",
        "__init__",
        "start_task_tracking",
        "record_framework_execution",
        "record_coordination_event",
        "stop_task_tracking",
        "get_average_efficiency",
        "get_performance_trends",
        "__init__",
        "_initialize_workflow_templates",
        "_initialize_database",
        "get_integration_status",
        "get_performance_analytics"
      ],
      "classes": [
        "FrameworkType",
        "CoordinationPattern",
        "IntegrationLevel",
        "TaskComplexity",
        "MLACSLangChainTask",
        "FrameworkExecution",
        "MLACSLangChainCoordinator",
        "MLACSLangChainPerformanceTracker",
        "MLACSLangChainIntegrationHub"
      ],
      "test_files": [
        "test_mlacs_langchain_integration_hub_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 994,
        "lines_covered": 0,
        "lines_missing": 994,
        "coverage_percentage": 0.0,
        "complexity_score": 6.860902255639098,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 88.0,
        "type_hints": 84.375,
        "error_handling": 15.625,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "mlacs_optimization_framework.py": {
      "file_path": "mlacs_optimization_framework.py",
      "functions": [
        "create_optimization_config_from_benchmark",
        "__init__",
        "get",
        "set",
        "clear",
        "__init__",
        "_initialize_optimization_strategies",
        "_add_latency_optimizations",
        "_add_quality_optimizations",
        "_add_cost_optimizations",
        "_add_balanced_optimizations",
        "_add_adaptive_optimizations",
        "_initialize_benchmark_findings",
        "_create_benchmark_optimizations",
        "_update_performance_profiles",
        "_evaluate_optimization_actions",
        "get_optimization_report",
        "save_optimization_state"
      ],
      "classes": [
        "OptimizationStrategy",
        "PerformanceMetric",
        "AdaptationTrigger",
        "OptimizationConfiguration",
        "PerformanceProfile",
        "OptimizationAction",
        "OptimizationResult",
        "PerformanceCache",
        "MLACSOptimizationFramework"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 596,
        "lines_covered": 0,
        "lines_missing": 596,
        "coverage_percentage": 0.0,
        "complexity_score": 11.160714285714286,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 92.5925925925926,
        "type_hints": 20.833333333333336,
        "error_handling": 8.333333333333332,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "mlacs_performance_optimizer.py": {
      "file_path": "mlacs_performance_optimizer.py",
      "functions": [
        "__init__",
        "_generate_cache_key",
        "_is_cache_valid",
        "_calculate_response_similarity",
        "_optimize_provider_selection",
        "_update_performance_stats",
        "get_performance_report"
      ],
      "classes": [
        "OptimizationStrategy",
        "PerformanceMetrics",
        "CacheEntry",
        "MLACSPerformanceOptimizer"
      ],
      "test_files": [
        "test_mlacs_performance_optimization.py"
      ],
      "coverage": {
        "lines_total": 352,
        "lines_covered": 0,
        "lines_missing": 352,
        "coverage_percentage": 0.0,
        "complexity_score": 9.87012987012987,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 90.9090909090909,
        "type_hints": 100,
        "error_handling": 0.0,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "mlacs_phase1_optimization_implementation_sandbox.py": {
      "file_path": "mlacs_phase1_optimization_implementation_sandbox.py",
      "functions": [
        "__init__",
        "_start_cleanup_thread",
        "_cleanup_worker",
        "_cleanup_expired",
        "_enforce_memory_limit",
        "_calculate_size",
        "get",
        "set",
        "delete",
        "clear_by_tags",
        "get_statistics",
        "warm_cache",
        "shutdown",
        "__init__",
        "_initialize_pool",
        "get_connection",
        "return_connection",
        "get_stats",
        "close_all",
        "__init__",
        "start_monitoring",
        "stop_monitoring",
        "_monitoring_worker",
        "_collect_system_metrics",
        "record_metric",
        "_check_alerts",
        "get_dashboard_data",
        "__init__",
        "_initialize_frameworks",
        "_initialize_database_pools",
        "_warm_cache",
        "start_optimization",
        "_collect_baseline_metrics",
        "_apply_caching_optimizations",
        "_apply_database_optimizations",
        "_apply_monitoring_enhancements",
        "_collect_optimized_metrics",
        "_calculate_optimization_impact",
        "get_optimization_report",
        "shutdown"
      ],
      "classes": [
        "CacheEntry",
        "CacheStatistics",
        "OptimizationMetric",
        "IntelligentCache",
        "DatabaseConnectionPool",
        "EnhancedMonitoringDashboard",
        "MLACSPhase1OptimizationEngine"
      ],
      "test_files": [
        "test_phase1_optimization_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 765,
        "lines_covered": 0,
        "lines_missing": 765,
        "coverage_percentage": 0.0,
        "complexity_score": 18.69722557297949,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 91.48936170212765,
        "type_hints": 22.5,
        "error_handling": 30.0,
        "function_complexity": 4.575000000000003
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "mlacs_production_demo.py": {
      "file_path": "mlacs_production_demo.py",
      "functions": [
        "__init__",
        "_create_demo_scenarios",
        "_create_scenario_prompt",
        "_evaluate_success_criteria"
      ],
      "classes": [
        "DemoScenario",
        "DemoResult",
        "MLACSProductionDemo"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 408,
        "lines_covered": 0,
        "lines_missing": 408,
        "coverage_percentage": 0.0,
        "complexity_score": 5.116279069767442,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 85.71428571428571,
        "type_hints": 100.0,
        "error_handling": 25.0,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "mlacs_self_learning_framework.py": {
      "file_path": "mlacs_self_learning_framework.py",
      "functions": [
        "__init__",
        "_detect_available_mcps",
        "__init__",
        "_create_initial_research_schedule",
        "_calculate_relevance_score",
        "_extract_model_intelligence",
        "_extract_optimization_technique",
        "get_learning_report",
        "save_learning_state"
      ],
      "classes": [
        "MCPServerType",
        "ResearchDomain",
        "AdaptationStrategy",
        "ResearchQuery",
        "ResearchInsight",
        "ModelIntelligence",
        "OptimizationTechnique",
        "LearningCycle",
        "MCPServerInterface",
        "SelfLearningFramework"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 747,
        "lines_covered": 0,
        "lines_missing": 747,
        "coverage_percentage": 0.0,
        "complexity_score": 8.375,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 89.47368421052632,
        "type_hints": 100,
        "error_handling": 27.77777777777778,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "mlacs_workflow_templates.py": {
      "file_path": "mlacs_workflow_templates.py",
      "functions": [
        "demonstrate_template_library",
        "__init__",
        "_initialize_standard_templates",
        "_add_business_strategy_template",
        "_add_content_campaign_template",
        "_add_architecture_review_template",
        "_add_literature_review_template",
        "_add_document_review_template",
        "_add_market_research_template",
        "_add_competitive_analysis_template",
        "_add_brand_development_template",
        "_add_creative_brainstorming_template",
        "_add_code_quality_template",
        "_add_security_assessment_template",
        "_add_cross_domain_synthesis_template",
        "_add_trend_analysis_template",
        "_add_multi_perspective_qa_template",
        "_add_fact_checking_template",
        "get_template",
        "list_templates",
        "search_templates",
        "get_template_summary",
        "export_template",
        "create_custom_template"
      ],
      "classes": [
        "TemplateCategory",
        "DifficultyLevel",
        "WorkflowPattern",
        "TemplateParameter",
        "LLMRoleDefinition",
        "WorkflowStep",
        "WorkflowTemplate",
        "WorkflowTemplateLibrary"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 653,
        "lines_covered": 0,
        "lines_missing": 653,
        "coverage_percentage": 0.0,
        "complexity_score": 7.374631268436578,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 96.875,
        "type_hints": 30.208333333333332,
        "error_handling": 0.0,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "model_manager.py": {
      "file_path": "model_manager.py",
      "functions": [
        "to_dict",
        "__init__",
        "get_storage_info"
      ],
      "classes": [
        "ModelInfo",
        "ModelManager"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 267,
        "lines_covered": 0,
        "lines_missing": 267,
        "coverage_percentage": 0.0,
        "complexity_score": 9.285714285714286,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 20.0,
        "type_hints": 100,
        "error_handling": 100,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "multi_llm_tier_testing_direct.py": {
      "file_path": "multi_llm_tier_testing_direct.py",
      "functions": [],
      "classes": [],
      "test_files": [],
      "coverage": {
        "lines_total": 402,
        "lines_covered": 0,
        "lines_missing": 402,
        "coverage_percentage": 0.0,
        "complexity_score": 5.827505827505827,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 0.0,
        "type_hints": 100,
        "error_handling": 100,
        "function_complexity": 100.0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "production_startup.py": {
      "file_path": "production_startup.py",
      "functions": [
        "check_environment",
        "main"
      ],
      "classes": [],
      "test_files": [],
      "coverage": {
        "lines_total": 62,
        "lines_covered": 0,
        "lines_missing": 62,
        "coverage_percentage": 0.0,
        "complexity_score": 11.267605633802818,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 100.0,
        "type_hints": 0.0,
        "error_handling": 25.0,
        "function_complexity": 15.5
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "production_supervisor_worker_3tier_memory_system.py": {
      "file_path": "production_supervisor_worker_3tier_memory_system.py",
      "functions": [
        "__init__",
        "init_production_database",
        "__init__",
        "_format_context_for_llm",
        "get_token_usage_summary",
        "__init__",
        "_calculate_performance_trend",
        "_assess_production_readiness"
      ],
      "classes": [
        "TokenUsage",
        "ProductionMetrics",
        "ProductionThreeTierMemorySystem",
        "ProductionSupervisorWorkerAgent",
        "ProductionTestSuite"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 927,
        "lines_covered": 0,
        "lines_missing": 927,
        "coverage_percentage": 0.0,
        "complexity_score": 6.012024048096192,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 76.92307692307693,
        "type_hints": 100,
        "error_handling": 37.5,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "quick_apple_silicon_langchain_test.py": {
      "file_path": "quick_apple_silicon_langchain_test.py",
      "functions": [],
      "classes": [],
      "test_files": [
        "quick_apple_silicon_langchain_test.py"
      ],
      "coverage": {
        "lines_total": 173,
        "lines_covered": 0,
        "lines_missing": 173,
        "coverage_percentage": 0.0,
        "complexity_score": 5.670103092783505,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 0.0,
        "type_hints": 0.0,
        "error_handling": 100,
        "function_complexity": 100.0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "quick_langgraph_state_coordination_test.py": {
      "file_path": "quick_langgraph_state_coordination_test.py",
      "functions": [],
      "classes": [],
      "test_files": [
        "quick_langgraph_state_coordination_test.py"
      ],
      "coverage": {
        "lines_total": 276,
        "lines_covered": 0,
        "lines_missing": 276,
        "coverage_percentage": 0.0,
        "complexity_score": 6.312292358803987,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 0.0,
        "type_hints": 0.0,
        "error_handling": 100,
        "function_complexity": 100.0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "quick_mlacs_benchmark.py": {
      "file_path": "quick_mlacs_benchmark.py",
      "functions": [
        "__post_init__",
        "__init__",
        "_generate_report"
      ],
      "classes": [
        "QuickBenchmarkResult",
        "QuickMLACSBenchmark"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 225,
        "lines_covered": 0,
        "lines_missing": 225,
        "coverage_percentage": 0.0,
        "complexity_score": 6.751054852320674,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 40.0,
        "type_hints": 91.66666666666666,
        "error_handling": 16.666666666666664,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "quick_vector_knowledge_test.py": {
      "file_path": "quick_vector_knowledge_test.py",
      "functions": [
        "quick_test"
      ],
      "classes": [],
      "test_files": [
        "quick_vector_knowledge_test.py"
      ],
      "coverage": {
        "lines_total": 130,
        "lines_covered": 0,
        "lines_missing": 130,
        "coverage_percentage": 0.0,
        "complexity_score": 7.042253521126761,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 100.0,
        "type_hints": 0.0,
        "error_handling": 100,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "real_world_testing_verification.py": {
      "file_path": "real_world_testing_verification.py",
      "functions": [
        "main",
        "__init__",
        "cleanup_processes",
        "log_test",
        "test_production_build_actually_serves",
        "test_actual_ui_content_exists",
        "test_source_code_honesty",
        "test_no_fake_placeholders",
        "test_macos_build_exists",
        "test_crash_scenarios",
        "run_comprehensive_real_world_tests",
        "signal_handler"
      ],
      "classes": [
        "RealWorldTester"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 506,
        "lines_covered": 0,
        "lines_missing": 506,
        "coverage_percentage": 0.0,
        "complexity_score": 12.429378531073446,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 76.92307692307693,
        "type_hints": 0.0,
        "error_handling": 37.5,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "scripts/tdd_test_runner.py": {
      "file_path": "scripts/tdd_test_runner.py",
      "functions": [
        "main",
        "__init__",
        "run_comprehensive_tests",
        "run_production_build",
        "validate_sandbox_compliance",
        "generate_tdd_report",
        "run_full_tdd_validation"
      ],
      "classes": [
        "TDDTestRunner"
      ],
      "test_files": [
        "scripts/test_coverage_analyzer.py"
      ],
      "coverage": {
        "lines_total": 134,
        "lines_covered": 0,
        "lines_missing": 134,
        "coverage_percentage": 0.0,
        "complexity_score": 19.148936170212767,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 75.0,
        "type_hints": 0.0,
        "error_handling": 21.428571428571427,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "setup.py": {
      "file_path": "setup.py",
      "functions": [],
      "classes": [],
      "test_files": [
        "_macOS/tests/test_endpoints.py",
        "test_backend.py",
        "test_comprehensive_mlacs_headless_framework.py",
        "test_langchain_vector_knowledge.py",
        "test_langgraph_advanced_coordination_patterns_comprehensive.py",
        "test_langgraph_apple_silicon_optimization_comprehensive.py",
        "test_langgraph_complex_workflow_comprehensive.py",
        "test_langgraph_decision_optimization_comprehensive.py",
        "test_langgraph_dynamic_complexity_routing_comprehensive.py",
        "test_langgraph_framework_performance_prediction_comprehensive.py",
        "test_langgraph_framework_selection_criteria_comprehensive.py",
        "test_langgraph_graphiti_temporal_knowledge_integration_comprehensive.py",
        "test_langgraph_hybrid_framework_coordination_comprehensive.py",
        "test_langgraph_performance_analytics_comprehensive.py",
        "test_langgraph_state_coordination_comprehensive.py",
        "test_langgraph_video_generation_workflow_coordination_comprehensive.py",
        "test_production_mlacs_langchain_integration_hub.py",
        "test_production_mlacs_simple.py",
        "test_pydantic_ai_advanced_memory_integration.py",
        "test_pydantic_ai_advanced_memory_integration_production.py",
        "test_pydantic_ai_core_integration_comprehensive.py",
        "test_pydantic_ai_enterprise_workflow_plugins.py",
        "test_pydantic_ai_enterprise_workflow_plugins_production.py",
        "test_pydantic_ai_production_communication_workflows.py",
        "test_pydantic_ai_production_communication_workflows_production.py",
        "test_pydantic_ai_real_time_optimization_engine.py",
        "venv/lib/python3.13/site-packages/aiohttp/test_utils.py",
        "venv/lib/python3.13/site-packages/bs4/tests/test_builder_registry.py",
        "venv/lib/python3.13/site-packages/bs4/tests/test_css.py",
        "venv/lib/python3.13/site-packages/bs4/tests/test_dammit.py",
        "venv/lib/python3.13/site-packages/bs4/tests/test_filter.py",
        "venv/lib/python3.13/site-packages/bs4/tests/test_pageelement.py",
        "venv/lib/python3.13/site-packages/bs4/tests/test_soup.py",
        "venv/lib/python3.13/site-packages/bs4/tests/test_tree.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_memmapping.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_memory.py",
        "venv/lib/python3.13/site-packages/mypy/test/test_config_parser.py",
        "venv/lib/python3.13/site-packages/mypy/test/test_find_sources.py",
        "venv/lib/python3.13/site-packages/mypyc/test/test_commandline.py",
        "venv/lib/python3.13/site-packages/mypyc/test/test_emitclass.py",
        "venv/lib/python3.13/site-packages/mypyc/test/test_external.py",
        "venv/lib/python3.13/site-packages/mypyc/test/test_run.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/approximation/tests/test_connectivity.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/approximation/tests/test_kcomponents.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/approximation/tests/test_steinertree.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/approximation/tests/test_traveling_salesman.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/approximation/tests/test_treewidth.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/assortativity/tests/base_test.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/bipartite/tests/test_centrality.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/bipartite/tests/test_edgelist.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/bipartite/tests/test_link_analysis.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/bipartite/tests/test_matching.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/bipartite/tests/test_project.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/centrality/tests/test_degree_centrality.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/centrality/tests/test_eigenvector_centrality.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/centrality/tests/test_harmonic_centrality.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/centrality/tests/test_katz_centrality.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/centrality/tests/test_load_centrality.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/community/tests/test_kclique.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/components/tests/test_attracting.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/components/tests/test_connected.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/components/tests/test_strongly_connected.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/components/tests/test_weakly_connected.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/connectivity/tests/test_connectivity.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/flow/tests/test_maxflow.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/isomorphism/tests/test_isomorphism.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/isomorphism/tests/test_isomorphvf2.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/isomorphism/tests/test_match_helpers.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/isomorphism/tests/test_vf2userfunc.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/link_analysis/tests/test_hits.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/link_analysis/tests/test_pagerank.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/shortest_paths/tests/test_astar.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/shortest_paths/tests/test_dense.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/shortest_paths/tests/test_generic.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/shortest_paths/tests/test_unweighted.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/shortest_paths/tests/test_weighted.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_bridges.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_chordal.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_clique.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_cluster.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_core.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_cycles.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_dag.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_distance_measures.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_efficiency.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_graphical.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_link_prediction.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_lowest_common_ancestors.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_similarity.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_structuralholes.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_summarization.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/traversal/tests/test_bfs.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/traversal/tests/test_dfs.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/traversal/tests/test_edgebfs.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/traversal/tests/test_edgedfs.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tree/tests/test_mst.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tree/tests/test_recognition.py",
        "venv/lib/python3.13/site-packages/networkx/classes/tests/test_coreviews.py",
        "venv/lib/python3.13/site-packages/networkx/classes/tests/test_digraph.py",
        "venv/lib/python3.13/site-packages/networkx/classes/tests/test_digraph_historical.py",
        "venv/lib/python3.13/site-packages/networkx/classes/tests/test_function.py",
        "venv/lib/python3.13/site-packages/networkx/classes/tests/test_graph.py",
        "venv/lib/python3.13/site-packages/networkx/classes/tests/test_graph_historical.py",
        "venv/lib/python3.13/site-packages/networkx/classes/tests/test_graphviews.py",
        "venv/lib/python3.13/site-packages/networkx/classes/tests/test_multidigraph.py",
        "venv/lib/python3.13/site-packages/networkx/classes/tests/test_multigraph.py",
        "venv/lib/python3.13/site-packages/networkx/classes/tests/test_reportviews.py",
        "venv/lib/python3.13/site-packages/networkx/classes/tests/test_special.py",
        "venv/lib/python3.13/site-packages/networkx/classes/tests/test_subgraphviews.py",
        "venv/lib/python3.13/site-packages/networkx/drawing/tests/test_layout.py",
        "venv/lib/python3.13/site-packages/networkx/generators/tests/test_atlas.py",
        "venv/lib/python3.13/site-packages/networkx/generators/tests/test_internet_as_graphs.py",
        "venv/lib/python3.13/site-packages/networkx/linalg/tests/test_bethehessian.py",
        "venv/lib/python3.13/site-packages/networkx/linalg/tests/test_graphmatrix.py",
        "venv/lib/python3.13/site-packages/networkx/linalg/tests/test_laplacian.py",
        "venv/lib/python3.13/site-packages/networkx/linalg/tests/test_modularity.py",
        "venv/lib/python3.13/site-packages/networkx/linalg/tests/test_spectrum.py",
        "venv/lib/python3.13/site-packages/networkx/readwrite/tests/test_adjlist.py",
        "venv/lib/python3.13/site-packages/networkx/readwrite/tests/test_edgelist.py",
        "venv/lib/python3.13/site-packages/networkx/readwrite/tests/test_gexf.py",
        "venv/lib/python3.13/site-packages/networkx/readwrite/tests/test_gml.py",
        "venv/lib/python3.13/site-packages/networkx/readwrite/tests/test_graphml.py",
        "venv/lib/python3.13/site-packages/networkx/readwrite/tests/test_p2g.py",
        "venv/lib/python3.13/site-packages/networkx/readwrite/tests/test_pajek.py",
        "venv/lib/python3.13/site-packages/networkx/tests/test_convert_numpy.py",
        "venv/lib/python3.13/site-packages/networkx/tests/test_convert_pandas.py",
        "venv/lib/python3.13/site-packages/networkx/tests/test_convert_scipy.py",
        "venv/lib/python3.13/site-packages/networkx/utils/tests/test_decorators.py",
        "venv/lib/python3.13/site-packages/networkx/utils/tests/test_mapped_queue.py",
        "venv/lib/python3.13/site-packages/networkx/utils/tests/test_misc.py",
        "venv/lib/python3.13/site-packages/nltk/test/unit/lm/test_counter.py",
        "venv/lib/python3.13/site-packages/nltk/test/unit/test_bllip.py",
        "venv/lib/python3.13/site-packages/nltk/test/unit/test_corenlp.py",
        "venv/lib/python3.13/site-packages/nltk/test/unit/test_hmm.py",
        "venv/lib/python3.13/site-packages/nltk/test/unit/test_tag.py",
        "venv/lib/python3.13/site-packages/nltk/test/unit/test_twitter_auth.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_atomics.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_array_manipulation.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_array_methods.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_caching.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_debuginfo.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_deprecations.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_import.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_listimpl.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_pycc.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_recarray_usecases.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_runtests.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_typedlist.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_withlifting.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_arrayprint.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_cpu_features.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_cython.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_defchararray.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_deprecations.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_half.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_indexing.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_limited_api.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_memmap.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_multiarray.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_nditer.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_numeric.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_numerictypes.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_overrides.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_records.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_shape_base.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_stringdtype.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_strings.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_umath.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_umath_complex.py",
        "venv/lib/python3.13/site-packages/numpy/f2py/tests/test_array_from_pyobj.py",
        "venv/lib/python3.13/site-packages/numpy/f2py/tests/test_assumed_shape.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test__datasource.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_function_base.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_histograms.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_io.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_recfunctions.py",
        "venv/lib/python3.13/site-packages/numpy/ma/tests/test_core.py",
        "venv/lib/python3.13/site-packages/numpy/ma/tests/test_extras.py",
        "venv/lib/python3.13/site-packages/numpy/ma/tests/test_mrecords.py",
        "venv/lib/python3.13/site-packages/numpy/ma/tests/test_old_ma.py",
        "venv/lib/python3.13/site-packages/numpy/ma/tests/test_subclassing.py",
        "venv/lib/python3.13/site-packages/numpy/matrixlib/tests/test_masked_matrix.py",
        "venv/lib/python3.13/site-packages/numpy/random/tests/test_direct.py",
        "venv/lib/python3.13/site-packages/numpy/random/tests/test_extending.py",
        "venv/lib/python3.13/site-packages/numpy/random/tests/test_generator_mt19937.py",
        "venv/lib/python3.13/site-packages/numpy/random/tests/test_generator_mt19937_regressions.py",
        "venv/lib/python3.13/site-packages/numpy/random/tests/test_random.py",
        "venv/lib/python3.13/site-packages/numpy/random/tests/test_randomstate.py",
        "venv/lib/python3.13/site-packages/numpy/random/tests/test_smoke.py",
        "venv/lib/python3.13/site-packages/numpy/testing/tests/test_utils.py",
        "venv/lib/python3.13/site-packages/numpy/tests/test_public_api.py",
        "venv/lib/python3.13/site-packages/numpy/tests/test_scripts.py",
        "venv/lib/python3.13/site-packages/pkg_resources/tests/test_integration_zope_interface.py",
        "venv/lib/python3.13/site-packages/pkg_resources/tests/test_pkg_resources.py",
        "venv/lib/python3.13/site-packages/pkg_resources/tests/test_resources.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_scripts.py",
        "venv/lib/python3.13/site-packages/scipy/_lib/tests/test_bunch.py",
        "venv/lib/python3.13/site-packages/scipy/_lib/tests/test_public_api.py",
        "venv/lib/python3.13/site-packages/scipy/datasets/tests/test_data.py",
        "venv/lib/python3.13/site-packages/scipy/fft/_pocketfft/tests/test_basic.py",
        "venv/lib/python3.13/site-packages/scipy/fftpack/tests/test_basic.py",
        "venv/lib/python3.13/site-packages/scipy/fftpack/tests/test_helper.py",
        "venv/lib/python3.13/site-packages/scipy/fftpack/tests/test_pseudo_diffs.py",
        "venv/lib/python3.13/site-packages/scipy/fftpack/tests/test_real_transforms.py",
        "venv/lib/python3.13/site-packages/scipy/integrate/tests/test_quadpack.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_bsplines.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_fitpack.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_fitpack2.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_gil.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_interpolate.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_polyint.py",
        "venv/lib/python3.13/site-packages/scipy/io/_harwell_boeing/tests/test_fortran_format.py",
        "venv/lib/python3.13/site-packages/scipy/io/arff/tests/test_arffread.py",
        "venv/lib/python3.13/site-packages/scipy/io/matlab/tests/test_streams.py",
        "venv/lib/python3.13/site-packages/scipy/io/tests/test_mmio.py",
        "venv/lib/python3.13/site-packages/scipy/linalg/tests/test_basic.py",
        "venv/lib/python3.13/site-packages/scipy/linalg/tests/test_blas.py",
        "venv/lib/python3.13/site-packages/scipy/linalg/tests/test_decomp.py",
        "venv/lib/python3.13/site-packages/scipy/linalg/tests/test_decomp_lu.py",
        "venv/lib/python3.13/site-packages/scipy/linalg/tests/test_decomp_update.py",
        "venv/lib/python3.13/site-packages/scipy/linalg/tests/test_matmul_toeplitz.py",
        "venv/lib/python3.13/site-packages/scipy/ndimage/tests/test_morphology.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test__basinhopping.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test__differential_evolution.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test__dual_annealing.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test__numdiff.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test__remove_redundancy.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_cobyla.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_cobyqa.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_direct.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_linesearch.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_linprog.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_lsq_common.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_lsq_linear.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_minpack.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_nnls.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_nonlin.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_optimize.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_slsqp.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_tnc.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_trustregion.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_ltisys.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_signaltools.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_spectral.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/linalg/_dsolve/tests/test_linsolve.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/linalg/_eigen/tests/test_svds.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/linalg/_isolve/tests/test_lsmr.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/linalg/tests/test_interface.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/linalg/tests/test_norm.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/tests/test_base.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/tests/test_extract.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/tests/test_sparsetools.py",
        "venv/lib/python3.13/site-packages/scipy/spatial/tests/test__procrustes.py",
        "venv/lib/python3.13/site-packages/scipy/spatial/tests/test_distance.py",
        "venv/lib/python3.13/site-packages/scipy/spatial/tests/test_hausdorff.py",
        "venv/lib/python3.13/site-packages/scipy/spatial/tests/test_kdtree.py",
        "venv/lib/python3.13/site-packages/scipy/spatial/tests/test_spherical_voronoi.py",
        "venv/lib/python3.13/site-packages/scipy/special/tests/test_basic.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_binned_statistic.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_distributions.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_fast_gen_inversion.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_hypotests.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_morestats.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_mstats_basic.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_resampling.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_sampling.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_stats.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_base.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_mingw.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_bdist_dumb.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_bdist_rpm.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_build_ext.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_build_py.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_core.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_dist.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_extension.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_install.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_install_lib.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_modified.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_sdist.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_util.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/config/test_expand.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/config/test_pyprojecttoml.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/config/test_pyprojecttoml_dynamic_deps.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/config/test_setupcfg.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/integration/test_pip_install_sdist.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_archive_util.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_bdist_deprecations.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_bdist_egg.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_bdist_wheel.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_build.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_build_ext.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_build_meta.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_build_py.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_config_discovery.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_core_metadata.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_depends.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_develop.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_dist.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_dist_info.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_distutils_adoption.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_editable_install.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_egg_info.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_extern.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_find_packages.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_find_py_modules.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_glob.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_install_scripts.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_logging.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_manifest.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_namespaces.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_scripts.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_sdist.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_setopt.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_setuptools.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_shutil_wrapper.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_unicode_utils.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_virtualenv.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_warnings.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_wheel.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_windows_wrappers.py",
        "venv/lib/python3.13/site-packages/sklearn/linear_model/_glm/tests/test_glm.py",
        "venv/lib/python3.13/site-packages/sklearn/manifold/tests/test_isomap.py",
        "venv/lib/python3.13/site-packages/sklearn/tests/test_docstring_parameters.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_show_versions.py",
        "venv/lib/python3.13/site-packages/sympy/integrals/tests/test_heurisch.py",
        "venv/lib/python3.13/site-packages/sympy/integrals/tests/test_integrals.py",
        "venv/lib/python3.13/site-packages/sympy/interactive/tests/test_ipython.py",
        "venv/lib/python3.13/site-packages/sympy/physics/mechanics/tests/test_system_class.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_factortools.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_galoistools.py",
        "venv/lib/python3.13/site-packages/sympy/printing/tests/test_codeprinter.py",
        "venv/lib/python3.13/site-packages/sympy/testing/tests/test_code_quality.py",
        "venv/lib/python3.13/site-packages/sympy/utilities/tests/test_autowrap.py",
        "venv/lib/python3.13/site-packages/torch/_dynamo/test_case.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/distributed_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/rpc/examples/parameter_server_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/rpc/examples/reinforcement_learning_rpc_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/rpc/rpc_test.py",
        "venv/lib/python3.13/site-packages/trio/_core/_tests/test_run.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_exports.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_ssl.py",
        "venv/lib/python3.13/site-packages/trio/_tests/tools/test_gen_exports.py"
      ],
      "coverage": {
        "lines_total": 77,
        "lines_covered": 0,
        "lines_missing": 77,
        "coverage_percentage": 0.0,
        "complexity_score": 1.2987012987012987,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 0.0,
        "type_hints": 0.0,
        "error_handling": 0.0,
        "function_complexity": 100.0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "simple_cascading_backend.py": {
      "file_path": "simple_cascading_backend.py",
      "functions": [],
      "classes": [],
      "test_files": [],
      "coverage": {
        "lines_total": 446,
        "lines_covered": 0,
        "lines_missing": 446,
        "coverage_percentage": 0.0,
        "complexity_score": 7.592190889370933,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 0.0,
        "type_hints": 100,
        "error_handling": 100,
        "function_complexity": 100.0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "source_code_ui_verification.py": {
      "file_path": "source_code_ui_verification.py",
      "functions": [
        "main",
        "__init__",
        "verify_functional_app_source",
        "verify_index_tsx_integration",
        "verify_build_configuration",
        "create_actual_human_verification_steps",
        "run_comprehensive_source_verification"
      ],
      "classes": [
        "SourceCodeUIVerifier"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 447,
        "lines_covered": 0,
        "lines_missing": 447,
        "coverage_percentage": 0.0,
        "complexity_score": 6.11353711790393,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 75.0,
        "type_hints": 0.0,
        "error_handling": 7.142857142857142,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "sources/advanced_memory_management.py": {
      "file_path": "sources/advanced_memory_management.py",
      "functions": [
        "__init__",
        "_initialize_database",
        "_initialize_compression_models",
        "_compress_with_simple_truncation",
        "_select_optimal_compression_strategy",
        "_group_entries_for_compression",
        "_cluster_by_similarity",
        "_merge_similar_entries",
        "_intelligently_merge_content",
        "_update_cache",
        "_start_performance_monitoring",
        "_attempt_session_recovery",
        "get_performance_report",
        "monitor_performance"
      ],
      "classes": [
        "CompressionStrategy",
        "SessionStatus",
        "MemoryType",
        "MemoryEntry",
        "SessionMetadata",
        "CompressionResult",
        "AdvancedMemoryManager",
        "MockNumpy",
        "ndarray"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 869,
        "lines_covered": 0,
        "lines_missing": 869,
        "coverage_percentage": 0.0,
        "complexity_score": 12.079831932773109,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 82.6086956521739,
        "type_hints": 76.78571428571429,
        "error_handling": 60.71428571428571,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/agenticseek_deerflow_integration.py": {
      "file_path": "sources/agenticseek_deerflow_integration.py",
      "functions": [
        "__init__",
        "_register_specialized_agents",
        "_create_spoken_summary",
        "_create_voice_optimized_summary",
        "get_system_status",
        "get_voice_interaction_state"
      ],
      "classes": [
        "VoiceInteractionMode",
        "ProcessingStatus",
        "VoiceInteractionState",
        "IntegratedResponse",
        "AgenticSeekDeerFlowIntegration"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 380,
        "lines_covered": 0,
        "lines_missing": 380,
        "coverage_percentage": 0.0,
        "complexity_score": 9.808612440191387,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 90.9090909090909,
        "type_hints": 100,
        "error_handling": 58.333333333333336,
        "function_complexity": 15.666666666666671
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/agenticseek_streaming_integration.py": {
      "file_path": "sources/agenticseek_streaming_integration.py",
      "functions": [
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "_update_response_time_metric",
        "get_integration_status",
        "cleanup"
      ],
      "classes": [
        "AgentStreamingStatus",
        "StreamingAgentContext",
        "StreamingVoiceIntegration",
        "StreamingWorkflowManager",
        "AgenticSeekStreamingIntegration"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 510,
        "lines_covered": 0,
        "lines_missing": 510,
        "coverage_percentage": 0.0,
        "complexity_score": 6.764168190127971,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 66.66666666666666,
        "type_hints": 100,
        "error_handling": 50.0,
        "function_complexity": 34.71428571428571
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/agents/agent.py": {
      "file_path": "sources/agents/agent.py",
      "functions": [
        "__init__",
        "get_agent_name",
        "get_agent_type",
        "get_agent_role",
        "get_last_answer",
        "get_last_reasoning",
        "get_blocks",
        "get_status_message",
        "get_tools",
        "get_success",
        "get_blocks_result",
        "add_tool",
        "get_tools_name",
        "get_tools_description",
        "load_prompt",
        "request_stop",
        "process",
        "remove_reasoning_text",
        "extract_reasoning_text",
        "sync_llm_request",
        "get_last_tool_type",
        "raw_answer_blocks",
        "show_answer",
        "remove_blocks",
        "show_block",
        "execute_modules"
      ],
      "classes": [
        "Agent"
      ],
      "test_files": [
        "_Sandbox/Environment/TestDrivenFeatures/ContentViewRefactoring_TDD/01_WriteTests/test_contentviewrefactoring_integration.py",
        "comprehensive_memory_system_integration_test.py",
        "focused_supervisor_worker_memory_performance_test.py",
        "quick_langgraph_state_coordination_test.py",
        "supervisor_worker_3tier_memory_performance_test.py",
        "test_backend.py",
        "test_benchmarking_suite_simple.py",
        "test_browser_automation_integration_mock.py",
        "test_copilotkit_integration.py",
        "test_enhanced_voice_pipeline_system.py",
        "test_integration_concepts.py",
        "test_langchain_integration.py",
        "test_langchain_video_workflows.py",
        "test_langgraph_advanced_coordination_patterns_comprehensive.py",
        "test_langgraph_apple_silicon_optimization_comprehensive.py",
        "test_langgraph_complex_workflow_comprehensive.py",
        "test_langgraph_decision_optimization_comprehensive.py",
        "test_langgraph_framework_coordinator.py",
        "test_langgraph_framework_decision_engine_comprehensive.py",
        "test_langgraph_framework_selection_learning_comprehensive.py",
        "test_langgraph_hybrid_framework_coordination_comprehensive.py",
        "test_langgraph_memory_aware_state_creation_comprehensive.py",
        "test_langgraph_multi_tier_memory_comprehensive.py",
        "test_langgraph_neural_engine_gpu_acceleration_comprehensive.py",
        "test_langgraph_parallel_node_execution_comprehensive.py",
        "test_langgraph_performance_analytics_comprehensive.py",
        "test_langgraph_state_coordination.py",
        "test_langgraph_state_coordination_comprehensive.py",
        "test_langgraph_task_analysis_routing_comprehensive.py",
        "test_langgraph_task_analysis_routing_comprehensive_fixed.py",
        "test_langgraph_video_generation_workflow_coordination_comprehensive.py",
        "test_langgraph_workflow_state_management_comprehensive.py",
        "test_mlacs_langchain_integration_hub_comprehensive.py",
        "test_openai_tier3_graphiti_integration_comprehensive.py",
        "test_pydantic_ai_communication_models.py",
        "test_pydantic_ai_core_integration.py",
        "test_pydantic_ai_core_integration_comprehensive.py",
        "test_pydantic_ai_langchain_langgraph_bridge.py",
        "test_pydantic_ai_langchain_langgraph_bridge_production.py",
        "test_pydantic_ai_production_communication_workflows.py",
        "test_pydantic_ai_production_communication_workflows_production.py",
        "test_pydantic_ai_tier_aware_agent_factory.py",
        "test_pydantic_ai_validated_tool_integration.py",
        "test_simple_router_integration.py",
        "test_streaming_response_integration.py",
        "test_suite.py",
        "test_tool_ecosystem_integration.py",
        "test_voice_integration_pipeline.py",
        "tests/test_browser_agent_parsing.py",
        "tests/test_memory.py",
        "venv/lib/python3.13/site-packages/regex/test_regex.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/ddp_under_dist_autograd_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/nn/api/remote_module_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/rpc/dist_autograd_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/rpc/dist_optimizer_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/rpc/examples/parameter_server_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/rpc/examples/reinforcement_learning_rpc_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/rpc/faulty_agent_rpc_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/rpc/jit/dist_autograd_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/rpc/jit/rpc_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/rpc/rpc_test.py"
      ],
      "coverage": {
        "lines_total": 249,
        "lines_covered": 211,
        "lines_missing": 38,
        "coverage_percentage": 85.0,
        "complexity_score": 26.907630522088354,
        "test_score": 0.85,
        "tdd_compliance": true
      },
      "code_quality": {
        "docstring_coverage": 51.85185185185185,
        "type_hints": 33.65384615384615,
        "error_handling": 1.9230769230769231,
        "function_complexity": 53.96153846153846
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "sources/agents/browser_agent.py": {
      "file_path": "sources/agents/browser_agent.py",
      "functions": [
        "__init__",
        "get_today_date",
        "extract_links",
        "extract_form",
        "get_automation_status",
        "clean_links",
        "get_unvisited_links",
        "make_newsearch_prompt",
        "make_navigation_prompt",
        "select_unvisited",
        "jsonify_search_results",
        "stringify_search_results",
        "parse_answer",
        "select_link",
        "get_page_text",
        "conclude_prompt",
        "search_prompt",
        "handle_update_prompt",
        "show_search_results",
        "stuck_prompt",
        "_extract_form_data_from_context"
      ],
      "classes": [
        "Action",
        "BrowserAgent"
      ],
      "test_files": [
        "tests/test_browser_agent_parsing.py"
      ],
      "coverage": {
        "lines_total": 584,
        "lines_covered": 0,
        "lines_missing": 584,
        "coverage_percentage": 0.0,
        "complexity_score": 18.543046357615893,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 39.130434782608695,
        "type_hints": 42.857142857142854,
        "error_handling": 11.904761904761903,
        "function_complexity": 11.19047619047619
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/agents/casual_agent.py": {
      "file_path": "sources/agents/casual_agent.py",
      "functions": [
        "__init__"
      ],
      "classes": [
        "CasualAgent"
      ],
      "test_files": [
        "test_pydantic_ai_tier_aware_agent_factory.py",
        "test_voice_integration_pipeline.py",
        "tests/test_memory.py"
      ],
      "coverage": {
        "lines_total": 31,
        "lines_covered": 0,
        "lines_missing": 31,
        "coverage_percentage": 0.0,
        "complexity_score": 19.35483870967742,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 50.0,
        "type_hints": 25.0,
        "error_handling": 0.0,
        "function_complexity": 31.0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "sources/agents/code_agent.py": {
      "file_path": "sources/agents/code_agent.py",
      "functions": [
        "__init__",
        "add_sys_info_prompt"
      ],
      "classes": [
        "CoderAgent"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 84,
        "lines_covered": 0,
        "lines_missing": 84,
        "coverage_percentage": 0.0,
        "complexity_score": 15.476190476190476,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 66.66666666666666,
        "type_hints": 12.5,
        "error_handling": 0.0,
        "function_complexity": 19.5
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "sources/agents/file_agent.py": {
      "file_path": "sources/agents/file_agent.py",
      "functions": [
        "__init__"
      ],
      "classes": [
        "FileAgent"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 39,
        "lines_covered": 0,
        "lines_missing": 39,
        "coverage_percentage": 0.0,
        "complexity_score": 17.94871794871795,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 50.0,
        "type_hints": 25.0,
        "error_handling": 0.0,
        "function_complexity": 8.0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "sources/agents/mcp_agent.py": {
      "file_path": "sources/agents/mcp_agent.py",
      "functions": [
        "__init__",
        "get_api_keys",
        "expand_prompt"
      ],
      "classes": [
        "McpAgent"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 63,
        "lines_covered": 0,
        "lines_missing": 63,
        "coverage_percentage": 0.0,
        "complexity_score": 20.0,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 75.0,
        "type_hints": 16.666666666666664,
        "error_handling": 0.0,
        "function_complexity": 45.0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "sources/agents/planner_agent.py": {
      "file_path": "sources/agents/planner_agent.py",
      "functions": [
        "__init__",
        "get_task_names",
        "parse_agent_tasks",
        "make_prompt",
        "show_plan",
        "get_work_result_agent"
      ],
      "classes": [
        "PlannerAgent"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 274,
        "lines_covered": 0,
        "lines_missing": 274,
        "coverage_percentage": 0.0,
        "complexity_score": 17.02898550724638,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 71.42857142857143,
        "type_hints": 70.83333333333334,
        "error_handling": 25.0,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "sources/apple_silicon_memory_optimizer.py": {
      "file_path": "sources/apple_silicon_memory_optimizer.py",
      "functions": [
        "__init__",
        "_detect_hardware",
        "_get_cpu_info",
        "_get_chip_name",
        "_get_cores_info",
        "_get_memory_info",
        "is_apple_silicon",
        "__init__",
        "_allocate_in_unified_pool",
        "_calculate_cache_hit_probability",
        "_analyze_access_patterns",
        "get_memory_stats",
        "__init__",
        "__init__",
        "_initialize_optimization_strategies",
        "_calculate_overall_improvement"
      ],
      "classes": [
        "CoreType",
        "MemoryOptimizationStrategy",
        "HardwareCapabilities",
        "MemoryAllocation",
        "PerformanceMetrics",
        "AppleSiliconDetector",
        "UnifiedMemoryManager",
        "ThermalMonitor",
        "AppleSiliconMemoryOptimizer"
      ],
      "test_files": [
        "comprehensive_memory_system_integration_test.py"
      ],
      "coverage": {
        "lines_total": 597,
        "lines_covered": 0,
        "lines_missing": 597,
        "coverage_percentage": 0.0,
        "complexity_score": 11.609907120743033,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 84.0,
        "type_hints": 60.9375,
        "error_handling": 25.0,
        "function_complexity": 29.25
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/apple_silicon_optimization_layer.py": {
      "file_path": "sources/apple_silicon_optimization_layer.py",
      "functions": [
        "__init__",
        "_detect_hardware",
        "_identify_chip_variant",
        "_create_hardware_profile",
        "__init__",
        "start_monitoring",
        "stop_monitoring",
        "_monitoring_loop",
        "_collect_metrics",
        "_get_cpu_temperature",
        "_get_gpu_temperature",
        "_estimate_gpu_usage",
        "_estimate_neural_engine_usage",
        "_estimate_power_consumption",
        "_get_battery_level",
        "_get_thermal_state",
        "_calculate_performance_score",
        "_calculate_efficiency_score",
        "_create_default_metrics",
        "get_current_metrics",
        "get_average_metrics",
        "__init__",
        "start_optimization",
        "stop_optimization",
        "_apply_optimizations",
        "_can_enable_acceleration",
        "_enable_acceleration",
        "_enable_neural_engine",
        "_enable_metal_gpu",
        "_enable_cpu_clusters",
        "_enable_unified_memory",
        "_enable_video_toolbox",
        "_enable_core_ml",
        "_enable_metal_shaders",
        "_enable_fallback_acceleration",
        "_fallback_to_gpu",
        "_fallback_to_cpu",
        "_fallback_to_software_encoding",
        "_cleanup_optimizations",
        "get_optimization_status",
        "__init__",
        "_create_default_configuration",
        "_initialize_optimization",
        "start_optimization_session",
        "stop_optimization_session",
        "_adapt_configuration_for_task",
        "get_hardware_capabilities",
        "get_optimization_recommendations",
        "get_session_status",
        "get_system_metrics",
        "chip_type",
        "get_optimal_thread_count"
      ],
      "classes": [
        "AppleSiliconChip",
        "OptimizationLevel",
        "PowerMode",
        "MemoryStrategy",
        "AccelerationType",
        "HardwareProfile",
        "OptimizationConfiguration",
        "PerformanceMetrics",
        "AppleSiliconDetector",
        "PerformanceMonitor",
        "AppleSiliconOptimizer",
        "AppleSiliconOptimizationLayer"
      ],
      "test_files": [
        "quick_apple_silicon_langchain_test.py",
        "quick_langgraph_state_coordination_test.py",
        "quick_vector_knowledge_test.py",
        "test_apple_silicon_langchain_tools.py",
        "test_apple_silicon_langchain_tools_comprehensive.py",
        "test_langchain_vector_knowledge.py",
        "test_langgraph_state_coordination.py"
      ],
      "coverage": {
        "lines_total": 1014,
        "lines_covered": 861,
        "lines_missing": 153,
        "coverage_percentage": 85.0,
        "complexity_score": 15.514184397163119,
        "test_score": 0.85,
        "tdd_compliance": true
      },
      "code_quality": {
        "docstring_coverage": 95.3125,
        "type_hints": 19.71153846153846,
        "error_handling": 13.461538461538462,
        "function_complexity": 0.25
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/browser.py": {
      "file_path": "sources/browser.py",
      "functions": [
        "get_chrome_path",
        "get_random_user_agent",
        "install_chromedriver",
        "bypass_ssl",
        "create_undetected_chromedriver",
        "create_driver",
        "__init__",
        "setup_tabs",
        "switch_control_tab",
        "load_anticatpcha_manually",
        "human_move",
        "human_scroll",
        "patch_browser_fingerprint",
        "go_to",
        "is_sentence",
        "get_text",
        "clean_url",
        "is_link_valid",
        "get_navigable",
        "click_element",
        "load_js",
        "find_all_inputs",
        "get_form_inputs",
        "get_buttons_xpath",
        "wait_for_submission_outcome",
        "find_and_click_btn",
        "tick_all_checkboxes",
        "find_and_click_submission",
        "find_input_xpath_by_name",
        "fill_form_inputs",
        "fill_form",
        "get_current_url",
        "get_page_title",
        "scroll_bottom",
        "get_screenshot",
        "screenshot",
        "apply_web_safety"
      ],
      "classes": [
        "Browser"
      ],
      "test_files": [
        "test_browser_automation_integration.py",
        "test_browser_automation_integration_mock.py",
        "test_pydantic_ai_validated_tool_integration.py",
        "test_simple_router_integration.py",
        "test_tool_ecosystem_integration.py",
        "tests/test_browser_agent_parsing.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_numpy_pickle.py",
        "venv/lib/python3.13/site-packages/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py"
      ],
      "coverage": {
        "lines_total": 652,
        "lines_covered": 0,
        "lines_missing": 652,
        "coverage_percentage": 0.0,
        "complexity_score": 22.054380664652566,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 73.68421052631578,
        "type_hints": 24.324324324324326,
        "error_handling": 33.78378378378378,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "sources/browser_automation_integration.py": {
      "file_path": "sources/browser_automation_integration.py",
      "functions": [
        "__init__",
        "_create_error_response",
        "_update_performance_metrics",
        "get_performance_report",
        "cleanup"
      ],
      "classes": [
        "BrowserTaskType",
        "BrowserTaskPriority",
        "BrowserTaskRequest",
        "BrowserTaskResponse",
        "BrowserAutomationIntegration"
      ],
      "test_files": [
        "test_browser_automation_integration.py",
        "test_browser_automation_integration_mock.py"
      ],
      "coverage": {
        "lines_total": 450,
        "lines_covered": 225,
        "lines_missing": 225,
        "coverage_percentage": 50.0,
        "complexity_score": 11.20331950207469,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 90.0,
        "type_hints": 90.0,
        "error_handling": 100.0,
        "function_complexity": 1.5999999999999943
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/cascading_provider.py": {
      "file_path": "sources/cascading_provider.py",
      "functions": [
        "__init__",
        "_load_providers",
        "_test_provider_connection",
        "get_available_provider",
        "respond_with_fallback",
        "get_current_provider_info",
        "setup_shared_models"
      ],
      "classes": [
        "CascadingProvider"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 205,
        "lines_covered": 174,
        "lines_missing": 31,
        "coverage_percentage": 85.0,
        "complexity_score": 17.35159817351598,
        "test_score": 0.85,
        "tdd_compliance": true
      },
      "code_quality": {
        "docstring_coverage": 75.0,
        "type_hints": 39.285714285714285,
        "error_handling": 35.714285714285715,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "sources/chain_of_thought_sharing.py": {
      "file_path": "sources/chain_of_thought_sharing.py",
      "functions": [
        "__init__",
        "add_filter",
        "stop_stream",
        "__init__",
        "_find_common_elements",
        "__init__",
        "create_thought_space",
        "_analyze_conflict",
        "_calculate_conflict_severity",
        "get_space_status",
        "get_performance_metrics"
      ],
      "classes": [
        "ThoughtType",
        "ThoughtPriority",
        "ConflictType",
        "ResolutionStrategy",
        "ThoughtFragment",
        "ThoughtChain",
        "SharedThoughtSpace",
        "ThoughtConflict",
        "ThoughtSynchronization",
        "ChainOfThoughtStream",
        "ThoughtConflictResolver",
        "ChainOfThoughtSharingSystem"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 593,
        "lines_covered": 504,
        "lines_missing": 89,
        "coverage_percentage": 85.0,
        "complexity_score": 14.35257410296412,
        "test_score": 0.85,
        "tdd_compliance": true
      },
      "code_quality": {
        "docstring_coverage": 91.30434782608695,
        "type_hints": 88.63636363636364,
        "error_handling": 9.090909090909092,
        "function_complexity": 1.3636363636363598
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/comprehensive_backend_endpoints.py": {
      "file_path": "sources/comprehensive_backend_endpoints.py",
      "functions": [
        "get_db"
      ],
      "classes": [
        "UserTier",
        "TaskStatus",
        "TaskPriority",
        "UserModel",
        "TaskModel",
        "SystemConfigModel",
        "UserProfile",
        "UserProfileUpdate",
        "Task",
        "TaskCreate",
        "TaskUpdate",
        "TaskComment",
        "PasswordChange",
        "SystemConfiguration",
        "Config",
        "Config"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 485,
        "lines_covered": 0,
        "lines_missing": 485,
        "coverage_percentage": 0.0,
        "complexity_score": 6.488549618320611,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 0.0,
        "type_hints": 100,
        "error_handling": 100,
        "function_complexity": 81.0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/copilotkit_multi_agent_backend.py": {
      "file_path": "sources/copilotkit_multi_agent_backend.py",
      "functions": [
        "create_copilotkit_app",
        "__init__",
        "get_limits",
        "__init__",
        "_setup_recovery_strategies",
        "_categorize_error",
        "_get_user_friendly_message",
        "_extract_technical_details",
        "_get_suggested_actions",
        "_log_error",
        "get_error_analytics",
        "__init__",
        "_setup_middleware",
        "_setup_error_handlers",
        "_setup_routes",
        "_setup_actions",
        "_get_action_metadata",
        "_get_tier_actions",
        "get_app"
      ],
      "classes": [
        "UserTier",
        "ErrorSeverity",
        "ErrorCategory",
        "ErrorDetails",
        "CopilotKitError",
        "TierLimitExceededError",
        "ResourceUnavailableError",
        "ValidationError",
        "IntegrationError",
        "TierLimits",
        "CopilotKitAction",
        "ActionRequest",
        "ActionResponse",
        "AgentStatus",
        "WorkflowState",
        "VideoProject",
        "HardwareMetrics",
        "ErrorHandler",
        "MultiAgentCopilotBackend"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 1335,
        "lines_covered": 0,
        "lines_missing": 1335,
        "coverage_percentage": 0.0,
        "complexity_score": 6.490727532097004,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 60.526315789473685,
        "type_hints": 100,
        "error_handling": 18.421052631578945,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/core_data_session_manager.py": {
      "file_path": "sources/core_data_session_manager.py",
      "functions": [
        "__init__",
        "_start_background_maintenance",
        "maintenance_loop"
      ],
      "classes": [
        "SessionState",
        "SessionType",
        "DataPersistenceStrategy",
        "SessionMetadata",
        "ConversationMessage",
        "AgentExecution",
        "CoreDataSessionManager",
        "SessionEntity",
        "MessageEntity",
        "ExecutionEntity",
        "MemoryFragmentEntity",
        "Session"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 659,
        "lines_covered": 0,
        "lines_missing": 659,
        "coverage_percentage": 0.0,
        "complexity_score": 8.104395604395604,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 80.0,
        "type_hints": 100,
        "error_handling": 100,
        "function_complexity": 27.66666666666667
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/cross_llm_verification_system.py": {
      "file_path": "sources/cross_llm_verification_system.py",
      "functions": [
        "__init__",
        "_extract_facts",
        "_extract_accuracy_score",
        "__init__",
        "_extract_consistency_score",
        "_identify_logical_issues",
        "__init__",
        "_extract_confidence",
        "_update_metrics",
        "get_verification_status",
        "get_system_metrics"
      ],
      "classes": [
        "VerificationType",
        "VerificationResult",
        "BiasType",
        "ConfidenceLevel",
        "VerificationRequest",
        "VerificationResponse",
        "BiasDetectionResult",
        "VerificationSummary",
        "FactChecker",
        "BiasDetector",
        "LogicalConsistencyChecker",
        "CrossLLMVerificationSystem"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 676,
        "lines_covered": 574,
        "lines_missing": 102,
        "coverage_percentage": 85.0,
        "complexity_score": 10.38781163434903,
        "test_score": 0.85,
        "tdd_compliance": true
      },
      "code_quality": {
        "docstring_coverage": 91.30434782608695,
        "type_hints": 93.18181818181817,
        "error_handling": 27.27272727272727,
        "function_complexity": 3.0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/deer_flow_orchestrator.py": {
      "file_path": "sources/deer_flow_orchestrator.py",
      "functions": [
        "__init__",
        "can_handle",
        "__init__",
        "can_handle",
        "_classify_task",
        "_determine_workflow",
        "_assess_priority",
        "_estimate_complexity",
        "__init__",
        "can_handle",
        "_create_execution_plan",
        "_estimate_duration",
        "_identify_resources",
        "_assess_risks",
        "_define_success_criteria",
        "__init__",
        "can_handle",
        "__init__",
        "can_handle",
        "__init__",
        "can_handle",
        "__init__",
        "_initialize_agents",
        "_build_langgraph_workflow",
        "_create_checkpoint",
        "_route_after_planning",
        "get_workflow_status",
        "__init__"
      ],
      "classes": [
        "AgentRole",
        "WorkflowState",
        "TaskType",
        "DeerFlowState",
        "AgentOutput",
        "WorkflowCheckpoint",
        "DeerFlowAgent",
        "CoordinatorAgent",
        "PlannerAgent",
        "ResearcherAgent",
        "CoderAgent",
        "SynthesizerAgent",
        "DeerFlowOrchestrator",
        "BaseMessage",
        "HumanMessage",
        "AIMessage"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 581,
        "lines_covered": 0,
        "lines_missing": 581,
        "coverage_percentage": 0.0,
        "complexity_score": 13.157894736842104,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 63.63636363636363,
        "type_hints": 44.642857142857146,
        "error_handling": 3.571428571428571,
        "function_complexity": 46.035714285714285
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/dynamic_role_assignment_system.py": {
      "file_path": "sources/dynamic_role_assignment_system.py",
      "functions": [
        "__init__",
        "_detect_hardware",
        "get_optimization_recommendations",
        "__init__",
        "analyze_task",
        "_determine_task_type",
        "_assess_complexity",
        "_identify_required_roles",
        "_assess_hardware_requirements",
        "_analyze_video_requirements",
        "_estimate_duration",
        "_assess_collaboration_needs",
        "_assess_apple_silicon_benefit",
        "__init__",
        "_initialize_llm_profiles",
        "_initialize_role_affinities",
        "_calculate_role_importance",
        "_select_best_llm_for_role",
        "_get_performance_adjustment",
        "_calculate_hardware_compatibility",
        "_generate_selection_reasoning",
        "_calculate_assignment_confidence",
        "_estimate_performance",
        "_get_apple_silicon_optimizations",
        "_calculate_priority",
        "_determine_coordination_strategy",
        "_set_performance_targets",
        "_calculate_apple_silicon_utilization",
        "_estimate_team_success_probability",
        "get_team_status",
        "get_system_metrics"
      ],
      "classes": [
        "SpecializedRole",
        "TaskComplexity",
        "PerformanceProfile",
        "HardwareCapability",
        "LLMCapabilityProfile",
        "RoleAssignment",
        "TeamComposition",
        "HardwareCapabilityDetector",
        "TaskAnalyzer",
        "DynamicRoleAssignmentSystem"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 808,
        "lines_covered": 686,
        "lines_missing": 122,
        "coverage_percentage": 85.0,
        "complexity_score": 18.79194630872483,
        "test_score": 0.85,
        "tdd_compliance": true
      },
      "code_quality": {
        "docstring_coverage": 95.1219512195122,
        "type_hints": 41.935483870967744,
        "error_handling": 3.225806451612903,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/enhanced_agent_router.py": {
      "file_path": "sources/enhanced_agent_router.py",
      "functions": [
        "__init__",
        "_create_agent_role_mapping",
        "_initialize_agent_specializations",
        "_initialize_ml_components",
        "_setup_few_shot_learning",
        "_select_routing_strategy",
        "_route_with_simple_fallback",
        "_emergency_fallback",
        "_map_task_to_agent_role",
        "_map_agent_to_role",
        "_determine_task_type",
        "_estimate_complexity_heuristic",
        "_calculate_keyword_confidence",
        "_update_performance_metrics",
        "_process_user_feedback",
        "_should_adapt",
        "get_performance_report",
        "__init__"
      ],
      "classes": [
        "RoutingStrategy",
        "ComplexityLevel",
        "RoutingConfidence",
        "RoutingDecision",
        "RoutingPerformance",
        "EnhancedAgentRouter",
        "MockAgent"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 637,
        "lines_covered": 0,
        "lines_missing": 637,
        "coverage_percentage": 0.0,
        "complexity_score": 13.943661971830986,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 88.0,
        "type_hints": 48.61111111111111,
        "error_handling": 30.555555555555557,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/enhanced_browser_automation.py": {
      "file_path": "sources/enhanced_browser_automation.py",
      "functions": [
        "__init__",
        "_initialize_form_templates",
        "_initialize_field_patterns",
        "_find_element_label",
        "_get_element_xpath",
        "_get_element_css_selector",
        "_determine_form_purpose",
        "_calculate_confidence_score",
        "_map_form_data_to_elements",
        "_find_exact_match",
        "_find_pattern_match",
        "_find_semantic_match",
        "get_performance_report"
      ],
      "classes": [
        "FormElementType",
        "AutomationStrategy",
        "InteractionMode",
        "FormElement",
        "FormAnalysis",
        "AutomationTask",
        "AutomationResult",
        "EnhancedBrowserAutomation"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 754,
        "lines_covered": 0,
        "lines_missing": 754,
        "coverage_percentage": 0.0,
        "complexity_score": 16.113161131611317,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 95.23809523809523,
        "type_hints": 76.92307692307693,
        "error_handling": 100,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/enhanced_interpreter_system.py": {
      "file_path": "sources/enhanced_interpreter_system.py",
      "functions": [
        "__init__",
        "_initialize_safety_rules",
        "_initialize_interpreters",
        "_safety_check",
        "_update_performance_metrics",
        "get_performance_report",
        "get_available_languages",
        "cleanup",
        "__init__",
        "start_monitoring",
        "get_current_usage",
        "stop_monitoring",
        "get_status",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__"
      ],
      "classes": [
        "LanguageType",
        "ExecutionMode",
        "ExecutionResult",
        "ExecutionConfig",
        "ExecutionOutput",
        "SafetyViolation",
        "EnhancedInterpreterSystem",
        "ResourceMonitor",
        "EnhancedPythonInterpreter",
        "NodeJSInterpreter",
        "GoInterpreter",
        "JavaInterpreter",
        "BashInterpreter"
      ],
      "test_files": [
        "test_tool_ecosystem_integration.py"
      ],
      "coverage": {
        "lines_total": 741,
        "lines_covered": 0,
        "lines_missing": 741,
        "coverage_percentage": 0.0,
        "complexity_score": 11.055276381909549,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 77.41935483870968,
        "type_hints": 44.44444444444444,
        "error_handling": 47.22222222222222,
        "function_complexity": 26.72222222222223
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/enhanced_multi_agent_coordinator.py": {
      "file_path": "sources/enhanced_multi_agent_coordinator.py",
      "functions": [
        "__init__"
      ],
      "classes": [
        "AgentRole",
        "MemoryTier",
        "SyncStrategy",
        "ConflictResolutionMethod",
        "AssistantState",
        "MemoryUpdate",
        "SyncResult",
        "EnhancedMultiAgentCoordinator"
      ],
      "test_files": [
        "comprehensive_memory_system_integration_test.py"
      ],
      "coverage": {
        "lines_total": 296,
        "lines_covered": 0,
        "lines_missing": 296,
        "coverage_percentage": 0.0,
        "complexity_score": 3.8338658146964857,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 88.88888888888889,
        "type_hints": 100,
        "error_handling": 50.0,
        "function_complexity": 64.0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "sources/enhanced_voice_pipeline_system.py": {
      "file_path": "sources/enhanced_voice_pipeline_system.py",
      "functions": [
        "__init__",
        "_initialize_system",
        "_initialize_apple_silicon_optimization",
        "_initialize_voice_components",
        "_initialize_command_recognition",
        "_initialize_command_patterns",
        "_initialize_websocket_server",
        "_handle_voice_result",
        "_handle_status_change",
        "_enhance_voice_result",
        "_classify_command",
        "_extract_intent_entities",
        "_start_event_processing",
        "_event_processing_loop",
        "_start_performance_monitoring",
        "_performance_monitoring_loop",
        "_update_performance_metrics",
        "_get_system_capabilities",
        "_get_performance_metrics",
        "register_event_handler",
        "unregister_event_handler",
        "get_session_info"
      ],
      "classes": [
        "VoiceStreamingMode",
        "VoiceQualityLevel",
        "VoiceEventType",
        "VoiceEvent",
        "EnhancedVoiceConfig",
        "EnhancedVoiceResult",
        "EnhancedVoicePipelineSystem"
      ],
      "test_files": [
        "test_enhanced_voice_pipeline_system.py"
      ],
      "coverage": {
        "lines_total": 799,
        "lines_covered": 399,
        "lines_missing": 400,
        "coverage_percentage": 50.0,
        "complexity_score": 13.023782559456398,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 96.55172413793103,
        "type_hints": 31.818181818181817,
        "error_handling": 65.9090909090909,
        "function_complexity": 4.13636363636364
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/fast_api.py": {
      "file_path": "sources/fast_api.py",
      "functions": [
        "get_config",
        "get_simple_router",
        "get_agent"
      ],
      "classes": [],
      "test_files": [],
      "coverage": {
        "lines_total": 217,
        "lines_covered": 0,
        "lines_missing": 217,
        "coverage_percentage": 0.0,
        "complexity_score": 5.982905982905983,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 100.0,
        "type_hints": 41.66666666666667,
        "error_handling": 16.666666666666664,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "sources/graphiti_temporal_knowledge_integration.py": {
      "file_path": "sources/graphiti_temporal_knowledge_integration.py",
      "functions": [
        "__init__",
        "_group_similar_entities",
        "_entities_similar",
        "_create_consensus_entity",
        "_group_similar_relationships",
        "_relationships_similar",
        "_create_consensus_relationship",
        "__init__",
        "_identify_temporal_relationships",
        "_has_temporal_relationship",
        "_check_entity_conflicts",
        "_check_relationship_conflicts",
        "__init__",
        "memory_variables",
        "memory_variables",
        "load_memory_variables",
        "save_context",
        "_get_knowledge_context",
        "clear",
        "__init__",
        "create_session",
        "get_session_memory",
        "get_integration_status",
        "shutdown"
      ],
      "classes": [
        "TemporalEventType",
        "KnowledgeNodeType",
        "RelationshipType",
        "TemporalEvent",
        "KnowledgeEntity",
        "KnowledgeRelationship",
        "TemporalKnowledgeCoordinator",
        "MultiLLMKnowledgeBuilder",
        "GraphitiConversationMemory",
        "GraphitiMLACSIntegration",
        "BaseMemory",
        "BaseRetriever",
        "VectorStore"
      ],
      "test_files": [
        "test_graphiti_temporal_knowledge_integration.py",
        "test_langgraph_graphiti_temporal_knowledge_integration_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 765,
        "lines_covered": 382,
        "lines_missing": 383,
        "coverage_percentage": 50.0,
        "complexity_score": 13.788968824940047,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 81.08108108108108,
        "type_hints": 56.25,
        "error_handling": 25.0,
        "function_complexity": 0.8333333333333286
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/interaction.py": {
      "file_path": "sources/interaction.py",
      "functions": [
        "__init__",
        "get_spoken_language",
        "initialize_tts",
        "initialize_stt",
        "emit_status",
        "find_ai_name",
        "get_last_blocks_result",
        "load_last_session",
        "save_session",
        "is_active",
        "read_stdin",
        "transcription_job",
        "get_user",
        "set_query",
        "get_updated_process_answer",
        "get_updated_block_answer",
        "speak_answer",
        "show_answer",
        "speak_in_thread"
      ],
      "classes": [
        "Interaction"
      ],
      "test_files": [
        "fully_headless_e2e_test.py",
        "test_apple_silicon_langchain_tools_comprehensive.py",
        "test_browser_automation_integration_mock.py",
        "test_graphiti_temporal_knowledge_integration.py",
        "venv/lib/python3.13/site-packages/bs4/tests/test_lxml.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_parallel.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/bipartite/tests/test_edgelist.py",
        "venv/lib/python3.13/site-packages/nltk/test/unit/test_tokenize.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_np_functions.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_sys_monitoring.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_ufuncs.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_mem_policy.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_multiarray.py",
        "venv/lib/python3.13/site-packages/numpy/fft/tests/test_pocketfft.py",
        "venv/lib/python3.13/site-packages/numpy/matrixlib/tests/test_interaction.py",
        "venv/lib/python3.13/site-packages/scipy/ndimage/tests/test_interpolation.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/_trustregion_constr/tests/test_qp_subproblem.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_axis_nan_policy.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_multivariate.py",
        "venv/lib/python3.13/site-packages/sklearn/compose/tests/test_column_transformer.py",
        "venv/lib/python3.13/site-packages/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py",
        "venv/lib/python3.13/site-packages/sklearn/ensemble/_hist_gradient_boosting/tests/test_grower.py",
        "venv/lib/python3.13/site-packages/sklearn/ensemble/_hist_gradient_boosting/tests/test_splitting.py",
        "venv/lib/python3.13/site-packages/sklearn/ensemble/tests/test_forest.py",
        "venv/lib/python3.13/site-packages/sklearn/feature_selection/tests/test_from_model.py",
        "venv/lib/python3.13/site-packages/sklearn/inspection/_plot/tests/test_plot_partial_dependence.py",
        "venv/lib/python3.13/site-packages/sklearn/linear_model/tests/test_sgd.py",
        "venv/lib/python3.13/site-packages/sklearn/model_selection/tests/test_successive_halving.py",
        "venv/lib/python3.13/site-packages/sklearn/preprocessing/tests/test_encoders.py",
        "venv/lib/python3.13/site-packages/sklearn/preprocessing/tests/test_polynomial.py",
        "venv/lib/python3.13/site-packages/sklearn/tree/tests/test_tree.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_param_validation.py",
        "venv/lib/python3.13/site-packages/sympy/external/tests/test_numpy.py",
        "venv/lib/python3.13/site-packages/sympy/external/tests/test_scipy.py",
        "venv/lib/python3.13/site-packages/sympy/logic/tests/test_lra_theory.py",
        "venv/lib/python3.13/site-packages/sympy/matrices/tests/test_domains.py",
        "venv/lib/python3.13/site-packages/sympy/matrices/tests/test_interactions.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_repl.py"
      ],
      "coverage": {
        "lines_total": 176,
        "lines_covered": 0,
        "lines_missing": 176,
        "coverage_percentage": 0.0,
        "complexity_score": 32.38636363636363,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 85.0,
        "type_hints": 18.421052631578945,
        "error_handling": 2.631578947368421,
        "function_complexity": 54.31578947368421
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "sources/langchain_agent_system.py": {
      "file_path": "sources/langchain_agent_system.py",
      "functions": [
        "__init__",
        "_run",
        "_execute",
        "get_usage_stats",
        "__init__",
        "_execute",
        "__init__",
        "_execute",
        "__init__",
        "_execute",
        "__init__",
        "_execute",
        "__init__",
        "_initialize_tools",
        "_initialize_memory",
        "plan",
        "_create_planning_prompt",
        "_parse_response",
        "_handle_collaboration_request",
        "_can_handle_task",
        "_update_response_time",
        "get_agent_info",
        "__init__",
        "register_agent",
        "unregister_agent",
        "_update_delivery_time",
        "get_communication_stats",
        "__init__",
        "_initialize_default_agents",
        "_create_agent",
        "_infer_llm_capabilities",
        "register_agent",
        "unregister_agent",
        "get_system_status",
        "get_agent_details",
        "__init__",
        "_run"
      ],
      "classes": [
        "AgentRole",
        "AgentCommunicationProtocol",
        "AgentStatus",
        "AgentMessage",
        "AgentCapabilities",
        "AgentState",
        "MLACSAgentTool",
        "VideoGenerationTool",
        "ResearchTool",
        "QualityAssuranceTool",
        "OptimizationTool",
        "MLACSAgent",
        "AgentCommunicationHub",
        "MLACSAgentSystem",
        "BaseTool",
        "BaseMultiActionAgent",
        "BaseSingleActionAgent",
        "AgentExecutor",
        "BaseCallbackHandler",
        "ConversationBufferMemory",
        "StringPromptTemplate",
        "AgentAction",
        "AgentFinish"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 850,
        "lines_covered": 722,
        "lines_missing": 128,
        "coverage_percentage": 85.0,
        "complexity_score": 16.039823008849556,
        "test_score": 0.85,
        "tdd_compliance": true
      },
      "code_quality": {
        "docstring_coverage": 68.33333333333333,
        "type_hints": 35.810810810810814,
        "error_handling": 12.162162162162163,
        "function_complexity": 28.243243243243242
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/langchain_apple_silicon_tools.py": {
      "file_path": "sources/langchain_apple_silicon_tools.py",
      "functions": [
        "__init__",
        "_detect_hardware_capabilities",
        "_has_metal_support",
        "embed_documents",
        "embed_query",
        "_embed_documents_maximum_optimization",
        "_embed_documents_neural_engine",
        "_embed_documents_enhanced",
        "_embed_documents_basic",
        "_embed_query_maximum_optimization",
        "_embed_query_neural_engine",
        "_embed_query_enhanced",
        "_embed_query_basic",
        "_generate_neural_engine_embedding",
        "_generate_metal_gpu_embedding",
        "_generate_optimized_cpu_embedding",
        "_generate_basic_embedding",
        "_apply_neural_engine_optimizations",
        "_apply_metal_gpu_optimizations",
        "_apply_cpu_optimizations",
        "_get_optimal_batch_size",
        "_process_batch_neural_engine",
        "_process_batch_metal_gpu",
        "_process_parallel_metal",
        "_process_parallel_cpu_optimized",
        "get_performance_metrics",
        "__init__",
        "_run",
        "add_documents",
        "_similarity_search_optimized",
        "_compute_similarities_metal",
        "_compute_similarities_cpu_optimized",
        "get_performance_metrics",
        "_estimate_memory_usage",
        "__init__",
        "_run",
        "start_monitoring",
        "stop_monitoring",
        "_monitoring_loop",
        "_collect_current_metrics",
        "_get_cpu_temperature",
        "get_performance_summary",
        "__init__",
        "_initialize_tools",
        "get_all_tools",
        "get_tool",
        "get_embeddings",
        "get_vector_store",
        "start_performance_monitoring",
        "stop_performance_monitoring",
        "get_system_summary",
        "__init__",
        "get_all_tools",
        "get_embeddings",
        "get_vector_store",
        "get_system_summary"
      ],
      "classes": [
        "OptimizationLevel",
        "PerformanceProfile",
        "HardwareCapability",
        "AppleSiliconMetrics",
        "AppleSiliconEmbeddings",
        "AppleSiliconVectorStore",
        "AppleSiliconPerformanceMonitor",
        "AppleSiliconToolManager",
        "AppleSiliconToolkit",
        "BaseTool",
        "Tool",
        "Document",
        "BaseCallbackHandler",
        "Embeddings",
        "LLM",
        "VectorStore",
        "BaseRetriever",
        "BaseMemory",
        "CallbackManagerForToolRun"
      ],
      "test_files": [
        "quick_apple_silicon_langchain_test.py",
        "test_apple_silicon_langchain_tools.py",
        "test_apple_silicon_langchain_tools_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 722,
        "lines_covered": 0,
        "lines_missing": 722,
        "coverage_percentage": 0.0,
        "complexity_score": 19.3390452876377,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 80.0,
        "type_hints": 26.785714285714285,
        "error_handling": 5.357142857142857,
        "function_complexity": 21.35714285714286
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langchain_memory_integration.py": {
      "file_path": "sources/langchain_memory_integration.py",
      "functions": [
        "to_dict",
        "from_dict",
        "__init__",
        "_initialize_embedding_models",
        "embed_documents",
        "embed_query",
        "_ensemble_embedding",
        "_single_model_embedding",
        "_simple_hash_embedding",
        "__init__",
        "_initialize_vector_store",
        "_create_in_memory_store",
        "add_documents",
        "_add_to_memory_store",
        "similarity_search",
        "_search_memory_store",
        "_cosine_similarity",
        "_update_average_retrieval_time",
        "get_store_stats",
        "__init__",
        "_initialize_memory_systems",
        "_create_memory_stores",
        "store_memory",
        "_store_private_memory",
        "_store_shared_memory",
        "_store_in_vector_store",
        "_share_across_llms",
        "retrieve_memory",
        "_document_to_memory_entry",
        "_update_retrieval_analytics",
        "configure_context_sharing",
        "get_memory_summary",
        "get_system_memory_stats",
        "__init__",
        "_get_relevant_documents"
      ],
      "classes": [
        "MemoryType",
        "MemoryScope",
        "VectorStoreType",
        "MemoryMetadata",
        "MemoryEntry",
        "MLACSEmbeddings",
        "MLACSVectorStore",
        "DistributedMemoryManager",
        "ContextAwareMemoryRetriever",
        "BaseMemory",
        "BaseChatMemory",
        "BaseVectorStore",
        "Embeddings",
        "Document",
        "BaseRetriever",
        "BaseMessage",
        "HumanMessage",
        "AIMessage",
        "SystemMessage"
      ],
      "test_files": [
        "quick_vector_knowledge_test.py",
        "test_langchain_vector_knowledge.py",
        "test_langchain_video_workflows.py"
      ],
      "coverage": {
        "lines_total": 733,
        "lines_covered": 623,
        "lines_missing": 110,
        "coverage_percentage": 85.0,
        "complexity_score": 20.515970515970515,
        "test_score": 0.85,
        "tdd_compliance": true
      },
      "code_quality": {
        "docstring_coverage": 74.07407407407408,
        "type_hints": 33.57142857142857,
        "error_handling": 12.857142857142856,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langchain_mlacs_integration_hub.py": {
      "file_path": "sources/langchain_mlacs_integration_hub.py",
      "functions": [
        "__init__",
        "on_chain_start",
        "on_chain_end",
        "on_agent_action",
        "__init__",
        "_initialize_core_systems",
        "_start_coordination_services",
        "_coordination_worker",
        "_memory_sync_worker",
        "_determine_execution_strategy",
        "_convert_to_video_requirements",
        "_process_coordination_task",
        "_perform_periodic_coordination",
        "_sync_cross_system_memory",
        "_handle_langchain_event",
        "_coordinate_with_mlacs",
        "_calculate_coordination_overhead",
        "_estimate_memory_usage",
        "_get_llm_usage_stats",
        "_get_agent_utilization_stats",
        "_get_apple_silicon_stats",
        "_update_average_execution_time",
        "_check_system_health",
        "_optimize_resource_allocation",
        "_update_performance_metrics",
        "_monitor_system_performance",
        "_optimize_system_resources",
        "get_integration_status",
        "get_workflow_status",
        "shutdown",
        "__init__",
        "__init__",
        "__init__",
        "get_monitoring_health",
        "shutdown",
        "__init__"
      ],
      "classes": [
        "IntegrationMode",
        "WorkflowType",
        "CoordinationLevel",
        "IntegrationConfiguration",
        "WorkflowRequest",
        "WorkflowResult",
        "IntegrationCallbackHandler",
        "MLACSLangChainIntegrationHub",
        "Chain",
        "Runnable",
        "BaseCallbackHandler",
        "AgentExecutor",
        "BaseTool",
        "MLACSIntegrationHub",
        "VideoGenerationWorkflowManager",
        "AppleSiliconToolkit",
        "MLACSMonitoringSystem",
        "MLACSTaskType",
        "CoordinationStrategy",
        "VideoWorkflowRequirements"
      ],
      "test_files": [
        "test_mlacs_langchain_integration_hub.py"
      ],
      "coverage": {
        "lines_total": 1122,
        "lines_covered": 0,
        "lines_missing": 1122,
        "coverage_percentage": 0.0,
        "complexity_score": 10.76923076923077,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 64.28571428571429,
        "type_hints": 34.72222222222222,
        "error_handling": 38.88888888888889,
        "function_complexity": 39.97222222222222
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langchain_monitoring_observability.py": {
      "file_path": "sources/langchain_monitoring_observability.py",
      "functions": [
        "__init__",
        "on_llm_start",
        "on_llm_end",
        "on_llm_error",
        "on_chain_start",
        "on_chain_end",
        "on_tool_start",
        "on_tool_end",
        "__init__",
        "add_metric",
        "_invalidate_cache",
        "get_performance_summary",
        "_calculate_trend",
        "_generate_recommendations",
        "__init__",
        "_setup_default_alert_rules",
        "check_metric_against_rules",
        "_metric_matches_pattern",
        "_check_threshold",
        "_trigger_alert",
        "acknowledge_alert",
        "resolve_alert",
        "get_active_alerts",
        "__init__",
        "_initialize_database",
        "_start_monitoring",
        "_metric_processor_worker",
        "_system_monitor_worker",
        "_collect_system_metrics",
        "record_metric",
        "_process_metric",
        "record_trace_event",
        "get_callback_handler",
        "get_performance_dashboard",
        "get_monitoring_health",
        "shutdown"
      ],
      "classes": [
        "MetricType",
        "AlertSeverity",
        "TraceEventType",
        "MetricPoint",
        "TraceEvent",
        "PerformanceAlert",
        "MLACSMonitoringCallback",
        "PerformanceAnalyzer",
        "AlertManager",
        "MLACSMonitoringSystem",
        "BaseCallbackHandler",
        "BaseCallbackManager",
        "BaseTracer",
        "Run",
        "RunTypeEnum",
        "Runnable"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 1054,
        "lines_covered": 0,
        "lines_missing": 1054,
        "coverage_percentage": 0.0,
        "complexity_score": 14.53437771975631,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 80.76923076923077,
        "type_hints": 31.25,
        "error_handling": 30.555555555555557,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/langchain_multi_llm_chains.py": {
      "file_path": "sources/langchain_multi_llm_chains.py",
      "functions": [
        "__init__",
        "_call",
        "_llm_type",
        "get_token_usage",
        "__init__",
        "on_chain_start",
        "on_chain_end",
        "on_chain_error",
        "on_llm_start",
        "on_llm_end",
        "__init__",
        "input_keys",
        "output_keys",
        "_call",
        "__init__",
        "input_keys",
        "output_keys",
        "_call",
        "_create_synthesis_prompt",
        "__init__",
        "input_keys",
        "output_keys",
        "_call",
        "__init__",
        "input_keys",
        "output_keys",
        "_call",
        "_get_all_responses",
        "_create_consensus_prompt",
        "_get_consensus_votes",
        "_extract_confidence",
        "_evaluate_consensus",
        "__init__",
        "input_keys",
        "output_keys",
        "_call",
        "_get_reviews",
        "_create_refinement_prompt",
        "_extract_quality_rating",
        "_evaluate_quality",
        "__init__",
        "_create_llm_wrappers",
        "_infer_capabilities",
        "create_chain",
        "_create_sequential_chain",
        "_create_parallel_chain",
        "_create_conditional_chain",
        "_create_consensus_chain",
        "_create_iterative_refinement_chain",
        "_default_condition_function",
        "__init__",
        "_call",
        "__call__"
      ],
      "classes": [
        "MultiLLMChainType",
        "ChainExecutionStrategy",
        "MultiLLMChainConfig",
        "ChainExecutionResult",
        "MLACSLLMWrapper",
        "MultiLLMChainCallback",
        "SequentialMultiLLMChain",
        "ParallelMultiLLMChain",
        "ConditionalMultiLLMChain",
        "ConsensusChain",
        "IterativeRefinementChain",
        "MultiLLMChainFactory",
        "Chain",
        "BaseLLM",
        "BasePromptTemplate",
        "BaseMemory",
        "BaseCallbackHandler",
        "BaseOutputParser"
      ],
      "test_files": [
        "test_langchain_video_workflows.py"
      ],
      "coverage": {
        "lines_total": 839,
        "lines_covered": 713,
        "lines_missing": 126,
        "coverage_percentage": 85.0,
        "complexity_score": 21.719955898566703,
        "test_score": 0.85,
        "tdd_compliance": true
      },
      "code_quality": {
        "docstring_coverage": 63.38028169014085,
        "type_hints": 33.9622641509434,
        "error_handling": 13.20754716981132,
        "function_complexity": 17.132075471698116
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langchain_vector_knowledge.py": {
      "file_path": "sources/langchain_vector_knowledge.py",
      "functions": [
        "to_document",
        "from_document",
        "__init__",
        "get_relevant_documents",
        "__init__",
        "add_knowledge",
        "_update_indices",
        "_find_similar_entries",
        "_detect_conflicts",
        "search",
        "advanced_search",
        "_select_diverse_results",
        "_calculate_similarity",
        "verify_knowledge",
        "resolve_conflict",
        "_resolve_by_consensus",
        "_resolve_by_recency",
        "_resolve_by_confidence",
        "_resolve_by_verification",
        "_update_average_search_time",
        "get_retriever",
        "get_performance_metrics",
        "cleanup",
        "__init__",
        "_initialize_knowledge_stores",
        "add_knowledge",
        "search_knowledge",
        "verify_knowledge",
        "_schedule_sync",
        "_execute_sync_operation",
        "_start_background_sync",
        "get_system_metrics",
        "cleanup",
        "sync_worker",
        "__init__"
      ],
      "classes": [
        "KnowledgeScope",
        "KnowledgeType",
        "SyncStrategy",
        "KnowledgeQuality",
        "KnowledgeEntry",
        "KnowledgeConflict",
        "SyncOperation",
        "VectorKnowledgeRetriever",
        "VectorKnowledgeStore",
        "VectorKnowledgeSharingSystem",
        "BaseVectorStore",
        "Embeddings",
        "Document",
        "BaseRetriever",
        "BaseCallbackHandler"
      ],
      "test_files": [
        "comprehensive_memory_system_integration_test.py",
        "quick_vector_knowledge_test.py",
        "test_langchain_vector_knowledge.py"
      ],
      "coverage": {
        "lines_total": 682,
        "lines_covered": 341,
        "lines_missing": 341,
        "coverage_percentage": 50.0,
        "complexity_score": 22.74562584118439,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 80.0,
        "type_hints": 46.42857142857143,
        "error_handling": 5.714285714285714,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langchain_vector_knowledge_system.py": {
      "file_path": "sources/langchain_vector_knowledge_system.py",
      "functions": [
        "__init__"
      ],
      "classes": [
        "KnowledgeNodeType",
        "SemanticRelationType",
        "SearchStrategy",
        "KnowledgeNode",
        "SearchResult",
        "LangChainVectorKnowledgeSystem"
      ],
      "test_files": [
        "comprehensive_memory_system_integration_test.py"
      ],
      "coverage": {
        "lines_total": 222,
        "lines_covered": 0,
        "lines_missing": 222,
        "coverage_percentage": 0.0,
        "complexity_score": 4.721030042918455,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 85.71428571428571,
        "type_hints": 100,
        "error_handling": 50.0,
        "function_complexity": 64.0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "sources/langchain_video_workflows.py": {
      "file_path": "sources/langchain_video_workflows.py",
      "functions": [
        "__init__",
        "parse",
        "_parse_concept",
        "_parse_script",
        "_parse_scenes",
        "_parse_visual_design",
        "_parse_audio_planning",
        "_parse_general",
        "__init__",
        "_create_stage_prompts",
        "_call",
        "_synthesize_llm_outputs",
        "_synthesize_concept_outputs",
        "_synthesize_script_outputs",
        "_synthesize_scene_outputs",
        "_synthesize_general_outputs",
        "_store_stage_memory",
        "_calculate_quality_score",
        "_prepare_next_stage_inputs",
        "_populate_stage_specific_data",
        "__init__",
        "_create_llm_wrappers",
        "_infer_llm_capabilities",
        "_build_stage_context",
        "_generate_final_output",
        "_update_average_completion_time",
        "get_workflow_status",
        "get_system_metrics",
        "__init__",
        "_call"
      ],
      "classes": [
        "VideoWorkflowStage",
        "VideoGenre",
        "VideoStyle",
        "VideoWorkflowRequirements",
        "VideoWorkflowStageResult",
        "VideoWorkflowOutputParser",
        "VideoWorkflowChain",
        "VideoGenerationWorkflowManager",
        "Chain",
        "Runnable",
        "BaseOutputParser",
        "BaseCallbackHandler",
        "BaseMessage",
        "HumanMessage",
        "AIMessage"
      ],
      "test_files": [
        "test_langchain_video_workflows.py",
        "test_langchain_video_workflows_comprehensive.py",
        "test_production_video_workflows.py"
      ],
      "coverage": {
        "lines_total": 921,
        "lines_covered": 460,
        "lines_missing": 461,
        "coverage_percentage": 50.0,
        "complexity_score": 16.7,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 73.33333333333333,
        "type_hints": 45.83333333333333,
        "error_handling": 13.333333333333334,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langchain_video_workflows_production.py": {
      "file_path": "sources/langchain_video_workflows_production.py",
      "functions": [
        "__init__",
        "_initialize_production_database",
        "_get_db_connection",
        "_return_db_connection",
        "_initialize_production_workflow_templates",
        "_save_workflow_template_to_db",
        "_start_background_maintenance",
        "_cleanup_old_data",
        "_optimize_database",
        "_check_system_health",
        "get_system_health",
        "shutdown",
        "__init__",
        "start_project_tracking",
        "record_stage_performance",
        "stop_project_tracking",
        "_calculate_production_efficiency_score",
        "_check_sla_compliance",
        "__init__",
        "log_error",
        "get_error_summary",
        "__init__",
        "start_monitoring",
        "stop_monitoring",
        "get_project_usage",
        "__init__",
        "on_llm_start",
        "on_llm_end",
        "on_llm_error",
        "invoke",
        "from_messages",
        "format_prompt",
        "__init__",
        "run",
        "monitor_worker",
        "maintenance_worker"
      ],
      "classes": [
        "ProductionVideoQuality",
        "ProductionVideoStage",
        "ProductionLLMRole",
        "ProductionVideoRequest",
        "ProductionVideoScript",
        "ProductionVideoAsset",
        "ProductionVideoProject",
        "ProductionLLMCollaborationMetric",
        "ProductionVideoWorkflowOrchestrator",
        "ProductionVideoWorkflowPerformanceTracker",
        "ProductionErrorTracker",
        "ProductionResourceMonitor",
        "BaseMessage",
        "HumanMessage",
        "AIMessage",
        "SystemMessage",
        "BaseCallbackHandler",
        "Runnable",
        "ChatPromptTemplate",
        "LLMChain"
      ],
      "test_files": [
        "test_production_video_workflows.py"
      ],
      "coverage": {
        "lines_total": 1594,
        "lines_covered": 0,
        "lines_missing": 1594,
        "coverage_percentage": 0.0,
        "complexity_score": 8.410672853828306,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 58.92857142857143,
        "type_hints": 56.94444444444444,
        "error_handling": 47.22222222222222,
        "function_complexity": 5.7777777777777715
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langgraph_apple_silicon_optimization_sandbox.py": {
      "file_path": "sources/langgraph_apple_silicon_optimization_sandbox.py",
      "functions": [
        "__post_init__",
        "calculate_improvements",
        "__init__",
        "detect_apple_silicon",
        "_get_cpu_brand",
        "_determine_chip_type",
        "_get_chip_specs",
        "_check_metal_support",
        "_check_coreml_support",
        "__init__",
        "_extract_decision_features",
        "__init__",
        "__init__",
        "_calculate_memory_efficiency",
        "_calculate_fragmentation",
        "_estimate_bandwidth_utilization",
        "__init__",
        "_init_database",
        "_generate_cache_key",
        "get_optimization_history",
        "get_performance_stats"
      ],
      "classes": [
        "AppleSiliconChip",
        "HardwareCapabilities",
        "OptimizationMetrics",
        "WorkflowTask",
        "HardwareDetector",
        "CoreMLOptimizer",
        "MetalOptimizer",
        "UnifiedMemoryManager",
        "LangGraphAppleSiliconOptimizer"
      ],
      "test_files": [
        "test_langgraph_apple_silicon_optimization_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 807,
        "lines_covered": 0,
        "lines_missing": 807,
        "coverage_percentage": 0.0,
        "complexity_score": 11.954022988505747,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 83.33333333333334,
        "type_hints": 46.42857142857143,
        "error_handling": 33.33333333333333,
        "function_complexity": 9.095238095238102
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langgraph_complex_workflow_structures.py": {
      "file_path": "sources/langgraph_complex_workflow_structures.py",
      "functions": [
        "__init__",
        "init_database",
        "_process_template_variables",
        "_background_monitoring",
        "__init__",
        "init_default_templates",
        "__init__",
        "_get_variable_value",
        "__init__",
        "__init__"
      ],
      "classes": [
        "WorkflowNodeType",
        "ExecutionState",
        "ConditionType",
        "WorkflowNode",
        "WorkflowTemplate",
        "WorkflowInstance",
        "ConditionalLogic",
        "LoopStructure",
        "ComplexWorkflowStructureSystem",
        "WorkflowTemplateLibrary",
        "DynamicWorkflowGenerator",
        "ConditionalEvaluator",
        "LoopManager",
        "WorkflowOptimizer",
        "WorkflowPerformanceMonitor"
      ],
      "test_files": [
        "test_langgraph_complex_workflow_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 1046,
        "lines_covered": 0,
        "lines_missing": 1046,
        "coverage_percentage": 0.0,
        "complexity_score": 8.01762114537445,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 80.0,
        "type_hints": 100,
        "error_handling": 35.0,
        "function_complexity": 11.700000000000003
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langgraph_copilotkit_coordinator.py": {
      "file_path": "sources/langgraph_copilotkit_coordinator.py",
      "functions": [
        "__init__",
        "_get_available_tools",
        "_coordinate_agents_tool",
        "_analyze_performance_tool",
        "_optimize_hardware_tool",
        "_generate_content_tool",
        "_validate_tier_tool",
        "_execute_parallel_tool",
        "_setup_copilotkit_workflows",
        "_create_agent_coordination_workflow",
        "_create_video_generation_workflow",
        "_create_hardware_optimization_workflow",
        "_create_performance_analysis_workflow",
        "_create_complex_coordination_workflow",
        "_map_action_to_workflow",
        "_get_tier_agent_limit",
        "_extract_recommendations",
        "_extract_priority_actions",
        "_calculate_estimated_impact",
        "get_active_workflows",
        "validate_tier",
        "coordinate_agents",
        "analyze_coordination",
        "validate_enterprise_tier",
        "optimize_for_video",
        "coordinate_video_agents",
        "generate_video_content",
        "analyze_current_state",
        "determine_optimization_strategy",
        "apply_optimization",
        "collect_metrics",
        "generate_insights",
        "create_action_plan",
        "initialize_complex_coordination",
        "execute_parallel_coordination",
        "synthesize_results"
      ],
      "classes": [
        "WorkflowStatus",
        "NodeType",
        "WorkflowState",
        "CopilotKitAction",
        "LangGraphCopilotKitCoordinator"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 724,
        "lines_covered": 0,
        "lines_missing": 724,
        "coverage_percentage": 0.0,
        "complexity_score": 11.578947368421053,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 92.6829268292683,
        "type_hints": 56.94444444444444,
        "error_handling": 9.722222222222223,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/langgraph_decision_optimization_sandbox.py": {
      "file_path": "sources/langgraph_decision_optimization_sandbox.py",
      "functions": [
        "create_demo_optimization_system",
        "__init__",
        "setup_database",
        "load_models",
        "_initialize_fallback_models",
        "_create_fallback_model",
        "_load_model_states",
        "extract_features",
        "predict_optimal_framework",
        "_ensemble_prediction",
        "record_decision",
        "update_model_with_feedback",
        "_prepare_training_data",
        "_train_model",
        "_store_model_performance",
        "__init__",
        "create_ab_test",
        "_validate_test_config",
        "_store_test_config",
        "assign_test_group",
        "record_test_result",
        "analyze_test_results",
        "_perform_statistical_analysis",
        "__init__",
        "collect_feedback",
        "_store_feedback",
        "_process_feedback_batch",
        "_async_feedback_processing",
        "_process_decision_feedback",
        "_update_decision_with_feedback",
        "get_feedback_summary",
        "__init__",
        "start_optimization",
        "stop_optimization",
        "_optimization_loop",
        "_collect_recent_feedback",
        "_update_models",
        "_analyze_active_tests",
        "_calculate_optimization_metrics",
        "_calculate_accuracy_improvement",
        "_calculate_suboptimal_reduction",
        "_calculate_feedback_effectiveness",
        "get_optimization_status",
        "create_sample_ab_test",
        "__init__",
        "predict",
        "predict_proba",
        "fit"
      ],
      "classes": [
        "DecisionStrategy",
        "ModelType",
        "DecisionRecord",
        "ABTestConfiguration",
        "PerformanceFeedback",
        "DecisionLearningEngine",
        "ABTestingFramework",
        "PerformanceFeedbackSystem",
        "DecisionOptimizationOrchestrator",
        "FallbackModel"
      ],
      "test_files": [
        "test_langgraph_decision_optimization_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 1127,
        "lines_covered": 0,
        "lines_missing": 1127,
        "coverage_percentage": 0.0,
        "complexity_score": 18.085969180859692,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 84.48275862068965,
        "type_hints": 21.354166666666664,
        "error_handling": 44.79166666666667,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langgraph_dynamic_complexity_routing_sandbox.py": {
      "file_path": "sources/langgraph_dynamic_complexity_routing_sandbox.py",
      "functions": [
        "__init__",
        "init_database",
        "_initialize_default_thresholds",
        "_calculate_task_type_complexity",
        "_calculate_quality_complexity",
        "_calculate_tier_complexity_factor",
        "_determine_complexity_level",
        "_calculate_load_factor",
        "_calculate_resource_availability",
        "_background_monitoring",
        "__init__",
        "__init__",
        "_calculate_load_factor",
        "__init__",
        "__init__"
      ],
      "classes": [
        "ComplexityLevel",
        "RoutingStrategy",
        "FrameworkLoad",
        "ComplexityThreshold",
        "RoutingDecision",
        "FrameworkLoadMetrics",
        "WorkloadMetrics",
        "DynamicComplexityRoutingSystem",
        "ComplexityThresholdManager",
        "FrameworkLoadBalancer",
        "RoutingPerformanceOptimizer",
        "WorkloadAnalyzer"
      ],
      "test_files": [
        "test_langgraph_dynamic_complexity_routing_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 1030,
        "lines_covered": 0,
        "lines_missing": 1030,
        "coverage_percentage": 0.0,
        "complexity_score": 7.5892857142857135,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 81.48148148148148,
        "type_hints": 73.33333333333333,
        "error_handling": 3.3333333333333335,
        "function_complexity": 27.799999999999997
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langgraph_framework_coordinator.py": {
      "file_path": "sources/langgraph_framework_coordinator.py",
      "functions": [
        "to_dict",
        "to_dict",
        "to_dict",
        "__init__",
        "_initialize_decision_weights",
        "_assess_complexity",
        "_analyze_state_requirements",
        "_identify_coordination_pattern",
        "_assess_performance_requirements",
        "_detect_conditional_flows",
        "_detect_iterative_needs",
        "_assess_agent_coordination_needs",
        "_estimate_node_count",
        "_estimate_iteration_count",
        "_estimate_execution_time",
        "_estimate_memory_requirements",
        "_assess_real_time_needs",
        "_calculate_framework_fitness",
        "_apply_tier_restrictions",
        "_make_framework_decision",
        "_generate_decision_reason",
        "_get_tier_optimizations",
        "_calculate_resource_allocation",
        "_log_decision",
        "get_decision_analytics",
        "__init__",
        "_initialize_prediction_models",
        "update_performance_data",
        "_update_prediction_models",
        "__init__",
        "_initialize_framework_executors",
        "get_system_analytics",
        "_get_framework_usage_stats",
        "__init__",
        "__init__",
        "__init__",
        "Annotated",
        "add_messages"
      ],
      "classes": [
        "ComplexityLevel",
        "StateRequirement",
        "CoordinationType",
        "BranchingComplexity",
        "FrameworkType",
        "UserTier",
        "TaskAnalysis",
        "FrameworkDecision",
        "ComplexTask",
        "FrameworkDecisionEngine",
        "FrameworkPerformancePredictor",
        "IntelligentFrameworkCoordinator",
        "LangChainExecutor",
        "LangGraphExecutor",
        "HybridFrameworkExecutor",
        "BaseTool",
        "Document",
        "BaseCallbackHandler",
        "StateGraph",
        "TypedDict"
      ],
      "test_files": [
        "quick_langgraph_state_coordination_test.py",
        "test_langgraph_framework_coordinator.py",
        "test_langgraph_state_coordination.py"
      ],
      "coverage": {
        "lines_total": 996,
        "lines_covered": 498,
        "lines_missing": 498,
        "coverage_percentage": 50.0,
        "complexity_score": 16.186046511627907,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 72.41379310344827,
        "type_hints": 29.605263157894733,
        "error_handling": 5.263157894736842,
        "function_complexity": 2.631578947368425
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langgraph_framework_performance_prediction_sandbox.py": {
      "file_path": "sources/langgraph_framework_performance_prediction_sandbox.py",
      "functions": [
        "__init__",
        "init_database",
        "_load_trained_models",
        "_load_historical_data",
        "_background_model_updates",
        "__init__",
        "extract_features",
        "prepare_training_data",
        "__init__",
        "__init__",
        "__init__"
      ],
      "classes": [
        "Framework",
        "PredictionType",
        "ModelType",
        "PerformanceMetric",
        "PredictionRequest",
        "PerformancePrediction",
        "ModelPerformance",
        "PerformancePredictionEngine",
        "PerformanceDataCollector",
        "MLModelTrainer",
        "PredictionService",
        "AccuracyTracker"
      ],
      "test_files": [
        "test_langgraph_framework_performance_prediction_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 925,
        "lines_covered": 0,
        "lines_missing": 925,
        "coverage_percentage": 0.0,
        "complexity_score": 9.9,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 78.26086956521739,
        "type_hints": 59.09090909090909,
        "error_handling": 54.54545454545454,
        "function_complexity": 2.4545454545454533
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langgraph_framework_selection_criteria_sandbox.py": {
      "file_path": "sources/langgraph_framework_selection_criteria_sandbox.py",
      "functions": [
        "__init__",
        "init_database",
        "_initialize_default_criteria",
        "_make_json_serializable",
        "_load_trained_models",
        "_background_adaptation",
        "__init__",
        "adaptation_applied_recently",
        "__init__",
        "_extract_features",
        "__init__"
      ],
      "classes": [
        "Framework",
        "TaskType",
        "CriteriaType",
        "SelectionCriteria",
        "SelectionContext",
        "SelectionDecision",
        "ExpertDecision",
        "FrameworkSelectionCriteriaSystem",
        "CriteriaAdaptationEngine",
        "MLFrameworkPredictor",
        "ExpertValidationSystem"
      ],
      "test_files": [
        "test_langgraph_framework_selection_criteria_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 795,
        "lines_covered": 0,
        "lines_missing": 795,
        "coverage_percentage": 0.0,
        "complexity_score": 7.657142857142857,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 81.81818181818183,
        "type_hints": 54.54545454545454,
        "error_handling": 13.636363636363635,
        "function_complexity": 7.727272727272734
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langgraph_framework_selection_learning_sandbox.py": {
      "file_path": "sources/langgraph_framework_selection_learning_sandbox.py",
      "functions": [
        "create_demo_selection_learning_system",
        "__init__",
        "setup_database",
        "initialize_parameters",
        "_initialize_parameter",
        "select_framework_adaptive",
        "_calculate_adaptive_scores",
        "_apply_learned_patterns",
        "_get_relevant_patterns",
        "_pattern_matches_features",
        "_record_decision",
        "update_decision_outcome",
        "_trigger_learning_update",
        "_get_decision",
        "__init__",
        "analyze_performance_trends",
        "_calculate_improvement_rate",
        "update_performance_model",
        "__init__",
        "learn_contextual_patterns",
        "_group_by_context_similarity",
        "_cluster_by_context",
        "_simple_context_grouping",
        "_extract_contextual_rule",
        "_extract_context_conditions",
        "_store_contextual_rule",
        "__init__",
        "identify_patterns",
        "_identify_temporal_patterns",
        "_analyze_temporal_group",
        "_identify_complexity_patterns",
        "_analyze_complexity_group",
        "_identify_performance_patterns",
        "_analyze_high_performance_characteristics",
        "_store_pattern",
        "__init__",
        "tune_parameters",
        "_get_current_parameters",
        "_identify_tuning_candidates",
        "_tune_single_parameter",
        "_update_parameter_value",
        "_calculate_accuracy_impact",
        "__init__",
        "start_learning",
        "stop_learning",
        "select_framework_with_learning",
        "record_selection_outcome",
        "_learning_loop",
        "_get_recent_decisions",
        "_calculate_current_accuracy",
        "_update_learning_metrics",
        "_calculate_30_day_improvement",
        "_calculate_error_reduction",
        "_count_active_patterns",
        "_calculate_convergence_rate",
        "_calculate_parameter_stability",
        "_store_learning_metrics",
        "get_learning_status"
      ],
      "classes": [
        "LearningStrategy",
        "ContextType",
        "PatternType",
        "SelectionDecision",
        "LearningPattern",
        "ContextualRule",
        "ParameterConfiguration",
        "AdaptiveSelectionAlgorithm",
        "PerformanceBasedLearning",
        "ContextAwareLearning",
        "PatternRecognitionEngine",
        "AutomatedParameterTuning",
        "FrameworkSelectionLearningOrchestrator"
      ],
      "test_files": [
        "test_langgraph_framework_selection_learning_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 1431,
        "lines_covered": 0,
        "lines_missing": 1431,
        "coverage_percentage": 0.0,
        "complexity_score": 20.836012861736332,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 91.54929577464789,
        "type_hints": 28.01724137931034,
        "error_handling": 47.41379310344828,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langgraph_graphiti_temporal_knowledge_integration_sandbox.py": {
      "file_path": "sources/langgraph_graphiti_temporal_knowledge_integration_sandbox.py",
      "functions": [
        "create_demo_langgraph_graphiti_system",
        "__init__",
        "setup_database",
        "initialize_integration",
        "setup_workflow_integration",
        "register_knowledge_node",
        "create_temporal_relationship",
        "get_workflow_context",
        "get_knowledge_node",
        "query_knowledge_for_workflow",
        "__init__",
        "access_temporal_knowledge",
        "register_update_callback",
        "process_knowledge_update",
        "process_temporal_event",
        "validate_temporal_consistency",
        "_calculate_temporal_relevance",
        "_calculate_temporal_strength",
        "__init__",
        "make_knowledge_informed_decision",
        "make_baseline_decision",
        "calculate_decision_accuracy",
        "validate_decision_consistency",
        "_store_decision",
        "_get_complexity_range",
        "__init__",
        "add_knowledge_node",
        "ensure_node_exists",
        "add_relationship",
        "traverse_for_workflow_planning",
        "traverse_with_strategy",
        "_traverse_highest_weight",
        "_traverse_comprehensive",
        "_convert_path_to_workflow_steps",
        "_store_traversal_result",
        "__init__",
        "start_integration",
        "stop_integration",
        "setup_workflow_knowledge_integration",
        "execute_workflow_step_with_knowledge",
        "process_real_time_knowledge_event",
        "assess_integration_quality",
        "setup_complex_workflow_with_knowledge_traversal",
        "execute_workflow_with_knowledge_traversal",
        "populate_knowledge_graph",
        "access_knowledge_from_workflow_node",
        "populate_decision_knowledge",
        "process_knowledge_update",
        "make_knowledge_informed_decision",
        "make_baseline_decision",
        "register_shared_knowledge",
        "access_workflow_knowledge",
        "update_workflow_knowledge_context",
        "generate_consistency_report",
        "validate_knowledge_consistency",
        "check_knowledge_integrity",
        "get_integration_status",
        "demonstrate_knowledge_integration"
      ],
      "classes": [
        "KnowledgeNodeType",
        "TemporalRelationType",
        "ConsistencyLevel",
        "KnowledgeNode",
        "TemporalRelationship",
        "WorkflowContext",
        "KnowledgeDecision",
        "GraphTraversalResult",
        "LangGraphGraphitiIntegrator",
        "TemporalKnowledgeAccessor",
        "WorkflowKnowledgeDecisionEngine",
        "KnowledgeGraphTraversal",
        "GraphitiTemporalKnowledgeOrchestrator"
      ],
      "test_files": [
        "test_langgraph_graphiti_temporal_knowledge_integration_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 1562,
        "lines_covered": 0,
        "lines_missing": 1562,
        "coverage_percentage": 0.0,
        "complexity_score": 17.412045319022063,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 92.95774647887323,
        "type_hints": 45.258620689655174,
        "error_handling": 44.827586206896555,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langgraph_hybrid_framework_coordination_sandbox.py": {
      "file_path": "sources/langgraph_hybrid_framework_coordination_sandbox.py",
      "functions": [
        "__post_init__",
        "_calculate_checksum",
        "validate_integrity",
        "__init__",
        "_value_exists_in_dict",
        "_structure_preserved",
        "__init__",
        "init_database",
        "_calculate_handoff_analytics",
        "_calculate_execution_analytics",
        "_calculate_pattern_distribution",
        "_calculate_performance_trends",
        "_calculate_quality_metrics",
        "_background_monitoring"
      ],
      "classes": [
        "HandoffType",
        "ExecutionPattern",
        "StateTranslationStatus",
        "WorkflowState",
        "HandoffRequest",
        "HandoffResult",
        "HybridExecutionPlan",
        "HybridExecutionResult",
        "StateTranslator",
        "HybridFrameworkCoordinator"
      ],
      "test_files": [
        "test_langgraph_hybrid_framework_coordination_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 1185,
        "lines_covered": 0,
        "lines_missing": 1185,
        "coverage_percentage": 0.0,
        "complexity_score": 10.161662817551962,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 87.5,
        "type_hints": 100.0,
        "error_handling": 32.142857142857146,
        "function_complexity": 22.785714285714292
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langgraph_intelligent_framework_router.py": {
      "file_path": "sources/langgraph_intelligent_framework_router.py",
      "functions": [
        "__init__",
        "init_database",
        "_initialize_framework_capabilities",
        "_generate_routing_reasoning",
        "_analyze_strategy_usage",
        "_background_monitoring",
        "__init__",
        "__init__"
      ],
      "classes": [
        "FrameworkType",
        "TaskComplexity",
        "RoutingStrategy",
        "FrameworkStatus",
        "FrameworkCapability",
        "TaskCharacteristics",
        "RoutingDecision",
        "FrameworkPerformanceMetrics",
        "CoordinationPattern",
        "IntelligentFrameworkRouter",
        "FrameworkCapabilityAnalyzer",
        "IntelligentRoutingEngine",
        "MultiFrameworkCoordinator",
        "FrameworkPerformanceMonitor",
        "MachineLearningOptimizer"
      ],
      "test_files": [
        "test_langgraph_intelligent_framework_router_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 883,
        "lines_covered": 0,
        "lines_missing": 883,
        "coverage_percentage": 0.0,
        "complexity_score": 6.210526315789474,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 86.95652173913044,
        "type_hints": 100,
        "error_handling": 37.5,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langgraph_memory_aware_state_creation_sandbox.py": {
      "file_path": "sources/langgraph_memory_aware_state_creation_sandbox.py",
      "functions": [
        "__init__",
        "detect_pressure_level",
        "calculate_detection_accuracy",
        "__init__",
        "_to_sparse_array",
        "_to_compact_dict",
        "_is_sparse",
        "__init__",
        "__init__"
      ],
      "classes": [
        "MemoryPressureLevel",
        "StateOptimizationStrategy",
        "MemoryAllocationStrategy",
        "StateStructureType",
        "SharingLevel",
        "MemoryMetrics",
        "StateOptimizationConfig",
        "MemoryAwareState",
        "AdaptiveSizingProfile",
        "MemoryPressureDetector",
        "StateOptimizationEngine",
        "AdaptiveSizingManager",
        "MemoryAwareStateManager"
      ],
      "test_files": [
        "test_langgraph_memory_aware_state_creation_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 867,
        "lines_covered": 0,
        "lines_missing": 867,
        "coverage_percentage": 0.0,
        "complexity_score": 9.674027339642482,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 81.81818181818183,
        "type_hints": 100,
        "error_handling": 77.77777777777779,
        "function_complexity": 19.77777777777777
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langgraph_multi_tier_memory_system_sandbox.py": {
      "file_path": "sources/langgraph_multi_tier_memory_system_sandbox.py",
      "functions": [
        "copy",
        "__init__",
        "__init__",
        "__init__",
        "_initialize_database",
        "__init__",
        "_initialize_database",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "_determine_optimal_tier"
      ],
      "classes": [
        "MemoryTier",
        "MemoryScope",
        "StateType",
        "MemoryAccessPattern",
        "MemoryObject",
        "WorkflowState",
        "MemoryMetrics",
        "AgentMemoryProfile",
        "MemoryCompressionEngine",
        "Tier1InMemoryStorage",
        "Tier2SessionStorage",
        "Tier3LongTermStorage",
        "WorkflowStateManager",
        "CheckpointManager",
        "CrossAgentMemoryCoordinator",
        "MemoryOptimizer",
        "MultiTierMemoryCoordinator"
      ],
      "test_files": [
        "test_langgraph_multi_tier_memory_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 843,
        "lines_covered": 0,
        "lines_missing": 843,
        "coverage_percentage": 0.0,
        "complexity_score": 9.580193756727665,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 70.0,
        "type_hints": 100,
        "error_handling": 80.76923076923077,
        "function_complexity": 36.23076923076923
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langgraph_neural_engine_gpu_acceleration_sandbox.py": {
      "file_path": "sources/langgraph_neural_engine_gpu_acceleration_sandbox.py",
      "functions": [
        "__init__",
        "_gather_system_info",
        "_check_neural_engine",
        "_check_metal_gpu",
        "_assess_capabilities",
        "__init__",
        "_prepare_data_for_neural_engine",
        "_estimate_energy_consumption",
        "__init__",
        "_prepare_data_for_gpu",
        "_estimate_gpu_energy_consumption",
        "__init__",
        "_calculate_neural_engine_score",
        "_calculate_gpu_score",
        "_calculate_cpu_score",
        "_estimate_cpu_energy_consumption",
        "_record_scheduling_decision",
        "__init__",
        "optimize_for_energy_efficiency",
        "_analyze_energy_profiles",
        "_estimate_neural_engine_energy",
        "_estimate_gpu_energy",
        "_estimate_cpu_energy",
        "_select_energy_optimal_acceleration",
        "_generate_energy_config",
        "__init__",
        "_init_database",
        "_estimate_neural_engine_utilization",
        "_estimate_gpu_utilization",
        "record_acceleration_result",
        "generate_performance_report",
        "__init__",
        "_create_workload_profile",
        "_estimate_workload_complexity",
        "_estimate_workload_duration",
        "_update_orchestrator_metrics",
        "get_optimization_summary",
        "neural_engine_compute",
        "gpu_compute",
        "cpu_compute"
      ],
      "classes": [
        "AccelerationType",
        "WorkloadType",
        "WorkloadProfile",
        "AccelerationResult",
        "NeuralEngineConfig",
        "GPUConfig",
        "SystemProfiler",
        "NeuralEngineAccelerator",
        "GPUAccelerator",
        "WorkloadScheduler",
        "EnergyOptimizer",
        "PerformanceProfiler",
        "NeuralEngineGPUAccelerationOrchestrator"
      ],
      "test_files": [
        "test_langgraph_neural_engine_gpu_acceleration_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 1014,
        "lines_covered": 0,
        "lines_missing": 1014,
        "coverage_percentage": 0.0,
        "complexity_score": 14.15929203539823,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 81.13207547169812,
        "type_hints": 38.125,
        "error_handling": 16.25,
        "function_complexity": 13.700000000000003
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langgraph_parallel_node_execution_sandbox.py": {
      "file_path": "sources/langgraph_parallel_node_execution_sandbox.py",
      "functions": [
        "__post_init__",
        "calculate_speedup",
        "__init__",
        "analyze_dependencies",
        "_build_dependency_graph",
        "_identify_execution_levels",
        "_analyze_parallelization_potential",
        "_analyze_resource_conflicts",
        "_find_critical_path",
        "_calculate_accuracy_score",
        "_generate_cache_key",
        "__init__",
        "optimize_thread_pool_config",
        "_analyze_workload",
        "_calculate_optimal_threads",
        "_optimize_for_apple_silicon",
        "_configure_thread_affinity",
        "_configure_resource_allocation",
        "_predict_performance",
        "__init__",
        "_release_resources",
        "get_contention_report",
        "__init__",
        "_init_database",
        "_create_test_workflow",
        "get_performance_statistics"
      ],
      "classes": [
        "NodeExecutionState",
        "ParallelizationStrategy",
        "WorkflowNode",
        "ParallelExecutionMetrics",
        "DependencyAnalyzer",
        "AppleSiliconThreadPoolOptimizer",
        "ResourceContentionManager",
        "ParallelExecutionEngine",
        "HardwareCapabilities"
      ],
      "test_files": [
        "test_langgraph_parallel_node_execution_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 1127,
        "lines_covered": 0,
        "lines_missing": 1127,
        "coverage_percentage": 0.0,
        "complexity_score": 13.555194805194807,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 85.71428571428571,
        "type_hints": 37.5,
        "error_handling": 34.61538461538461,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langgraph_performance_analytics_sandbox.py": {
      "file_path": "sources/langgraph_performance_analytics_sandbox.py",
      "functions": [
        "__init__",
        "_setup_database",
        "_update_collection_stats",
        "__init__",
        "_calculate_statistics",
        "_calculate_performance_ratio",
        "_calculate_statistical_significance",
        "_calculate_confidence_interval",
        "_generate_recommendation",
        "_create_empty_comparison",
        "__init__",
        "_calculate_trend",
        "_is_lower_better_metric",
        "_detect_anomalies",
        "_generate_forecast",
        "_calculate_trend_strength",
        "_create_empty_trend",
        "__init__",
        "_setup_detection_rules",
        "_update_active_bottlenecks",
        "__init__",
        "_calculate_system_health_score",
        "_generate_recommendations",
        "_create_empty_dashboard",
        "__init__"
      ],
      "classes": [
        "FrameworkType",
        "MetricType",
        "BottleneckType",
        "TrendDirection",
        "PerformanceMetric",
        "FrameworkComparison",
        "TrendAnalysis",
        "BottleneckAnalysis",
        "PerformanceDashboardData",
        "PerformanceMetricsCollector",
        "FrameworkComparisonAnalyzer",
        "TrendAnalysisEngine",
        "BottleneckDetector",
        "PerformanceDashboardAPI",
        "PerformanceAnalyticsOrchestrator"
      ],
      "test_files": [
        "test_langgraph_performance_analytics_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 1268,
        "lines_covered": 0,
        "lines_missing": 1268,
        "coverage_percentage": 0.0,
        "complexity_score": 14.024835646457268,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 85.0,
        "type_hints": 59.0,
        "error_handling": 68.0,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langgraph_state_coordination.py": {
      "file_path": "sources/langgraph_state_coordination.py",
      "functions": [
        "create_base_state_schema",
        "create_pro_state_schema",
        "create_enterprise_state_schema",
        "to_dict",
        "to_dict",
        "__init__",
        "_create_role_prompt",
        "_process_agent_response",
        "_get_default_value",
        "__init__",
        "_initialize_coordination_patterns",
        "register_agent",
        "_create_agent_node",
        "_create_supervisor_node",
        "_create_consensus_node",
        "_create_parallel_coordinator_node",
        "_create_aggregator_node",
        "_create_decision_node",
        "get_coordination_analytics",
        "Annotated",
        "add_messages",
        "supervisor_router",
        "collaborative_router",
        "parallel_router",
        "conditional_router",
        "__init__",
        "add_node",
        "add_edge",
        "add_conditional_edges",
        "set_entry_point",
        "compile"
      ],
      "classes": [
        "CoordinationPattern",
        "AgentRole",
        "StateTransition",
        "AgentCapability",
        "WorkflowState",
        "LangGraphAgent",
        "LangGraphCoordinator",
        "BaseTool",
        "Document",
        "BaseMessage",
        "HumanMessage",
        "AIMessage",
        "SystemMessage",
        "BaseCallbackHandler",
        "LLM",
        "StateGraph",
        "TypedDict",
        "MemorySaver",
        "ToolExecutor"
      ],
      "test_files": [
        "quick_langgraph_state_coordination_test.py",
        "test_langgraph_state_coordination.py",
        "test_langgraph_state_coordination_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 908,
        "lines_covered": 454,
        "lines_missing": 454,
        "coverage_percentage": 50.0,
        "complexity_score": 11.723446893787576,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 52.0,
        "type_hints": 43.54838709677419,
        "error_handling": 9.67741935483871,
        "function_complexity": 18.096774193548384
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langgraph_tier_management_system.py": {
      "file_path": "sources/langgraph_tier_management_system.py",
      "functions": [
        "__init__",
        "_initialize_tier_limits",
        "_initialize_degradation_strategies",
        "init_database",
        "_background_monitoring",
        "__init__",
        "record_metric",
        "get_tier_performance",
        "__init__"
      ],
      "classes": [
        "TierLevel",
        "TierLimits",
        "UsageMetrics",
        "WorkflowExecutionContext",
        "TierManagementSystem",
        "PerformanceMonitor",
        "UsageAnalytics"
      ],
      "test_files": [
        "test_langgraph_tier_management_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 695,
        "lines_covered": 0,
        "lines_missing": 695,
        "coverage_percentage": 0.0,
        "complexity_score": 8.174386920980927,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 81.25,
        "type_hints": 100,
        "error_handling": 11.11111111111111,
        "function_complexity": 19.888888888888886
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/langgraph_workflow_state_management_sandbox.py": {
      "file_path": "sources/langgraph_workflow_state_management_sandbox.py",
      "functions": [
        "__init__",
        "__init__",
        "_initialize_database",
        "_add_to_cache",
        "__init__",
        "_initialize_database",
        "__init__",
        "_estimate_recovery_time",
        "__init__"
      ],
      "classes": [
        "StateCompressionType",
        "StateVersionType",
        "CheckpointStrategy",
        "RecoveryStrategy",
        "ConsistencyLevel",
        "StateVersion",
        "CheckpointMetadata",
        "RecoveryPlan",
        "DistributedLockInfo",
        "StateCompressionEngine",
        "StateVersionManager",
        "DistributedLockManager",
        "AdvancedCheckpointManager",
        "WorkflowStateOrchestrator"
      ],
      "test_files": [
        "test_langgraph_workflow_state_management_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 904,
        "lines_covered": 0,
        "lines_missing": 904,
        "coverage_percentage": 0.0,
        "complexity_score": 12.18014329580348,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 78.26086956521739,
        "type_hints": 100,
        "error_handling": 100,
        "function_complexity": 30.0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/language.py": {
      "file_path": "sources/language.py",
      "functions": [
        "__init__",
        "load_model",
        "detect_language",
        "translate",
        "detect_emotion",
        "analyze"
      ],
      "classes": [
        "LanguageUtility"
      ],
      "test_files": [
        "supervisor_worker_3tier_memory_performance_test.py",
        "test_enhanced_voice_pipeline_system.py",
        "test_graphiti_temporal_knowledge_integration.py",
        "test_langchain_vector_knowledge.py",
        "test_langgraph_framework_decision_engine_comprehensive.py",
        "test_langgraph_task_analysis_routing_comprehensive.py",
        "test_openai_tier3_graphiti_integration_comprehensive.py",
        "test_streaming_response_integration.py",
        "test_tool_ecosystem_integration.py",
        "tests/test_tools_parsing.py",
        "venv/lib/python3.13/site-packages/llvmlite/tests/test_binding.py",
        "venv/lib/python3.13/site-packages/llvmlite/tests/test_ir.py",
        "venv/lib/python3.13/site-packages/nltk/test/unit/test_distance.py",
        "venv/lib/python3.13/site-packages/nltk/test/unit/test_tokenize.py",
        "venv/lib/python3.13/site-packages/nltk/test/unit/translate/test_stack_decoder.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_lang.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_debuginfo.py",
        "venv/lib/python3.13/site-packages/numpy/f2py/tests/test_symbolic.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_extension.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_config_discovery.py",
        "venv/lib/python3.13/site-packages/sympy/codegen/tests/test_algorithms.py",
        "venv/lib/python3.13/site-packages/sympy/codegen/tests/test_applications.py",
        "venv/lib/python3.13/site-packages/sympy/codegen/tests/test_fnodes.py",
        "venv/lib/python3.13/site-packages/sympy/codegen/tests/test_rewriting.py",
        "venv/lib/python3.13/site-packages/sympy/external/tests/test_autowrap.py",
        "venv/lib/python3.13/site-packages/sympy/external/tests/test_codegen.py",
        "venv/lib/python3.13/site-packages/sympy/printing/tests/test_c.py",
        "venv/lib/python3.13/site-packages/sympy/printing/tests/test_cxx.py",
        "venv/lib/python3.13/site-packages/sympy/printing/tests/test_precedence.py",
        "venv/lib/python3.13/site-packages/sympy/utilities/tests/test_autowrap.py",
        "venv/lib/python3.13/site-packages/sympy/utilities/tests/test_codegen.py",
        "venv/lib/python3.13/site-packages/sympy/utilities/tests/test_codegen_julia.py",
        "venv/lib/python3.13/site-packages/sympy/utilities/tests/test_codegen_octave.py",
        "venv/lib/python3.13/site-packages/sympy/utilities/tests/test_codegen_rust.py",
        "venv/lib/python3.13/site-packages/websocket/tests/test_abnf.py",
        "venv/lib/python3.13/site-packages/websocket/tests/test_app.py",
        "venv/lib/python3.13/site-packages/websocket/tests/test_cookiejar.py",
        "venv/lib/python3.13/site-packages/websocket/tests/test_http.py",
        "venv/lib/python3.13/site-packages/websocket/tests/test_url.py",
        "venv/lib/python3.13/site-packages/websocket/tests/test_websocket.py"
      ],
      "coverage": {
        "lines_total": 119,
        "lines_covered": 0,
        "lines_missing": 119,
        "coverage_percentage": 0.0,
        "complexity_score": 18.487394957983195,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 85.71428571428571,
        "type_hints": 54.166666666666664,
        "error_handling": 25.0,
        "function_complexity": 9.333333333333329
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "sources/llm_provider.py": {
      "file_path": "sources/llm_provider.py",
      "functions": [
        "__init__",
        "get_model_name",
        "get_api_key",
        "respond",
        "is_ip_online",
        "server_fn",
        "ollama_fn",
        "huggingface_fn",
        "openai_fn",
        "anthropic_fn",
        "google_fn",
        "together_fn",
        "deepseek_fn",
        "lm_studio_fn",
        "openrouter_fn",
        "dsk_deepseek",
        "test_fn"
      ],
      "classes": [
        "Provider"
      ],
      "test_files": [
        "quick_vector_knowledge_test.py",
        "test_apple_silicon_langchain_tools.py",
        "test_apple_silicon_langchain_tools_comprehensive.py",
        "test_enhanced_voice_pipeline_system.py",
        "test_graphiti_temporal_knowledge_integration.py",
        "test_integration_concepts.py",
        "test_langchain_vector_knowledge.py",
        "test_langchain_video_workflows.py",
        "test_langgraph_state_coordination.py",
        "test_mlacs_langchain_integration_hub.py",
        "test_production_mlacs_langchain_integration_hub.py",
        "test_production_mlacs_simple.py",
        "tests/test_provider.py"
      ],
      "coverage": {
        "lines_total": 387,
        "lines_covered": 328,
        "lines_missing": 59,
        "coverage_percentage": 85.0,
        "complexity_score": 25.96401028277635,
        "test_score": 0.85,
        "tdd_compliance": true
      },
      "code_quality": {
        "docstring_coverage": 77.77777777777779,
        "type_hints": 5.88235294117647,
        "error_handling": 41.17647058823529,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "sources/logger.py": {
      "file_path": "sources/logger.py",
      "functions": [
        "__init__",
        "create_logging",
        "create_folder",
        "log",
        "info",
        "error",
        "warning"
      ],
      "classes": [
        "Logger"
      ],
      "test_files": [
        "_macOS/tests/test_endpoints.py",
        "e2e_view_navigation_test.py",
        "focused_supervisor_worker_memory_performance_test.py",
        "fully_headless_e2e_test.py",
        "quick_apple_silicon_langchain_test.py",
        "quick_langgraph_state_coordination_test.py",
        "scripts/test_coverage_analyzer.py",
        "supervisor_worker_3tier_memory_performance_test.py",
        "test_apple_silicon_langchain_tools.py",
        "test_apple_silicon_langchain_tools_comprehensive.py",
        "test_comprehensive_mlacs_headless_framework.py",
        "test_enhanced_voice_pipeline_system.py",
        "test_graphiti_temporal_knowledge_integration.py",
        "test_langchain_video_workflows_comprehensive.py",
        "test_langgraph_advanced_coordination_patterns_comprehensive.py",
        "test_langgraph_complex_workflow_comprehensive.py",
        "test_langgraph_framework_coordinator.py",
        "test_langgraph_framework_decision_engine_comprehensive.py",
        "test_langgraph_intelligent_framework_router_comprehensive.py",
        "test_langgraph_state_coordination.py",
        "test_langgraph_state_coordination_comprehensive.py",
        "test_langgraph_task_analysis_routing_comprehensive.py",
        "test_langgraph_task_analysis_routing_comprehensive_fixed.py",
        "test_langgraph_tier_management_comprehensive.py",
        "test_mlacs_langchain_integration_hub.py",
        "test_mlacs_langchain_integration_hub_comprehensive.py",
        "test_phase1_optimization_comprehensive.py",
        "test_production_mlacs_langchain_integration_hub.py",
        "test_production_mlacs_simple.py",
        "test_production_phase1_optimization.py",
        "test_production_video_workflows.py",
        "test_pydantic_ai_advanced_memory_integration.py",
        "test_pydantic_ai_advanced_memory_integration_production.py",
        "test_pydantic_ai_core_integration_comprehensive.py",
        "test_pydantic_ai_enterprise_workflow_plugins.py",
        "test_pydantic_ai_enterprise_workflow_plugins_production.py",
        "test_pydantic_ai_production_communication_workflows.py",
        "test_pydantic_ai_production_communication_workflows_production.py",
        "test_pydantic_ai_real_time_optimization_engine.py",
        "test_voice_integration_pipeline.py",
        "test_voice_pipeline_integration.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_logger.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudadrv/test_ptds.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_jit_module.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_ndarray_subclasses.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_ssa.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_tracing.py",
        "venv/lib/python3.13/site-packages/pooch/tests/test_core.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_logging.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_manifest.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_sdist.py",
        "venv/lib/python3.13/site-packages/sympy/printing/tests/test_aesaracode.py",
        "venv/lib/python3.13/site-packages/sympy/printing/tests/test_theanocode.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/ddp_under_dist_autograd_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/distributed_test.py"
      ],
      "coverage": {
        "lines_total": 49,
        "lines_covered": 0,
        "lines_missing": 49,
        "coverage_percentage": 0.0,
        "complexity_score": 42.857142857142854,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 12.5,
        "type_hints": 0.0,
        "error_handling": 7.142857142857142,
        "function_complexity": 59.285714285714285
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "sources/mcp_integration_system.py": {
      "file_path": "sources/mcp_integration_system.py",
      "functions": [
        "__init__",
        "_load_configuration",
        "_create_default_configuration",
        "_get_known_server_tools",
        "_categorize_tool",
        "stop_server",
        "stop_all_servers",
        "get_system_status",
        "get_available_tools",
        "cleanup"
      ],
      "classes": [
        "MCPToolType",
        "MCPConnectionStatus",
        "MCPServerConfig",
        "MCPTool",
        "MCPServerStatus",
        "MCPIntegrationSystem"
      ],
      "test_files": [
        "test_tool_ecosystem_integration.py"
      ],
      "coverage": {
        "lines_total": 537,
        "lines_covered": 0,
        "lines_missing": 537,
        "coverage_percentage": 0.0,
        "complexity_score": 10.526315789473683,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 93.75,
        "type_hints": 62.5,
        "error_handling": 35.0,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/memory.py": {
      "file_path": "sources/memory.py",
      "functions": [
        "__init__",
        "get_ideal_ctx",
        "download_model",
        "get_filename",
        "save_memory",
        "find_last_session_path",
        "save_json_file",
        "load_json_file",
        "load_memory",
        "reset",
        "push",
        "clear",
        "clear_section",
        "get",
        "get_cuda_device",
        "summarize",
        "compress",
        "trim_text_to_max_ctx",
        "compress_text_to_max_ctx",
        "extract_number_before_b"
      ],
      "classes": [
        "Memory"
      ],
      "test_files": [
        "_Sandbox/Environment/TestDrivenFeatures/ContentViewRefactoring_TDD/01_WriteTests/test_contentviewrefactoring_integration.py",
        "comprehensive_memory_system_integration_test.py",
        "focused_supervisor_worker_memory_performance_test.py",
        "quick_apple_silicon_langchain_test.py",
        "quick_langgraph_state_coordination_test.py",
        "quick_vector_knowledge_test.py",
        "supervisor_worker_3tier_memory_performance_test.py",
        "test_apple_silicon_langchain_tools.py",
        "test_apple_silicon_langchain_tools_comprehensive.py",
        "test_benchmarking_suite_simple.py",
        "test_graphiti_temporal_knowledge_integration.py",
        "test_integration_concepts.py",
        "test_langchain_integration.py",
        "test_langchain_vector_knowledge.py",
        "test_langchain_video_workflows.py",
        "test_langchain_video_workflows_comprehensive.py",
        "test_langgraph_advanced_coordination_patterns_comprehensive.py",
        "test_langgraph_apple_silicon_optimization_comprehensive.py",
        "test_langgraph_complex_workflow_comprehensive.py",
        "test_langgraph_decision_optimization_comprehensive.py",
        "test_langgraph_dynamic_complexity_routing_comprehensive.py",
        "test_langgraph_framework_coordinator.py",
        "test_langgraph_framework_decision_engine_comprehensive.py",
        "test_langgraph_framework_performance_prediction_comprehensive.py",
        "test_langgraph_framework_selection_criteria_comprehensive.py",
        "test_langgraph_hybrid_framework_coordination_comprehensive.py",
        "test_langgraph_intelligent_framework_router_comprehensive.py",
        "test_langgraph_memory_aware_state_creation_comprehensive.py",
        "test_langgraph_multi_tier_memory_comprehensive.py",
        "test_langgraph_neural_engine_gpu_acceleration_comprehensive.py",
        "test_langgraph_parallel_node_execution_comprehensive.py",
        "test_langgraph_performance_analytics_comprehensive.py",
        "test_langgraph_state_coordination_comprehensive.py",
        "test_langgraph_task_analysis_routing_comprehensive.py",
        "test_langgraph_task_analysis_routing_comprehensive_fixed.py",
        "test_langgraph_tier_management_comprehensive.py",
        "test_langgraph_video_generation_workflow_coordination_comprehensive.py",
        "test_langgraph_workflow_state_management_comprehensive.py",
        "test_mlacs_langchain_integration_hub.py",
        "test_mlacs_langchain_integration_hub_comprehensive.py",
        "test_phase1_optimization_comprehensive.py",
        "test_production_mlacs_langchain_integration_hub.py",
        "test_production_video_workflows.py",
        "test_pydantic_ai_advanced_memory_integration.py",
        "test_pydantic_ai_advanced_memory_integration_production.py",
        "test_pydantic_ai_core_integration_comprehensive.py",
        "test_pydantic_ai_enterprise_workflow_plugins.py",
        "test_pydantic_ai_enterprise_workflow_plugins_production.py",
        "test_pydantic_ai_langchain_langgraph_bridge.py",
        "test_pydantic_ai_langchain_langgraph_bridge_production.py",
        "test_pydantic_ai_production_communication_workflows.py",
        "test_pydantic_ai_production_communication_workflows_production.py",
        "test_pydantic_ai_real_time_optimization_engine.py",
        "test_pydantic_ai_tier_aware_agent_factory.py",
        "test_tool_ecosystem_integration.py",
        "tests/test_memory.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_func_inspect.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_hashing.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_memmapping.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_memory.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_memory_async.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_numpy_pickle.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_parallel.py",
        "venv/lib/python3.13/site-packages/llvmlite/tests/test_binding.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_hybrid.py",
        "venv/lib/python3.13/site-packages/networkx/classes/tests/test_graph.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudadrv/test_context_stack.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudadrv/test_cuda_driver.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudadrv/test_cuda_memory.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudadrv/test_deallocations.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudadrv/test_emm_plugins.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudadrv/test_host_alloc.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudadrv/test_linker.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudadrv/test_managed_alloc.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_atomics.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_cuda_array_interface.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_dispatcher.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_gufunc_scalar.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_libdevice.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_record_dtype.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_sm.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_sync.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/doc_examples/test_cg.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/doc_examples/test_matmul.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/doc_examples/test_reduction.py",
        "venv/lib/python3.13/site-packages/numba/tests/npyufunc/test_gufunc.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_array_iterators.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_array_manipulation.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_array_methods.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_boundscheck.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_buffer_protocol.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_cgutils.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_codegen.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_conversion.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_debuginfo.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_dictobject.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_dyn_array.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_fancy_indexing.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_gdb_dwarf.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_generators.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_linalg.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_lists.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_nrt.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_parfors.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_random.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_record_dtype.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_ssa.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_stencils.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_sysinfo.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_typeof.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_api.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_array_coercion.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_array_interface.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_casting_unittests.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_dlpack.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_dtype.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_einsum.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_indexing.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_mem_overlap.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_mem_policy.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_multiarray.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_nditer.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_numeric.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_regression.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_scalar_ctors.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_scalarbuffer.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_scalarmath.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_shape_base.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_simd.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_stringdtype.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_strings.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_ufunc.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_umath.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_unicode.py",
        "venv/lib/python3.13/site-packages/numpy/f2py/tests/test_array_from_pyobj.py",
        "venv/lib/python3.13/site-packages/numpy/f2py/tests/test_f2py2e.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_arraypad.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_format.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_histograms.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_io.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_recfunctions.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_shape_base.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_stride_tricks.py",
        "venv/lib/python3.13/site-packages/numpy/linalg/tests/test_linalg.py",
        "venv/lib/python3.13/site-packages/numpy/ma/tests/test_core.py",
        "venv/lib/python3.13/site-packages/numpy/matrixlib/tests/test_defmatrix.py",
        "venv/lib/python3.13/site-packages/numpy/random/tests/test_random.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_aix.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_bsd.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_contracts.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_memleaks.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_osx.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_posix.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_process.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_process_all.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_scripts.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_sunos.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_system.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_unicode.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_windows.py",
        "venv/lib/python3.13/site-packages/pyflakes/test/test_undefined_names.py",
        "venv/lib/python3.13/site-packages/regex/test_regex.py",
        "venv/lib/python3.13/site-packages/scipy/_lib/tests/test_array_api.py",
        "venv/lib/python3.13/site-packages/scipy/cluster/tests/test_hierarchy.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_fitpack.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_interpnd.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_interpolate.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_rbfinterp.py",
        "venv/lib/python3.13/site-packages/scipy/linalg/tests/test_basic.py",
        "venv/lib/python3.13/site-packages/scipy/linalg/tests/test_blas.py",
        "venv/lib/python3.13/site-packages/scipy/linalg/tests/test_decomp.py",
        "venv/lib/python3.13/site-packages/scipy/linalg/tests/test_fblas.py",
        "venv/lib/python3.13/site-packages/scipy/ndimage/tests/test_filters.py",
        "venv/lib/python3.13/site-packages/scipy/ndimage/tests/test_interpolation.py",
        "venv/lib/python3.13/site-packages/scipy/ndimage/tests/test_morphology.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_optimize.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_signaltools.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/linalg/_dsolve/tests/test_linsolve.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/linalg/_eigen/arpack/tests/test_arpack.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/tests/test_base.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/tests/test_construct.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/tests/test_sparsetools.py",
        "venv/lib/python3.13/site-packages/scipy/spatial/tests/test_hausdorff.py",
        "venv/lib/python3.13/site-packages/scipy/spatial/tests/test_kdtree.py",
        "venv/lib/python3.13/site-packages/scipy/spatial/tests/test_spherical_voronoi.py",
        "venv/lib/python3.13/site-packages/scipy/special/tests/test_sf_error.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_qmc.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_stats.py",
        "venv/lib/python3.13/site-packages/sklearn/_loss/tests/test_link.py",
        "venv/lib/python3.13/site-packages/sklearn/_loss/tests/test_loss.py",
        "venv/lib/python3.13/site-packages/sklearn/cluster/tests/test_hierarchical.py",
        "venv/lib/python3.13/site-packages/sklearn/cluster/tests/test_k_means.py",
        "venv/lib/python3.13/site-packages/sklearn/datasets/tests/test_openml.py",
        "venv/lib/python3.13/site-packages/sklearn/datasets/tests/test_svmlight_format.py",
        "venv/lib/python3.13/site-packages/sklearn/decomposition/tests/test_dict_learning.py",
        "venv/lib/python3.13/site-packages/sklearn/ensemble/_hist_gradient_boosting/tests/test_bitset.py",
        "venv/lib/python3.13/site-packages/sklearn/ensemble/_hist_gradient_boosting/tests/test_predictor.py",
        "venv/lib/python3.13/site-packages/sklearn/ensemble/tests/test_forest.py",
        "venv/lib/python3.13/site-packages/sklearn/ensemble/tests/test_gradient_boosting.py",
        "venv/lib/python3.13/site-packages/sklearn/feature_extraction/tests/test_dict_vectorizer.py",
        "venv/lib/python3.13/site-packages/sklearn/impute/tests/test_knn.py",
        "venv/lib/python3.13/site-packages/sklearn/inspection/tests/test_permutation_importance.py",
        "venv/lib/python3.13/site-packages/sklearn/linear_model/tests/test_base.py",
        "venv/lib/python3.13/site-packages/sklearn/linear_model/tests/test_least_angle.py",
        "venv/lib/python3.13/site-packages/sklearn/linear_model/tests/test_linear_loss.py",
        "venv/lib/python3.13/site-packages/sklearn/linear_model/tests/test_sag.py",
        "venv/lib/python3.13/site-packages/sklearn/linear_model/tests/test_sgd.py",
        "venv/lib/python3.13/site-packages/sklearn/metrics/tests/test_pairwise.py",
        "venv/lib/python3.13/site-packages/sklearn/neighbors/tests/test_kd_tree.py",
        "venv/lib/python3.13/site-packages/sklearn/tests/test_config.py",
        "venv/lib/python3.13/site-packages/sklearn/tests/test_dummy.py",
        "venv/lib/python3.13/site-packages/sklearn/tests/test_pipeline.py",
        "venv/lib/python3.13/site-packages/sklearn/tree/tests/test_tree.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_chunking.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_estimator_checks.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_parallel.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_pprint.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_validation.py",
        "venv/lib/python3.13/site-packages/sympy/core/tests/test_singleton.py",
        "venv/lib/python3.13/site-packages/sympy/stats/tests/test_continuous_rv.py",
        "venv/lib/python3.13/site-packages/sympy/utilities/tests/test_enumerative.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/distributed_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/nn/api/remote_module_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/rpc/rpc_test.py",
        "venv/lib/python3.13/site-packages/trio/_core/_tests/test_guest_mode.py",
        "venv/lib/python3.13/site-packages/trio/_core/_tests/test_windows.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_channel.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_highlevel_serve_listeners.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_highlevel_socket.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_ssl.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_sync.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_testing.py"
      ],
      "coverage": {
        "lines_total": 264,
        "lines_covered": 224,
        "lines_missing": 40,
        "coverage_percentage": 85.0,
        "complexity_score": 26.765799256505574,
        "test_score": 0.85,
        "tdd_compliance": true
      },
      "code_quality": {
        "docstring_coverage": 76.19047619047619,
        "type_hints": 41.25,
        "error_handling": 5.0,
        "function_complexity": 12.349999999999994
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "sources/mlacs_integration_hub.py": {
      "file_path": "sources/mlacs_integration_hub.py",
      "functions": [
        "__init__",
        "_initialize_mlacs_components",
        "_create_llm_profile",
        "_get_thought_sharing_summary",
        "_calculate_collaboration_quality",
        "_extract_video_participating_llms",
        "_update_system_metrics",
        "create_task_request",
        "get_task_status",
        "get_system_status"
      ],
      "classes": [
        "MLACSTaskType",
        "CoordinationStrategy",
        "PerformanceTarget",
        "MLACSTaskRequest",
        "MLACSTaskResult",
        "MLACSIntegrationHub"
      ],
      "test_files": [
        "test_mlacs_langchain_integration_hub.py"
      ],
      "coverage": {
        "lines_total": 743,
        "lines_covered": 631,
        "lines_missing": 112,
        "coverage_percentage": 85.0,
        "complexity_score": 8.1437125748503,
        "test_score": 0.85,
        "tdd_compliance": true
      },
      "code_quality": {
        "docstring_coverage": 100.0,
        "type_hints": 100.0,
        "error_handling": 10.0,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/mlacs_langchain_integration_hub.py": {
      "file_path": "sources/mlacs_langchain_integration_hub.py",
      "functions": [
        "__init__",
        "_start_workflow_processor",
        "_workflow_processor_worker",
        "_get_priority_value",
        "_synthesize_multi_llm_results",
        "_extract_consensus_points",
        "_extract_divergent_perspectives",
        "_create_synthesized_response",
        "_calculate_multi_llm_quality_score",
        "_select_technical_llm",
        "_compile_technical_report",
        "_extract_video_requirements",
        "_count_video_llm_calls",
        "_calculate_video_quality_score",
        "_analyze_system_optimization",
        "_update_system_metrics",
        "get_workflow_status",
        "get_system_status",
        "list_available_workflows",
        "get_component_status",
        "shutdown",
        "__init__",
        "get_integration_status",
        "shutdown"
      ],
      "classes": [
        "WorkflowType",
        "IntegrationMode",
        "WorkflowPriority",
        "WorkflowRequest",
        "WorkflowResult",
        "MLACSLangChainWorkflowOrchestrator",
        "MLACSLangChainIntegrationHub",
        "Chain",
        "Runnable",
        "BaseCallbackHandler",
        "Tool",
        "AgentExecutor"
      ],
      "test_files": [
        "test_langchain_integration.py",
        "test_mlacs_langchain_integration_hub.py",
        "test_mlacs_langchain_integration_hub_comprehensive.py",
        "test_production_mlacs_langchain_integration_hub.py"
      ],
      "coverage": {
        "lines_total": 1029,
        "lines_covered": 514,
        "lines_missing": 515,
        "coverage_percentage": 50.0,
        "complexity_score": 11.723534558180228,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 80.55555555555556,
        "type_hints": 58.333333333333336,
        "error_handling": 22.916666666666664,
        "function_complexity": 5.416666666666671
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/mlacs_phase1_optimization_implementation_production.py": {
      "file_path": "sources/mlacs_phase1_optimization_implementation_production.py",
      "functions": [
        "__init__",
        "_start_cleanup_thread",
        "_cleanup_worker",
        "_cleanup_expired",
        "_enforce_memory_limit",
        "_calculate_size",
        "get",
        "set",
        "delete",
        "clear_by_tags",
        "get_statistics",
        "warm_cache",
        "shutdown",
        "__init__",
        "_initialize_pool",
        "get_connection",
        "return_connection",
        "get_stats",
        "close_all",
        "__init__",
        "start_monitoring",
        "stop_monitoring",
        "_monitoring_worker",
        "_collect_system_metrics",
        "record_metric",
        "_check_alerts",
        "get_dashboard_data",
        "__init__",
        "_initialize_frameworks",
        "_initialize_database_pools",
        "_warm_cache",
        "start_optimization",
        "_collect_baseline_metrics",
        "_apply_caching_optimizations",
        "_apply_database_optimizations",
        "_apply_monitoring_enhancements",
        "_collect_optimized_metrics",
        "_calculate_optimization_impact",
        "get_optimization_report",
        "get_system_status",
        "shutdown",
        "create_optimization_engine"
      ],
      "classes": [
        "CacheEntry",
        "CacheStatistics",
        "OptimizationMetric",
        "ProductionIntelligentCache",
        "ProductionDatabaseConnectionPool",
        "ProductionEnhancedMonitoringDashboard",
        "ProductionMLACSPhase1OptimizationEngine",
        "ProductionMLACSPhase1OptimizationEngineFactory"
      ],
      "test_files": [
        "test_production_phase1_optimization.py"
      ],
      "coverage": {
        "lines_total": 744,
        "lines_covered": 0,
        "lines_missing": 744,
        "coverage_percentage": 0.0,
        "complexity_score": 18.541409147095177,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 92.0,
        "type_hints": 23.214285714285715,
        "error_handling": 28.57142857142857,
        "function_complexity": 5.833333333333329
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/multi_agent_coordinator.py": {
      "file_path": "sources/multi_agent_coordinator.py",
      "functions": [
        "__init__",
        "register_agent",
        "select_primary_agent",
        "select_peer_reviewers",
        "_build_consensus",
        "_calculate_confidence",
        "_parse_review_response",
        "get_execution_stats",
        "__init__",
        "process"
      ],
      "classes": [
        "AgentRole",
        "TaskPriority",
        "ExecutionStatus",
        "AgentResult",
        "PeerReview",
        "ConsensusResult",
        "MultiAgentCoordinator",
        "MockAgent"
      ],
      "test_files": [
        "comprehensive_memory_system_integration_test.py"
      ],
      "coverage": {
        "lines_total": 403,
        "lines_covered": 0,
        "lines_missing": 403,
        "coverage_percentage": 0.0,
        "complexity_score": 14.027149321266968,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 77.77777777777779,
        "type_hints": 77.5,
        "error_handling": 25.0,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/multi_llm_orchestration_engine.py": {
      "file_path": "sources/multi_llm_orchestration_engine.py",
      "functions": [
        "get_success_rate",
        "get_efficiency_score",
        "__init__",
        "analyze_task",
        "__init__",
        "get_available_instances",
        "get_instance_stats",
        "__init__",
        "analyze_task_requirements",
        "select_optimal_instances",
        "get_system_status",
        "pretty_print",
        "animate_thinking"
      ],
      "classes": [
        "LLMCapability",
        "TaskComplexity",
        "CollaborationMode",
        "LLMInstanceStatus",
        "LLMInstance",
        "TaskRequest",
        "CoordinationSession",
        "TaskComplexityAnalyzer",
        "LLMInstanceManager",
        "MultiLLMOrchestrationEngine"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 615,
        "lines_covered": 522,
        "lines_missing": 93,
        "coverage_percentage": 85.0,
        "complexity_score": 10.090361445783133,
        "test_score": 0.85,
        "tdd_compliance": true
      },
      "code_quality": {
        "docstring_coverage": 78.26086956521739,
        "type_hints": 75.0,
        "error_handling": 30.76923076923077,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/openai_multi_agent_memory_system.py": {
      "file_path": "sources/openai_multi_agent_memory_system.py",
      "functions": [
        "__init__",
        "__init__",
        "__init__",
        "_cosine_similarity",
        "__init__",
        "_initialize_database",
        "_extract_session_metadata",
        "_filter_session_by_context_type",
        "__init__",
        "_initialize_database",
        "__init__",
        "__init__",
        "__init__",
        "_build_memory_aware_instructions",
        "_get_memory_enhanced_tools",
        "_determine_required_roles",
        "_determine_memory_tiers",
        "__init__",
        "_determine_optimal_cores"
      ],
      "classes": [
        "MemoryTier",
        "ContextType",
        "AgentRole",
        "MemoryData",
        "ConversationTurn",
        "SessionState",
        "Knowledge",
        "UnifiedMemoryPool",
        "MetalEmbeddingCache",
        "InMemoryShortTermStorage",
        "MediumTermSessionStorage",
        "LongTermPersistentStorage",
        "ThreeTierMemorySystem",
        "MemoryTierCoordinator",
        "OpenAIMultiAgentCoordinator",
        "AppleSiliconOptimizer"
      ],
      "test_files": [
        "comprehensive_memory_system_integration_test.py"
      ],
      "coverage": {
        "lines_total": 940,
        "lines_covered": 0,
        "lines_missing": 940,
        "coverage_percentage": 0.0,
        "complexity_score": 9.47680157946693,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 74.28571428571429,
        "type_hints": 97.36842105263158,
        "error_handling": 26.31578947368421,
        "function_complexity": 37.63157894736842
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/openai_tier3_graphiti_integration_sandbox.py": {
      "file_path": "sources/openai_tier3_graphiti_integration_sandbox.py",
      "functions": [
        "to_dict",
        "from_dict",
        "to_dict",
        "from_dict",
        "__init__",
        "_simple_hash_embedding",
        "calculate_similarity",
        "__init__",
        "_initialize_database",
        "__init__",
        "__init__",
        "_initialize_database"
      ],
      "classes": [
        "GraphNodeType",
        "RelationshipType",
        "GraphNode",
        "GraphRelationship",
        "EmbeddingService",
        "GraphitiFallbackStorage",
        "Tier3GraphitiIntegration",
        "EnhancedLongTermPersistentStorage"
      ],
      "test_files": [
        "test_openai_tier3_graphiti_integration_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 828,
        "lines_covered": 0,
        "lines_missing": 828,
        "coverage_percentage": 0.0,
        "complexity_score": 8.122941822173436,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 80.0,
        "type_hints": 100,
        "error_handling": 33.33333333333333,
        "function_complexity": 9.333333333333329
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/production_voice_pipeline.py": {
      "file_path": "sources/production_voice_pipeline.py",
      "functions": [
        "__init__",
        "_initialize_audio_components",
        "_initialize_asr_models",
        "_initialize_command_patterns",
        "_start_audio_capture",
        "_audio_callback",
        "_capture_audio_loop",
        "_start_processing_threads",
        "_vad_processing_loop",
        "_audio_processing_loop",
        "_perform_voice_activity_detection",
        "_extract_spectral_features",
        "_apply_noise_reduction",
        "_apply_noise_gate",
        "_classify_voice_command",
        "_test_audio_device",
        "_get_optimal_device",
        "get_performance_report"
      ],
      "classes": [
        "VoiceActivityState",
        "AudioProcessingMode",
        "NoiseReductionLevel",
        "VoiceActivityResult",
        "StreamingTranscriptionResult",
        "AudioSegment",
        "VoicePipelineConfig",
        "ProductionVoicePipeline"
      ],
      "test_files": [
        "test_voice_integration_pipeline.py"
      ],
      "coverage": {
        "lines_total": 710,
        "lines_covered": 0,
        "lines_missing": 710,
        "coverage_percentage": 0.0,
        "complexity_score": 15.298507462686567,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 96.15384615384616,
        "type_hints": 34.72222222222222,
        "error_handling": 63.888888888888886,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/pydantic_ai_advanced_memory_integration.py": {
      "file_path": "sources/pydantic_ai_advanced_memory_integration.py",
      "functions": [
        "timer_decorator",
        "demo_advanced_memory_integration",
        "wrapper",
        "__init__",
        "_calculate_checksum",
        "verify_integrity",
        "__init__",
        "__init__",
        "_initialize_system",
        "_initialize_database",
        "_initialize_framework_bridges",
        "_create_pydantic_ai_bridge",
        "_create_langchain_bridge",
        "_create_langgraph_bridge",
        "_create_native_bridge",
        "store_memory",
        "retrieve_memory",
        "search_memories",
        "create_memory_cluster",
        "get_cross_framework_memory",
        "_pydantic_ai_memory_interface",
        "_convert_to_pydantic_ai_state",
        "_retrieve_for_pydantic_ai",
        "_convert_to_langchain_state",
        "_retrieve_for_langchain",
        "_convert_to_langgraph_state",
        "_retrieve_for_langgraph",
        "_convert_to_native_state",
        "_retrieve_for_native",
        "_compress_content",
        "_decompress_content",
        "_update_knowledge_graph",
        "_persist_memory_entry",
        "_persist_memory_cluster",
        "_load_memory_from_db",
        "_load_existing_data",
        "_start_maintenance_thread",
        "_cleanup_expired_memories",
        "_optimize_cache",
        "_update_metrics",
        "get_system_status",
        "create_memory_system",
        "Field",
        "validator",
        "maintenance_loop",
        "__init__",
        "dict",
        "json",
        "decorator",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__"
      ],
      "classes": [
        "MemoryType",
        "MemoryPriority",
        "MemoryStatus",
        "CrossFrameworkBridge",
        "MemoryEntry",
        "MemoryCluster",
        "MemoryGraph",
        "MemoryMetrics",
        "AdvancedMemoryIntegrationSystem",
        "MemoryIntegrationFactory",
        "BaseModel",
        "ValidationError",
        "Agent",
        "BaseMemory",
        "ConversationBufferMemory",
        "ConversationSummaryMemory",
        "MessagesState",
        "StateGraph"
      ],
      "test_files": [
        "test_pydantic_ai_advanced_memory_integration.py",
        "test_pydantic_ai_advanced_memory_integration_production.py"
      ],
      "coverage": {
        "lines_total": 1031,
        "lines_covered": 515,
        "lines_missing": 516,
        "coverage_percentage": 50.0,
        "complexity_score": 16.976127320954905,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 64.38356164383562,
        "type_hints": 20.454545454545457,
        "error_handling": 20.909090909090907,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/pydantic_ai_advanced_memory_integration_production.py": {
      "file_path": "sources/pydantic_ai_advanced_memory_integration_production.py",
      "functions": [
        "timer_decorator",
        "demo_advanced_memory_integration",
        "wrapper",
        "__init__",
        "_calculate_checksum",
        "verify_integrity",
        "__init__",
        "__init__",
        "_initialize_system",
        "_initialize_database",
        "_initialize_framework_bridges",
        "_create_pydantic_ai_bridge",
        "_create_langchain_bridge",
        "_create_langgraph_bridge",
        "_create_native_bridge",
        "store_memory",
        "retrieve_memory",
        "search_memories",
        "create_memory_cluster",
        "get_cross_framework_memory",
        "_pydantic_ai_memory_interface",
        "_convert_to_pydantic_ai_state",
        "_retrieve_for_pydantic_ai",
        "_convert_to_langchain_state",
        "_retrieve_for_langchain",
        "_convert_to_langgraph_state",
        "_retrieve_for_langgraph",
        "_convert_to_native_state",
        "_retrieve_for_native",
        "_compress_content",
        "_decompress_content",
        "_update_knowledge_graph",
        "_persist_memory_entry",
        "_persist_memory_cluster",
        "_load_memory_from_db",
        "_load_existing_data",
        "_start_maintenance_thread",
        "_cleanup_expired_memories",
        "_optimize_cache",
        "_update_metrics",
        "get_system_status",
        "create_memory_system",
        "Field",
        "validator",
        "maintenance_loop",
        "__init__",
        "dict",
        "json",
        "decorator",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__"
      ],
      "classes": [
        "MemoryType",
        "MemoryPriority",
        "MemoryStatus",
        "CrossFrameworkBridge",
        "MemoryEntry",
        "MemoryCluster",
        "MemoryGraph",
        "MemoryMetrics",
        "AdvancedMemoryIntegrationSystem",
        "MemoryIntegrationFactory",
        "BaseModel",
        "ValidationError",
        "Agent",
        "BaseMemory",
        "ConversationBufferMemory",
        "ConversationSummaryMemory",
        "MessagesState",
        "StateGraph"
      ],
      "test_files": [
        "test_pydantic_ai_advanced_memory_integration_production.py"
      ],
      "coverage": {
        "lines_total": 1030,
        "lines_covered": 515,
        "lines_missing": 515,
        "coverage_percentage": 50.0,
        "complexity_score": 16.991150442477874,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 64.38356164383562,
        "type_hints": 20.454545454545457,
        "error_handling": 20.909090909090907,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/pydantic_ai_communication_models.py": {
      "file_path": "sources/pydantic_ai_communication_models.py",
      "functions": [
        "__init__",
        "register_agent",
        "unregister_agent",
        "_validate_tier_permissions",
        "_update_latency_metrics",
        "get_communication_analytics",
        "cleanup",
        "__init__",
        "get_communication_analytics",
        "validate_checksum",
        "validate_broadcast_scope",
        "validate_content_type",
        "validate_message_consistency",
        "is_expired",
        "can_retry",
        "add_message",
        "get_next_message",
        "validate_participants",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "is_expired",
        "can_retry",
        "__init__",
        "add_message",
        "get_next_message",
        "__init__"
      ],
      "classes": [
        "MessagePriority",
        "MessageStatus",
        "MessageEncryption",
        "CommunicationProtocol",
        "RoutingStrategy",
        "MessageRouter",
        "TypeSafeCommunicationManager",
        "MessageMetadata",
        "MessageHeader",
        "MessagePayload",
        "TypeSafeMessage",
        "MessageQueue",
        "CommunicationChannel",
        "MessageMetadata",
        "MessageHeader",
        "MessagePayload",
        "TypeSafeMessage",
        "MessageQueue",
        "CommunicationChannel",
        "MessageType"
      ],
      "test_files": [
        "test_pydantic_ai_communication_models.py"
      ],
      "coverage": {
        "lines_total": 833,
        "lines_covered": 416,
        "lines_missing": 417,
        "coverage_percentage": 50.0,
        "complexity_score": 15.056179775280897,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 50.0,
        "type_hints": 63.39285714285714,
        "error_handling": 30.357142857142854,
        "function_complexity": 11.285714285714292
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/pydantic_ai_core_integration.py": {
      "file_path": "sources/pydantic_ai_core_integration.py",
      "functions": [
        "json_serializer",
        "__init__",
        "init_database",
        "_initialize_default_agents",
        "_store_agent_config",
        "_background_monitoring",
        "__init__",
        "__init__",
        "_calculate_confidence",
        "_estimate_token_usage",
        "Field",
        "__init__",
        "dict"
      ],
      "classes": [
        "ModelProvider",
        "AgentRole",
        "ValidationLevel",
        "AgentConfig",
        "TaskInput",
        "TaskOutput",
        "ValidationResult",
        "PydanticAICore",
        "AgentManager",
        "ValidationEngine",
        "MemoryManager",
        "ResponseHandler",
        "Config",
        "Config",
        "Config",
        "BaseModel",
        "ValidationError"
      ],
      "test_files": [
        "test_pydantic_ai_core_integration.py",
        "test_pydantic_ai_core_integration_comprehensive.py"
      ],
      "coverage": {
        "lines_total": 779,
        "lines_covered": 389,
        "lines_missing": 390,
        "coverage_percentage": 50.0,
        "complexity_score": 8.085612366230679,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 63.33333333333333,
        "type_hints": 76.92307692307693,
        "error_handling": 23.076923076923077,
        "function_complexity": 17.615384615384613
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/pydantic_ai_core_integration_backup.py": {
      "file_path": "sources/pydantic_ai_core_integration_backup.py",
      "functions": [
        "__init__",
        "init_database",
        "_initialize_default_agents",
        "_store_agent_config",
        "_background_monitoring",
        "__init__",
        "__init__",
        "_calculate_confidence",
        "_estimate_token_usage",
        "Field",
        "__init__",
        "dict"
      ],
      "classes": [
        "ModelProvider",
        "AgentRole",
        "ValidationLevel",
        "AgentConfig",
        "TaskInput",
        "TaskOutput",
        "ValidationResult",
        "PydanticAICore",
        "AgentManager",
        "ValidationEngine",
        "MemoryManager",
        "ResponseHandler",
        "Config",
        "Config",
        "Config",
        "BaseModel",
        "ValidationError"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 743,
        "lines_covered": 0,
        "lines_missing": 743,
        "coverage_percentage": 0.0,
        "complexity_score": 8.229426433915211,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 62.06896551724138,
        "type_hints": 83.33333333333334,
        "error_handling": 20.833333333333336,
        "function_complexity": 14.5
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/pydantic_ai_enterprise_workflow_plugins.py": {
      "file_path": "sources/pydantic_ai_enterprise_workflow_plugins.py",
      "functions": [
        "timer_decorator",
        "async_timer_decorator",
        "wrapper",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "get_status",
        "__init__",
        "_instantiate_template",
        "__init__",
        "__init__",
        "_initialize_system",
        "_initialize_database",
        "_register_builtin_plugins",
        "_load_existing_plugins",
        "_initialize_security_scanner",
        "_initialize_compliance_validator",
        "register_plugin",
        "load_plugin",
        "create_workflow_template",
        "get_system_status",
        "_scan_plugin_security",
        "_validate_workflow_template",
        "_calculate_avg_execution_time",
        "_persist_plugin_metadata",
        "_persist_workflow_template",
        "create_plugin_system",
        "Field",
        "validator",
        "replace_params",
        "__init__",
        "dict",
        "json",
        "decorator",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "create_workflow",
        "json_serializer"
      ],
      "classes": [
        "PluginType",
        "PluginStatus",
        "IndustryDomain",
        "ComplianceStandard",
        "SecurityLevel",
        "PluginMetadata",
        "WorkflowTemplate",
        "BusinessRule",
        "ComplianceReport",
        "EnterprisePlugin",
        "WorkflowTemplatePlugin",
        "ComplianceValidatorPlugin",
        "EnterpriseWorkflowPluginSystem",
        "EnterprisePluginFactory",
        "BaseModel",
        "ValidationError",
        "WorkflowStatus",
        "MessageType",
        "WorkflowDefinition",
        "WorkflowExecution",
        "CommunicationMessage",
        "ProductionCommunicationWorkflowsSystem"
      ],
      "test_files": [
        "test_pydantic_ai_enterprise_workflow_plugins.py",
        "test_pydantic_ai_enterprise_workflow_plugins_production.py"
      ],
      "coverage": {
        "lines_total": 1142,
        "lines_covered": 571,
        "lines_missing": 571,
        "coverage_percentage": 50.0,
        "complexity_score": 11.409942950285249,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 50.0,
        "type_hints": 20.833333333333336,
        "error_handling": 28.57142857142857,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/pydantic_ai_enterprise_workflow_plugins_production.py": {
      "file_path": "sources/pydantic_ai_enterprise_workflow_plugins_production.py",
      "functions": [
        "timer_decorator",
        "async_timer_decorator",
        "Field",
        "demo_enterprise_workflow_plugins",
        "wrapper",
        "__init__",
        "dict",
        "json",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "get_status",
        "__init__",
        "_instantiate_template",
        "__init__",
        "__init__",
        "_initialize_system",
        "_initialize_database",
        "_register_builtin_plugins",
        "_load_existing_plugins",
        "_initialize_security_scanner",
        "_initialize_compliance_validator",
        "register_plugin",
        "load_plugin",
        "create_workflow_template",
        "execute_plugin_sync",
        "instantiate_workflow_template_sync",
        "get_system_status",
        "_scan_plugin_security",
        "_validate_workflow_template",
        "_calculate_avg_execution_time",
        "_persist_plugin_metadata",
        "_persist_workflow_template",
        "create_plugin_system",
        "json_serializer",
        "replace_params",
        "__init__",
        "__init__",
        "create_workflow"
      ],
      "classes": [
        "BaseModel",
        "PluginType",
        "PluginStatus",
        "IndustryDomain",
        "ComplianceStandard",
        "SecurityLevel",
        "PluginMetadata",
        "WorkflowTemplate",
        "BusinessRule",
        "ComplianceReport",
        "EnterprisePlugin",
        "WorkflowTemplatePlugin",
        "ComplianceValidatorPlugin",
        "EnterpriseWorkflowPluginSystem",
        "EnterprisePluginFactory",
        "MessageType",
        "WorkflowDefinition",
        "ProductionCommunicationWorkflowsSystem"
      ],
      "test_files": [
        "test_pydantic_ai_enterprise_workflow_plugins_production.py"
      ],
      "coverage": {
        "lines_total": 1086,
        "lines_covered": 543,
        "lines_missing": 543,
        "coverage_percentage": 50.0,
        "complexity_score": 12.905982905982908,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 59.32203389830508,
        "type_hints": 21.341463414634145,
        "error_handling": 36.58536585365854,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/pydantic_ai_langchain_langgraph_bridge.py": {
      "file_path": "sources/pydantic_ai_langchain_langgraph_bridge.py",
      "functions": [
        "timer_decorator",
        "create_langchain_langgraph_bridge",
        "wrapper",
        "__init__",
        "_initialize_framework_configs",
        "_initialize_compatibility_mappings",
        "create_bridge_workflow",
        "add_workflow_node",
        "_validate_node_config",
        "add_workflow_edge",
        "_create_node_function",
        "_create_hybrid_execution_plan",
        "_select_best_framework",
        "_translate_state",
        "_update_bridge_metrics",
        "get_bridge_analytics",
        "set_agent_factory",
        "set_communication_manager",
        "set_tool_framework",
        "get_workflow",
        "list_workflows",
        "get_execution_history",
        "Field",
        "validator",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "decorator",
        "__init__",
        "__init__",
        "add_node",
        "add_edge",
        "set_entry_point",
        "compile",
        "__init__",
        "__init__",
        "info",
        "error",
        "warning"
      ],
      "classes": [
        "FrameworkType",
        "BridgeMode",
        "WorkflowState",
        "BridgeCapability",
        "LangChainLangGraphIntegrationBridge",
        "FrameworkConfiguration",
        "BridgeWorkflow",
        "BridgeExecution",
        "CompatibilityMapping",
        "FrameworkConfiguration",
        "BridgeWorkflow",
        "BridgeExecution",
        "CompatibilityMapping",
        "BaseModel",
        "ValidationError",
        "BaseMessage",
        "HumanMessage",
        "AIMessage",
        "SystemMessage",
        "StateGraph",
        "MockCompiledGraph",
        "AgentSpecialization",
        "AgentTier",
        "AgentCapability",
        "Logger",
        "Config",
        "Config",
        "Config",
        "Config"
      ],
      "test_files": [
        "test_pydantic_ai_langchain_langgraph_bridge.py",
        "test_pydantic_ai_langchain_langgraph_bridge_production.py"
      ],
      "coverage": {
        "lines_total": 854,
        "lines_covered": 427,
        "lines_missing": 427,
        "coverage_percentage": 50.0,
        "complexity_score": 15.543478260869565,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 42.857142857142854,
        "type_hints": 34.146341463414636,
        "error_handling": 19.51219512195122,
        "function_complexity": 31.07317073170732
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/pydantic_ai_langchain_langgraph_bridge_production.py": {
      "file_path": "sources/pydantic_ai_langchain_langgraph_bridge_production.py",
      "functions": [
        "timer_decorator",
        "create_langchain_langgraph_bridge",
        "wrapper",
        "__init__",
        "_initialize_framework_configs",
        "_initialize_compatibility_mappings",
        "create_bridge_workflow",
        "add_workflow_node",
        "_validate_node_config",
        "add_workflow_edge",
        "_create_node_function",
        "_create_hybrid_execution_plan",
        "_select_best_framework",
        "_translate_state",
        "_update_bridge_metrics",
        "get_bridge_analytics",
        "set_agent_factory",
        "set_communication_manager",
        "set_tool_framework",
        "get_workflow",
        "list_workflows",
        "get_execution_history",
        "Field",
        "validator",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "decorator",
        "__init__",
        "__init__",
        "add_node",
        "add_edge",
        "set_entry_point",
        "compile",
        "__init__",
        "__init__",
        "info",
        "error",
        "warning"
      ],
      "classes": [
        "FrameworkType",
        "BridgeMode",
        "WorkflowState",
        "BridgeCapability",
        "LangChainLangGraphIntegrationBridge",
        "FrameworkConfiguration",
        "BridgeWorkflow",
        "BridgeExecution",
        "CompatibilityMapping",
        "FrameworkConfiguration",
        "BridgeWorkflow",
        "BridgeExecution",
        "CompatibilityMapping",
        "BaseModel",
        "ValidationError",
        "BaseMessage",
        "HumanMessage",
        "AIMessage",
        "SystemMessage",
        "StateGraph",
        "MockCompiledGraph",
        "AgentSpecialization",
        "AgentTier",
        "AgentCapability",
        "Logger",
        "Config",
        "Config",
        "Config",
        "Config"
      ],
      "test_files": [
        "test_pydantic_ai_langchain_langgraph_bridge_production.py"
      ],
      "coverage": {
        "lines_total": 852,
        "lines_covered": 426,
        "lines_missing": 426,
        "coverage_percentage": 50.0,
        "complexity_score": 15.577342047930284,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 42.857142857142854,
        "type_hints": 34.146341463414636,
        "error_handling": 19.51219512195122,
        "function_complexity": 31.07317073170732
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/pydantic_ai_production_communication_workflows.py": {
      "file_path": "sources/pydantic_ai_production_communication_workflows.py",
      "functions": [
        "timer_decorator",
        "async_timer_decorator",
        "wrapper",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "_initialize_system",
        "_initialize_database",
        "_register_default_handlers",
        "create_workflow",
        "start_workflow",
        "register_agent",
        "get_system_status",
        "_update_metrics",
        "_persist_workflow",
        "_persist_execution",
        "_persist_agent",
        "_persist_message",
        "_load_existing_data",
        "_setup_signal_handlers",
        "create_production_system",
        "Field",
        "validator",
        "signal_handler",
        "__init__",
        "dict",
        "json",
        "decorator",
        "__init__",
        "__init__",
        "store_memory",
        "retrieve_memory"
      ],
      "classes": [
        "WorkflowStatus",
        "MessageType",
        "AgentRole",
        "CommunicationProtocol",
        "WorkflowPriority",
        "CommunicationMessage",
        "WorkflowDefinition",
        "WorkflowExecution",
        "AgentRegistration",
        "CommunicationMetrics",
        "ProductionCommunicationWorkflowsSystem",
        "CommunicationWorkflowFactory",
        "BaseModel",
        "ValidationError",
        "Agent",
        "MemoryType",
        "MemoryPriority",
        "AdvancedMemoryIntegrationSystem"
      ],
      "test_files": [
        "test_pydantic_ai_production_communication_workflows.py",
        "test_pydantic_ai_production_communication_workflows_production.py"
      ],
      "coverage": {
        "lines_total": 1115,
        "lines_covered": 557,
        "lines_missing": 558,
        "coverage_percentage": 50.0,
        "complexity_score": 12.82051282051282,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 52.94117647058824,
        "type_hints": 34.84848484848485,
        "error_handling": 53.03030303030303,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/pydantic_ai_production_communication_workflows_production.py": {
      "file_path": "sources/pydantic_ai_production_communication_workflows_production.py",
      "functions": [
        "timer_decorator",
        "async_timer_decorator",
        "Field",
        "demo_production_communication_workflows",
        "wrapper",
        "__init__",
        "dict",
        "json",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "_initialize_system",
        "_initialize_database",
        "_register_default_handlers",
        "create_workflow",
        "start_workflow",
        "_simple_execute_workflow",
        "_simple_execute_step",
        "_execute_message_step_sync",
        "_execute_coordination_step_sync",
        "_execute_condition_step_sync",
        "_send_message_sync",
        "register_agent",
        "get_system_status",
        "_update_metrics",
        "_persist_workflow",
        "_persist_execution",
        "_persist_agent",
        "_persist_message",
        "_load_existing_data",
        "create_production_system",
        "json_serializer"
      ],
      "classes": [
        "BaseModel",
        "WorkflowStatus",
        "MessageType",
        "AgentRole",
        "CommunicationProtocol",
        "WorkflowPriority",
        "CommunicationMessage",
        "WorkflowDefinition",
        "WorkflowExecution",
        "AgentRegistration",
        "CommunicationMetrics",
        "ProductionCommunicationWorkflowsSystem",
        "CommunicationWorkflowFactory"
      ],
      "test_files": [
        "test_pydantic_ai_production_communication_workflows_production.py"
      ],
      "coverage": {
        "lines_total": 814,
        "lines_covered": 407,
        "lines_missing": 407,
        "coverage_percentage": 50.0,
        "complexity_score": 13.088404133180253,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 68.75,
        "type_hints": 10.714285714285714,
        "error_handling": 31.428571428571427,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/pydantic_ai_real_time_optimization_engine.py": {
      "file_path": "sources/pydantic_ai_real_time_optimization_engine.py",
      "functions": [
        "timer_decorator",
        "async_timer_decorator",
        "wrapper",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "_initialize_system",
        "_initialize_database",
        "_initialize_predictive_models",
        "_initialize_feature_extractors",
        "_initialize_optimization_strategies",
        "_load_existing_data",
        "record_performance_metric",
        "generate_optimization_recommendations",
        "get_system_status",
        "_should_trigger_optimization",
        "_analyze_performance_trends",
        "_generate_component_recommendations",
        "_extract_prediction_features",
        "_extract_temporal_features",
        "_extract_statistical_features",
        "_extract_trend_features",
        "_extract_pattern_features",
        "_extract_workload_features",
        "_generate_predictions",
        "_linear_regression_predict",
        "_moving_average_predict",
        "_exponential_smoothing_predict",
        "_calculate_confidence_intervals",
        "_analyze_resource_usage",
        "_calculate_optimal_allocation",
        "_update_system_health_metrics",
        "_calculate_trend",
        "_calculate_recent_trend",
        "_detect_anomalies",
        "_calculate_recent_metric_rate",
        "_calculate_allocation_effectiveness",
        "_calculate_resource_utilization",
        "_calculate_optimization_effectiveness",
        "_calculate_average_model_accuracy",
        "_calculate_overall_utilization",
        "_persist_performance_metric",
        "_persist_resource_allocation",
        "_persist_optimization_recommendation",
        "_persist_predictive_model",
        "create_optimization_engine",
        "Field",
        "validator",
        "__init__",
        "dict",
        "json",
        "decorator",
        "json_serializer"
      ],
      "classes": [
        "OptimizationStrategy",
        "MetricType",
        "ResourceType",
        "OptimizationPriority",
        "PredictionModel",
        "PerformanceMetric",
        "ResourceAllocation",
        "OptimizationRecommendation",
        "PredictiveModel",
        "WorkloadProfile",
        "RealTimeOptimizationEngine",
        "OptimizationEngineFactory",
        "BaseModel",
        "ValidationError"
      ],
      "test_files": [
        "test_pydantic_ai_real_time_optimization_engine.py"
      ],
      "coverage": {
        "lines_total": 1375,
        "lines_covered": 687,
        "lines_missing": 688,
        "coverage_percentage": 50.0,
        "complexity_score": 15.441176470588236,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 74.28571428571429,
        "type_hints": 23.660714285714285,
        "error_handling": 43.75,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/pydantic_ai_real_time_optimization_engine_production.py": {
      "file_path": "sources/pydantic_ai_real_time_optimization_engine_production.py",
      "functions": [
        "timer_decorator",
        "Field",
        "demo_production_optimization_engine",
        "wrapper",
        "__init__",
        "dict",
        "json",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "_initialize_system",
        "_initialize_database",
        "_initialize_predictive_models",
        "_initialize_optimization_strategies",
        "_load_existing_data",
        "record_performance_metric",
        "generate_optimization_recommendations",
        "predict_performance_sync",
        "optimize_resource_allocation_sync",
        "start_optimization_loop_sync",
        "stop_optimization_loop_sync",
        "get_system_status",
        "_update_system_health_metrics",
        "_calculate_recent_metric_rate",
        "_calculate_allocation_effectiveness",
        "_calculate_resource_utilization",
        "_calculate_optimization_effectiveness",
        "_calculate_average_model_accuracy",
        "_persist_performance_metric",
        "_persist_resource_allocation",
        "_persist_optimization_recommendation",
        "create_optimization_engine",
        "json_serializer",
        "__init__"
      ],
      "classes": [
        "BaseModel",
        "OptimizationStrategy",
        "MetricType",
        "ResourceType",
        "OptimizationPriority",
        "PredictionModel",
        "PerformanceMetric",
        "ResourceAllocation",
        "OptimizationRecommendation",
        "PredictiveModel",
        "ProductionOptimizationEngine",
        "ProductionOptimizationEngineFactory",
        "WorkflowStatus",
        "ProductionCommunicationWorkflowsSystem"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 893,
        "lines_covered": 0,
        "lines_missing": 893,
        "coverage_percentage": 0.0,
        "complexity_score": 13.435897435897438,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 68.0,
        "type_hints": 13.88888888888889,
        "error_handling": 47.22222222222222,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/pydantic_ai_tier_aware_agent_factory.py": {
      "file_path": "sources/pydantic_ai_tier_aware_agent_factory.py",
      "functions": [
        "timer_decorator",
        "create_tier_aware_factory",
        "wrapper",
        "__init__",
        "_initialize_tier_quotas",
        "_initialize_specialization_templates",
        "validate_capabilities",
        "_create_agent_configuration",
        "_create_fallback_agent",
        "_allocate_agent_resources",
        "_create_performance_baseline",
        "get_agent_record",
        "list_agents",
        "get_tier_utilization",
        "get_factory_analytics",
        "set_communication_manager",
        "update_agent_status",
        "Field",
        "validator",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "decorator",
        "__init__",
        "info",
        "error",
        "warning"
      ],
      "classes": [
        "AgentFactoryStatus",
        "AgentCreationResult",
        "AgentValidationLevel",
        "TierAwareAgentFactory",
        "CapabilityRequirement",
        "CapabilityValidationResult",
        "TierQuotaLimits",
        "AgentSpecializationTemplate",
        "AgentCreationRequest",
        "CreatedAgentRecord",
        "CapabilityRequirement",
        "CapabilityValidationResult",
        "TierQuotaLimits",
        "AgentSpecializationTemplate",
        "AgentCreationRequest",
        "CreatedAgentRecord",
        "BaseModel",
        "ValidationError",
        "AgentSpecialization",
        "AgentTier",
        "AgentCapability",
        "Logger",
        "Config",
        "Config",
        "Config",
        "Config",
        "Config",
        "Config"
      ],
      "test_files": [
        "test_pydantic_ai_tier_aware_agent_factory.py",
        "test_pydantic_ai_validated_tool_integration.py"
      ],
      "coverage": {
        "lines_total": 1041,
        "lines_covered": 520,
        "lines_missing": 521,
        "coverage_percentage": 50.0,
        "complexity_score": 10.20776874435411,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 44.06779661016949,
        "type_hints": 34.67741935483871,
        "error_handling": 17.741935483870968,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/pydantic_ai_validated_tool_integration.py": {
      "file_path": "sources/pydantic_ai_validated_tool_integration.py",
      "functions": [
        "timer_decorator",
        "create_validated_tool_framework",
        "wrapper",
        "__init__",
        "_initialize_core_tools",
        "_create_tool_executor",
        "register_tool",
        "validate_tool_access",
        "validate_tool_parameters",
        "_create_error_result",
        "_update_performance_metrics",
        "get_available_tools",
        "get_tool_analytics",
        "_get_category_distribution",
        "_get_access_level_distribution",
        "set_agent_factory",
        "set_communication_manager",
        "get_execution_history",
        "Field",
        "validator",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "decorator",
        "__init__",
        "info",
        "error",
        "warning"
      ],
      "classes": [
        "ToolCategory",
        "ToolAccessLevel",
        "ToolValidationLevel",
        "ToolExecutionStatus",
        "ValidatedToolIntegrationFramework",
        "ToolParameter",
        "ToolOutput",
        "ToolCapability",
        "ToolExecutionRequest",
        "ToolExecutionResult",
        "ToolParameter",
        "ToolOutput",
        "ToolCapability",
        "ToolExecutionRequest",
        "ToolExecutionResult",
        "BaseModel",
        "ValidationError",
        "AgentSpecialization",
        "AgentTier",
        "AgentCapability",
        "Logger",
        "Config",
        "Config",
        "Config",
        "Config",
        "Config"
      ],
      "test_files": [
        "test_pydantic_ai_validated_tool_integration.py"
      ],
      "coverage": {
        "lines_total": 915,
        "lines_covered": 457,
        "lines_missing": 458,
        "coverage_percentage": 50.0,
        "complexity_score": 13.613101330603888,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 47.368421052631575,
        "type_hints": 35.483870967741936,
        "error_handling": 17.741935483870968,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/router.py": {
      "file_path": "sources/router.py",
      "functions": [
        "__init__",
        "load_pipelines",
        "load_llm_router",
        "get_device",
        "learn_few_shots_complexity",
        "learn_few_shots_tasks",
        "llm_router",
        "router_vote",
        "find_first_sentence",
        "estimate_complexity",
        "find_planner_agent",
        "select_agent"
      ],
      "classes": [
        "AgentRouter"
      ],
      "test_files": [
        "test_langgraph_intelligent_framework_router_comprehensive.py",
        "test_langgraph_task_analysis_routing_comprehensive.py",
        "test_langgraph_task_analysis_routing_comprehensive_fixed.py",
        "test_pydantic_ai_communication_models.py",
        "test_simple_router_integration.py",
        "test_voice_integration_pipeline.py",
        "test_voice_pipeline_integration.py",
        "venv/lib/python3.13/site-packages/sklearn/compose/tests/test_column_transformer.py",
        "venv/lib/python3.13/site-packages/sklearn/metrics/tests/test_score_objects.py",
        "venv/lib/python3.13/site-packages/sklearn/tests/test_metadata_routing.py"
      ],
      "coverage": {
        "lines_total": 524,
        "lines_covered": 0,
        "lines_missing": 524,
        "coverage_percentage": 0.0,
        "complexity_score": 8.349146110056926,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 76.92307692307693,
        "type_hints": 35.41666666666667,
        "error_handling": 16.666666666666664,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "sources/schemas.py": {
      "file_path": "sources/schemas.py",
      "functions": [
        "__str__",
        "jsonify",
        "__str__",
        "jsonify",
        "__init__",
        "__str__",
        "jsonify",
        "show"
      ],
      "classes": [
        "QueryRequest",
        "QueryResponse",
        "executorResult"
      ],
      "test_files": [
        "quick_langgraph_state_coordination_test.py",
        "test_langgraph_state_coordination.py"
      ],
      "coverage": {
        "lines_total": 65,
        "lines_covered": 0,
        "lines_missing": 65,
        "coverage_percentage": 0.0,
        "complexity_score": 18.461538461538463,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 18.181818181818183,
        "type_hints": 34.375,
        "error_handling": 0.0,
        "function_complexity": 65.75
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "sources/simple_router.py": {
      "file_path": "sources/simple_router.py",
      "functions": [
        "__init__",
        "_build_routing_patterns",
        "_clean_text",
        "_score_agent_type",
        "_is_casual_conversation",
        "select_agent",
        "test_routing",
        "pretty_print",
        "__init__"
      ],
      "classes": [
        "SimpleAgentRouter",
        "Agent"
      ],
      "test_files": [
        "test_simple_router_integration.py"
      ],
      "coverage": {
        "lines_total": 235,
        "lines_covered": 0,
        "lines_missing": 235,
        "coverage_percentage": 0.0,
        "complexity_score": 18.326693227091635,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 72.72727272727273,
        "type_hints": 27.77777777777778,
        "error_handling": 5.555555555555555,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "sources/simplified_session_manager.py": {
      "file_path": "sources/simplified_session_manager.py",
      "functions": [
        "__init__",
        "_initialize_database"
      ],
      "classes": [
        "SessionState",
        "SessionType",
        "SessionData",
        "SimplifiedSessionManager"
      ],
      "test_files": [
        "comprehensive_memory_system_integration_test.py"
      ],
      "coverage": {
        "lines_total": 310,
        "lines_covered": 0,
        "lines_missing": 310,
        "coverage_percentage": 0.0,
        "complexity_score": 3.0864197530864197,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 83.33333333333334,
        "type_hints": 100,
        "error_handling": 25.0,
        "function_complexity": 56.5
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/specialized_agents.py": {
      "file_path": "sources/specialized_agents.py",
      "functions": [
        "__init__",
        "_classify_task_simple",
        "_select_supporting_agents",
        "_estimate_duration",
        "_identify_resources",
        "_assess_risks",
        "_determine_quality_target",
        "can_handle",
        "__init__",
        "_configure_research_parameters",
        "_filter_and_rank_results",
        "_calculate_research_confidence",
        "can_handle",
        "__init__",
        "_determine_execution_mode",
        "_extract_code_from_query",
        "_perform_static_analysis",
        "_analyze_performance",
        "_assess_security",
        "_generate_recommendations",
        "_calculate_code_confidence",
        "can_handle",
        "__init__",
        "_generate_executive_summary",
        "_synthesize_research_findings",
        "_synthesize_technical_analysis",
        "_synthesize_agent_outputs",
        "_generate_conclusions",
        "_count_integrated_sources",
        "_count_content_sections",
        "_calculate_synthesis_quality",
        "can_handle",
        "create_agent",
        "get_available_roles"
      ],
      "classes": [
        "ResearchQuality",
        "CodeExecutionMode",
        "ResearchResult",
        "CodeAnalysisResult",
        "EnhancedCoordinatorAgent",
        "EnhancedResearchAgent",
        "EnhancedCodeAgent",
        "EnhancedSynthesizerAgent",
        "SpecializedAgentFactory"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 827,
        "lines_covered": 0,
        "lines_missing": 827,
        "coverage_percentage": 0.0,
        "complexity_score": 17.275747508305646,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 81.3953488372093,
        "type_hints": 48.529411764705884,
        "error_handling": 10.294117647058822,
        "function_complexity": 22.647058823529406
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/speech_to_text.py": {
      "file_path": "sources/speech_to_text.py",
      "functions": [
        "__init__",
        "_record",
        "start",
        "join",
        "__init__",
        "get_device",
        "remove_hallucinations",
        "transcript_job",
        "__init__",
        "get_transcript",
        "_transcribe",
        "start",
        "join"
      ],
      "classes": [
        "AudioRecorder",
        "Transcript",
        "AudioTranscriber"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 189,
        "lines_covered": 0,
        "lines_missing": 189,
        "coverage_percentage": 0.0,
        "complexity_score": 25.13089005235602,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 68.75,
        "type_hints": 30.76923076923077,
        "error_handling": 11.538461538461538,
        "function_complexity": 3.461538461538467
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "sources/streaming_response_system.py": {
      "file_path": "sources/streaming_response_system.py",
      "functions": [
        "__init__",
        "add_message",
        "flush",
        "__init__",
        "__init__",
        "create_session",
        "_update_latency_metric",
        "register_message_handler",
        "get_system_status",
        "get_session_info",
        "cleanup"
      ],
      "classes": [
        "StreamingProtocol",
        "StreamType",
        "StreamPriority",
        "StreamMessage",
        "StreamSession",
        "StreamBuffer",
        "WebSocketStreamManager",
        "StreamingResponseSystem"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 493,
        "lines_covered": 0,
        "lines_missing": 493,
        "coverage_percentage": 0.0,
        "complexity_score": 14.015151515151514,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 84.21052631578947,
        "type_hints": 59.09090909090909,
        "error_handling": 45.45454545454545,
        "function_complexity": 25.0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/supervisor_handoffs.py": {
      "file_path": "sources/supervisor_handoffs.py",
      "functions": [
        "__init__",
        "_initialize_agent_capabilities",
        "_initialize_handoff_rules",
        "_initialize_workflow",
        "_select_agent_for_stage",
        "_select_execution_agent",
        "_identify_potential_handoff",
        "_select_alternative_agent",
        "_update_performance_metrics",
        "_calculate_workflow_confidence",
        "can_handle",
        "get_workflow_status",
        "get_all_workflows_status"
      ],
      "classes": [
        "HandoffTrigger",
        "SupervisorDecision",
        "WorkflowStage",
        "HandoffRequest",
        "SupervisorDecisionRecord",
        "WorkflowExecution",
        "SupervisorAgent"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 580,
        "lines_covered": 0,
        "lines_missing": 580,
        "coverage_percentage": 0.0,
        "complexity_score": 9.28,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 90.0,
        "type_hints": 55.769230769230774,
        "error_handling": 11.538461538461538,
        "function_complexity": 4.538461538461533
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/swiftui_voice_api_bridge.py": {
      "file_path": "sources/swiftui_voice_api_bridge.py",
      "functions": [
        "__init__",
        "_setup_fastapi_app",
        "_setup_routes",
        "_setup_voice_router_callbacks",
        "_get_api_response",
        "start_server_threaded",
        "get_api_info",
        "enhanced_handle_result",
        "enhanced_handle_status",
        "run_server"
      ],
      "classes": [
        "APIEventType",
        "SwiftUIAgentStatus",
        "APIEvent",
        "VoiceSessionState",
        "SwiftUIVoiceApiBridge"
      ],
      "test_files": [
        "test_voice_integration_pipeline.py"
      ],
      "coverage": {
        "lines_total": 433,
        "lines_covered": 0,
        "lines_missing": 433,
        "coverage_percentage": 0.0,
        "complexity_score": 8.315565031982942,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 73.33333333333333,
        "type_hints": 32.5,
        "error_handling": 35.0,
        "function_complexity": 6.900000000000006
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/text_to_speech.py": {
      "file_path": "sources/text_to_speech.py",
      "functions": [
        "__init__",
        "create_voice_folder",
        "speak",
        "replace_url",
        "extract_filename",
        "shorten_paragraph",
        "clean_sentence"
      ],
      "classes": [
        "Speech"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 175,
        "lines_covered": 0,
        "lines_missing": 175,
        "coverage_percentage": 0.0,
        "complexity_score": 20.224719101123593,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 87.5,
        "type_hints": 32.142857142857146,
        "error_handling": 7.142857142857142,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "sources/tool_ecosystem_integration.py": {
      "file_path": "sources/tool_ecosystem_integration.py",
      "functions": [
        "__init__",
        "_initialize_ecosystem",
        "_initialize_routing_rules",
        "_register_interpreter_tools",
        "_register_mcp_tools",
        "_register_native_tools",
        "_register_composite_tools",
        "_validate_tool_dependencies",
        "_safety_check",
        "_update_performance_metrics",
        "get_ecosystem_status",
        "get_available_tools",
        "cleanup"
      ],
      "classes": [
        "ToolCategory",
        "ToolSafetyLevel",
        "ToolExecutionPriority",
        "UnifiedTool",
        "ToolExecutionRequest",
        "ToolExecutionResult",
        "ToolEcosystemIntegration"
      ],
      "test_files": [
        "test_tool_ecosystem_integration.py"
      ],
      "coverage": {
        "lines_total": 655,
        "lines_covered": 327,
        "lines_missing": 328,
        "coverage_percentage": 50.0,
        "complexity_score": 10.300429184549357,
        "test_score": 0.5,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 95.0,
        "type_hints": 42.30769230769231,
        "error_handling": 23.076923076923077,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/tools/BashInterpreter.py": {
      "file_path": "sources/tools/BashInterpreter.py",
      "functions": [
        "__init__",
        "language_bash_attempt",
        "execute",
        "interpreter_feedback",
        "execution_failure_check"
      ],
      "classes": [
        "BashInterpreter"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 112,
        "lines_covered": 0,
        "lines_missing": 112,
        "coverage_percentage": 0.0,
        "complexity_score": 21.428571428571427,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 83.33333333333334,
        "type_hints": 10.0,
        "error_handling": 10.0,
        "function_complexity": 18.0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "sources/tools/C_Interpreter.py": {
      "file_path": "sources/tools/C_Interpreter.py",
      "functions": [
        "__init__",
        "execute",
        "interpreter_feedback",
        "execution_failure_check"
      ],
      "classes": [
        "CInterpreter"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 101,
        "lines_covered": 0,
        "lines_missing": 101,
        "coverage_percentage": 0.0,
        "complexity_score": 17.475728155339805,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 80.0,
        "type_hints": 37.5,
        "error_handling": 12.5,
        "function_complexity": 10.0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "sources/tools/GoInterpreter.py": {
      "file_path": "sources/tools/GoInterpreter.py",
      "functions": [
        "__init__",
        "execute",
        "interpreter_feedback",
        "execution_failure_check"
      ],
      "classes": [
        "GoInterpreter"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 104,
        "lines_covered": 0,
        "lines_missing": 104,
        "coverage_percentage": 0.0,
        "complexity_score": 17.307692307692307,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 80.0,
        "type_hints": 37.5,
        "error_handling": 12.5,
        "function_complexity": 9.25
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "sources/tools/JavaInterpreter.py": {
      "file_path": "sources/tools/JavaInterpreter.py",
      "functions": [
        "__init__",
        "execute",
        "interpreter_feedback",
        "execution_failure_check"
      ],
      "classes": [
        "JavaInterpreter"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 161,
        "lines_covered": 0,
        "lines_missing": 161,
        "coverage_percentage": 0.0,
        "complexity_score": 11.180124223602485,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 80.0,
        "type_hints": 37.5,
        "error_handling": 12.5,
        "function_complexity": 15.75
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "sources/tools/PyInterpreter.py": {
      "file_path": "sources/tools/PyInterpreter.py",
      "functions": [
        "__init__",
        "execute",
        "interpreter_feedback",
        "execution_failure_check"
      ],
      "classes": [
        "PyInterpreter"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 104,
        "lines_covered": 0,
        "lines_missing": 104,
        "coverage_percentage": 0.0,
        "complexity_score": 15.384615384615385,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 80.0,
        "type_hints": 18.75,
        "error_handling": 25.0,
        "function_complexity": 13.0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "sources/tools/fileFinder.py": {
      "file_path": "sources/tools/fileFinder.py",
      "functions": [
        "__init__",
        "read_file",
        "read_arbitrary_file",
        "get_file_info",
        "recursive_search",
        "execute",
        "execution_failure_check",
        "interpreter_feedback"
      ],
      "classes": [
        "FileFinder"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 174,
        "lines_covered": 0,
        "lines_missing": 174,
        "coverage_percentage": 0.0,
        "complexity_score": 25.287356321839084,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 88.88888888888889,
        "type_hints": 46.875,
        "error_handling": 6.25,
        "function_complexity": 9.875
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "sources/tools/flightSearch.py": {
      "file_path": "sources/tools/flightSearch.py",
      "functions": [
        "__init__",
        "execute",
        "execution_failure_check",
        "interpreter_feedback"
      ],
      "classes": [
        "FlightSearch"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 71,
        "lines_covered": 0,
        "lines_missing": 71,
        "coverage_percentage": 0.0,
        "complexity_score": 23.61111111111111,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 20.0,
        "type_hints": 43.75,
        "error_handling": 12.5,
        "function_complexity": 5.0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "sources/tools/mcpFinder.py": {
      "file_path": "sources/tools/mcpFinder.py",
      "functions": [
        "__init__",
        "_make_request",
        "list_mcp_servers",
        "get_mcp_server_details",
        "find_mcp_servers",
        "execute",
        "execution_failure_check",
        "interpreter_feedback"
      ],
      "classes": [
        "MCP_finder"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 109,
        "lines_covered": 0,
        "lines_missing": 109,
        "coverage_percentage": 0.0,
        "complexity_score": 32.11009174311927,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 33.33333333333333,
        "type_hints": 50.0,
        "error_handling": 12.5,
        "function_complexity": 25.625
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "sources/tools/safety.py": {
      "file_path": "sources/tools/safety.py",
      "functions": [
        "is_any_unsafe",
        "is_unsafe"
      ],
      "classes": [],
      "test_files": [
        "test_apple_silicon_langchain_tools_comprehensive.py",
        "test_langgraph_parallel_node_execution_comprehensive.py",
        "test_pydantic_ai_core_integration.py",
        "test_pydantic_ai_core_integration_comprehensive.py",
        "test_pydantic_ai_langchain_langgraph_bridge.py",
        "test_pydantic_ai_langchain_langgraph_bridge_production.py",
        "test_tool_ecosystem_integration.py",
        "tests/test_tools_parsing.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_memmapping.py",
        "venv/lib/python3.13/site-packages/networkx/classes/tests/test_graph.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_config.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_gdb_bindings.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_parallel_backend.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_random.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_threadsafety.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_api.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_casting_unittests.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_custom_dtypes.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_multithreading.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_numeric.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_ufunc.py",
        "venv/lib/python3.13/site-packages/numpy/f2py/tests/test_callback.py",
        "venv/lib/python3.13/site-packages/scipy/_lib/tests/test__threadsafety.py",
        "venv/lib/python3.13/site-packages/scipy/_lib/tests/test_ccallback.py",
        "venv/lib/python3.13/site-packages/scipy/integrate/tests/test_quadpack.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_morestats.py",
        "venv/lib/python3.13/site-packages/sklearn/svm/tests/test_bounds.py",
        "venv/lib/python3.13/site-packages/sympy/core/tests/test_singleton.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/rpc/examples/reinforcement_learning_rpc_test.py"
      ],
      "coverage": {
        "lines_total": 90,
        "lines_covered": 0,
        "lines_missing": 90,
        "coverage_percentage": 0.0,
        "complexity_score": 10.0,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 100.0,
        "type_hints": 0.0,
        "error_handling": 0.0,
        "function_complexity": 64.0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "sources/tools/searxSearch.py": {
      "file_path": "sources/tools/searxSearch.py",
      "functions": [
        "__init__",
        "link_valid",
        "check_all_links",
        "execute",
        "execution_failure_check",
        "interpreter_feedback"
      ],
      "classes": [
        "searxSearch"
      ],
      "test_files": [
        "tests/test_searx_search.py"
      ],
      "coverage": {
        "lines_total": 103,
        "lines_covered": 0,
        "lines_missing": 103,
        "coverage_percentage": 0.0,
        "complexity_score": 28.57142857142857,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 85.71428571428571,
        "type_hints": 25.0,
        "error_handling": 16.666666666666664,
        "function_complexity": 6.666666666666671
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "sources/tools/tools.py": {
      "file_path": "sources/tools/tools.py",
      "functions": [
        "__init__",
        "get_work_dir",
        "set_allow_language_exec_bash",
        "check_config_dir_validity",
        "config_exists",
        "create_work_dir",
        "execute",
        "execution_failure_check",
        "interpreter_feedback",
        "save_block",
        "get_parameter_value",
        "found_executable_blocks",
        "load_exec_block"
      ],
      "classes": [
        "Tools"
      ],
      "test_files": [
        "_Sandbox/Environment/TestDrivenFeatures/ContentViewRefactoring_TDD/01_WriteTests/test_contentviewrefactoring_integration.py",
        "quick_apple_silicon_langchain_test.py",
        "quick_langgraph_state_coordination_test.py",
        "test_apple_silicon_langchain_tools.py",
        "test_apple_silicon_langchain_tools_comprehensive.py",
        "test_copilotkit_integration.py",
        "test_langgraph_hybrid_framework_coordination_comprehensive.py",
        "test_langgraph_state_coordination.py",
        "test_pydantic_ai_core_integration.py",
        "test_pydantic_ai_core_integration_comprehensive.py",
        "test_pydantic_ai_langchain_langgraph_bridge.py",
        "test_pydantic_ai_langchain_langgraph_bridge_production.py",
        "test_pydantic_ai_validated_tool_integration.py",
        "test_tool_ecosystem_integration.py",
        "tests/test_searx_search.py",
        "tests/test_tools_parsing.py",
        "venv/lib/python3.13/site-packages/bs4/tests/test_fuzz.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_func_inspect.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_hashing.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_memmapping.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_memory.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_parallel.py",
        "venv/lib/python3.13/site-packages/joblib/test/test_store_backends.py",
        "venv/lib/python3.13/site-packages/llvmlite/tests/test_ir.py",
        "venv/lib/python3.13/site-packages/mypyc/test/test_commandline.py",
        "venv/lib/python3.13/site-packages/mypyc/test/test_run.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/approximation/tests/test_treewidth.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/assortativity/tests/test_connectivity.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/bipartite/tests/test_link_analysis.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/bipartite/tests/test_matching.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/coloring/tests/test_coloring.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/community/tests/test_kclique.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/community/tests/test_kernighan_lin.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/community/tests/test_label_propagation.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/community/tests/test_lukes.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/components/tests/test_semiconnected.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/connectivity/tests/test_connectivity.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/connectivity/tests/test_edge_augmentation.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/connectivity/tests/test_edge_kcomponents.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/connectivity/tests/test_kcutsets.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/connectivity/tests/test_stoer_wagner.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/flow/tests/test_gomory_hu.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/flow/tests/test_networksimplex.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/isomorphism/tests/test_isomorphism.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/isomorphism/tests/test_vf2pp.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/isomorphism/tests/test_vf2pp_helpers.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_boundary.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_chains.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_cycles.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_d_separation.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_dag.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_distance_measures.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_link_prediction.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_lowest_common_ancestors.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_matching.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_simple_paths.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_tournament.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tests/test_triads.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/traversal/tests/test_bfs.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tree/tests/test_coding.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tree/tests/test_mst.py",
        "venv/lib/python3.13/site-packages/networkx/algorithms/tree/tests/test_operations.py",
        "venv/lib/python3.13/site-packages/networkx/drawing/tests/test_pylab.py",
        "venv/lib/python3.13/site-packages/networkx/generators/tests/test_atlas.py",
        "venv/lib/python3.13/site-packages/networkx/generators/tests/test_classic.py",
        "venv/lib/python3.13/site-packages/networkx/generators/tests/test_geometric.py",
        "venv/lib/python3.13/site-packages/networkx/generators/tests/test_lattice.py",
        "venv/lib/python3.13/site-packages/networkx/generators/tests/test_time_series.py",
        "venv/lib/python3.13/site-packages/networkx/readwrite/tests/test_text.py",
        "venv/lib/python3.13/site-packages/networkx/tests/test_convert_numpy.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudadrv/test_cuda_array_slicing.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudadrv/test_cuda_ndarray.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudadrv/test_streams.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_casting.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_compiler.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_complex.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_debuginfo.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_intrinsics.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_ipc.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_operator.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_reduction.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_ufuncs.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/cudapy/test_vectorize.py",
        "venv/lib/python3.13/site-packages/numba/cuda/tests/nocuda/test_dummyarray.py",
        "venv/lib/python3.13/site-packages/numba/tests/npyufunc/test_dufunc.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_array_analysis.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_array_iterators.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_array_manipulation.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_array_methods.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_array_reductions.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_builtins.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_complex.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_conversion.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_deprecations.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_dispatcher.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_fancy_indexing.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_flow_control.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_gdb_bindings.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_getitem_on_types.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_heapq.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_import.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_indexing.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_ir_inlining.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_jitclasses.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_linalg.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_lists.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_map_filter_reduce.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_mathlib.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_ndarray_subclasses.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_np_functions.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_np_randomgen.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_npdatetime.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_numconv.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_numpy_support.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_obj_lifetime.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_operators.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_optional.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_parallel_backend.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_parfors.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_parfors_passes.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_polynomial.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_pycc.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_random.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_runtests.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_sets.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_slices.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_sort.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_support.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_sys_monitoring.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_sysinfo.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_target_extension.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_target_overloadselector.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_try_except.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_tuples.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_typeconv.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_typedlist.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_typeinfer.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_ufuncs.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_unicode.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_usecases.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_array_coercion.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_dtype.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_einsum.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_extint128.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_indexing.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_mem_overlap.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_multiarray.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_numeric.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_numerictypes.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_regression.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_scalarmath.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_simd.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_stringdtype.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_ufunc.py",
        "venv/lib/python3.13/site-packages/numpy/_core/tests/test_umath.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test__iotools.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_arrayterator.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_function_base.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_io.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_nanfunctions.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_packbits.py",
        "venv/lib/python3.13/site-packages/numpy/lib/tests/test_shape_base.py",
        "venv/lib/python3.13/site-packages/numpy/linalg/tests/test_linalg.py",
        "venv/lib/python3.13/site-packages/numpy/ma/tests/test_core.py",
        "venv/lib/python3.13/site-packages/numpy/ma/tests/test_extras.py",
        "venv/lib/python3.13/site-packages/numpy/ma/tests/test_old_ma.py",
        "venv/lib/python3.13/site-packages/numpy/polynomial/tests/test_chebyshev.py",
        "venv/lib/python3.13/site-packages/numpy/polynomial/tests/test_hermite.py",
        "venv/lib/python3.13/site-packages/numpy/polynomial/tests/test_hermite_e.py",
        "venv/lib/python3.13/site-packages/numpy/polynomial/tests/test_laguerre.py",
        "venv/lib/python3.13/site-packages/numpy/polynomial/tests/test_legendre.py",
        "venv/lib/python3.13/site-packages/numpy/polynomial/tests/test_polynomial.py",
        "venv/lib/python3.13/site-packages/numpy/random/tests/test_smoke.py",
        "venv/lib/python3.13/site-packages/numpy/testing/tests/test_utils.py",
        "venv/lib/python3.13/site-packages/numpy/tests/test_public_api.py",
        "venv/lib/python3.13/site-packages/pkg_resources/tests/test_integration_zope_interface.py",
        "venv/lib/python3.13/site-packages/pkg_resources/tests/test_pkg_resources.py",
        "venv/lib/python3.13/site-packages/pkg_resources/tests/test_resources.py",
        "venv/lib/python3.13/site-packages/pkg_resources/tests/test_working_set.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_memleaks.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_process.py",
        "venv/lib/python3.13/site-packages/scipy/_lib/tests/test_public_api.py",
        "venv/lib/python3.13/site-packages/scipy/fft/tests/test_backend.py",
        "venv/lib/python3.13/site-packages/scipy/integrate/_ivp/tests/test_ivp.py",
        "venv/lib/python3.13/site-packages/scipy/integrate/tests/test_banded_ode_solvers.py",
        "venv/lib/python3.13/site-packages/scipy/integrate/tests/test_cubature.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_bsplines.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_fitpack.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_fitpack2.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_gil.py",
        "venv/lib/python3.13/site-packages/scipy/interpolate/tests/test_rgi.py",
        "venv/lib/python3.13/site-packages/scipy/linalg/tests/test_basic.py",
        "venv/lib/python3.13/site-packages/scipy/linalg/tests/test_decomp.py",
        "venv/lib/python3.13/site-packages/scipy/linalg/tests/test_decomp_update.py",
        "venv/lib/python3.13/site-packages/scipy/linalg/tests/test_fblas.py",
        "venv/lib/python3.13/site-packages/scipy/linalg/tests/test_lapack.py",
        "venv/lib/python3.13/site-packages/scipy/linalg/tests/test_matfuncs.py",
        "venv/lib/python3.13/site-packages/scipy/linalg/tests/test_procrustes.py",
        "venv/lib/python3.13/site-packages/scipy/ndimage/tests/test_filters.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test__numdiff.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test__spectral.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_chandrupatla.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_least_squares.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_nonlin.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_optimize.py",
        "venv/lib/python3.13/site-packages/scipy/optimize/tests/test_zeros.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_array_tools.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_short_time_fft.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_signaltools.py",
        "venv/lib/python3.13/site-packages/scipy/signal/tests/test_upfirdn.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/csgraph/tests/test_matching.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/linalg/_eigen/arpack/tests/test_arpack.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/linalg/_eigen/lobpcg/tests/test_lobpcg.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/linalg/_isolve/tests/test_iterative.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/linalg/tests/test_expm_multiply.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/linalg/tests/test_interface.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/tests/test_base.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/tests/test_csr.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/tests/test_sparsetools.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/tests/test_spfuncs.py",
        "venv/lib/python3.13/site-packages/scipy/spatial/tests/test_distance.py",
        "venv/lib/python3.13/site-packages/scipy/spatial/tests/test_kdtree.py",
        "venv/lib/python3.13/site-packages/scipy/spatial/tests/test_qhull.py",
        "venv/lib/python3.13/site-packages/scipy/spatial/tests/test_spherical_voronoi.py",
        "venv/lib/python3.13/site-packages/scipy/spatial/transform/tests/test_rotation.py",
        "venv/lib/python3.13/site-packages/scipy/spatial/transform/tests/test_rotation_spline.py",
        "venv/lib/python3.13/site-packages/scipy/special/tests/test_basic.py",
        "venv/lib/python3.13/site-packages/scipy/special/tests/test_cdflib.py",
        "venv/lib/python3.13/site-packages/scipy/special/tests/test_cython_special.py",
        "venv/lib/python3.13/site-packages/scipy/special/tests/test_hypergeometric.py",
        "venv/lib/python3.13/site-packages/scipy/special/tests/test_kolmogorov.py",
        "venv/lib/python3.13/site-packages/scipy/special/tests/test_mpmath.py",
        "venv/lib/python3.13/site-packages/scipy/special/tests/test_wright_bessel.py",
        "venv/lib/python3.13/site-packages/scipy/stats/_bws_test.py",
        "venv/lib/python3.13/site-packages/scipy/stats/_page_trend_test.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_axis_nan_policy.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_continuous_basic.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_discrete_distns.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_distributions.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_hypotests.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_morestats.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_mstats_extras.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_odds_ratio.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_qmc.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_relative_risk.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_stats.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_base.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/compilers/C/tests/test_mingw.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_archive_util.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_build_ext.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_config_cmd.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_dist.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_sdist.py",
        "venv/lib/python3.13/site-packages/setuptools/_distutils/tests/test_util.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/config/test_expand.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/config/test_pyprojecttoml.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/config/test_pyprojecttoml_dynamic_deps.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/config/test_setupcfg.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/integration/test_pip_install_sdist.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_archive_util.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_bdist_deprecations.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_bdist_egg.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_bdist_wheel.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_build.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_build_clib.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_build_ext.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_build_meta.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_build_py.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_config_discovery.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_core_metadata.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_depends.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_develop.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_dist.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_dist_info.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_distutils_adoption.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_editable_install.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_egg_info.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_extern.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_find_packages.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_find_py_modules.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_glob.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_install_scripts.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_logging.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_manifest.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_namespaces.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_scripts.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_sdist.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_setopt.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_setuptools.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_shutil_wrapper.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_unicode_utils.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_virtualenv.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_warnings.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_wheel.py",
        "venv/lib/python3.13/site-packages/setuptools/tests/test_windows_wrappers.py",
        "venv/lib/python3.13/site-packages/sklearn/cluster/tests/test_hierarchical.py",
        "venv/lib/python3.13/site-packages/sklearn/covariance/tests/test_robust_covariance.py",
        "venv/lib/python3.13/site-packages/sklearn/datasets/tests/test_20news.py",
        "venv/lib/python3.13/site-packages/sklearn/datasets/tests/test_base.py",
        "venv/lib/python3.13/site-packages/sklearn/datasets/tests/test_california_housing.py",
        "venv/lib/python3.13/site-packages/sklearn/datasets/tests/test_covtype.py",
        "venv/lib/python3.13/site-packages/sklearn/datasets/tests/test_kddcup99.py",
        "venv/lib/python3.13/site-packages/sklearn/datasets/tests/test_lfw.py",
        "venv/lib/python3.13/site-packages/sklearn/datasets/tests/test_openml.py",
        "venv/lib/python3.13/site-packages/sklearn/datasets/tests/test_rcv1.py",
        "venv/lib/python3.13/site-packages/sklearn/datasets/tests/test_samples_generator.py",
        "venv/lib/python3.13/site-packages/sklearn/decomposition/tests/test_dict_learning.py",
        "venv/lib/python3.13/site-packages/sklearn/decomposition/tests/test_factor_analysis.py",
        "venv/lib/python3.13/site-packages/sklearn/decomposition/tests/test_fastica.py",
        "venv/lib/python3.13/site-packages/sklearn/ensemble/tests/test_bagging.py",
        "venv/lib/python3.13/site-packages/sklearn/ensemble/tests/test_forest.py",
        "venv/lib/python3.13/site-packages/sklearn/feature_extraction/tests/test_text.py",
        "venv/lib/python3.13/site-packages/sklearn/feature_selection/tests/test_feature_select.py",
        "venv/lib/python3.13/site-packages/sklearn/impute/tests/test_impute.py",
        "venv/lib/python3.13/site-packages/sklearn/linear_model/_glm/tests/test_glm.py",
        "venv/lib/python3.13/site-packages/sklearn/linear_model/tests/test_logistic.py",
        "venv/lib/python3.13/site-packages/sklearn/linear_model/tests/test_ridge.py",
        "venv/lib/python3.13/site-packages/sklearn/manifold/tests/test_isomap.py",
        "venv/lib/python3.13/site-packages/sklearn/manifold/tests/test_locally_linear.py",
        "venv/lib/python3.13/site-packages/sklearn/metrics/cluster/tests/test_common.py",
        "venv/lib/python3.13/site-packages/sklearn/metrics/tests/test_classification.py",
        "venv/lib/python3.13/site-packages/sklearn/metrics/tests/test_common.py",
        "venv/lib/python3.13/site-packages/sklearn/metrics/tests/test_dist_metrics.py",
        "venv/lib/python3.13/site-packages/sklearn/metrics/tests/test_pairwise_distances_reduction.py",
        "venv/lib/python3.13/site-packages/sklearn/metrics/tests/test_regression.py",
        "venv/lib/python3.13/site-packages/sklearn/metrics/tests/test_score_objects.py",
        "venv/lib/python3.13/site-packages/sklearn/mixture/tests/test_gaussian_mixture.py",
        "venv/lib/python3.13/site-packages/sklearn/model_selection/tests/test_search.py",
        "venv/lib/python3.13/site-packages/sklearn/model_selection/tests/test_split.py",
        "venv/lib/python3.13/site-packages/sklearn/model_selection/tests/test_validation.py",
        "venv/lib/python3.13/site-packages/sklearn/neighbors/tests/test_ball_tree.py",
        "venv/lib/python3.13/site-packages/sklearn/neighbors/tests/test_neighbors.py",
        "venv/lib/python3.13/site-packages/sklearn/neighbors/tests/test_neighbors_tree.py",
        "venv/lib/python3.13/site-packages/sklearn/tests/test_common.py",
        "venv/lib/python3.13/site-packages/sklearn/tests/test_docstring_parameters.py",
        "venv/lib/python3.13/site-packages/sklearn/tests/test_metaestimators.py",
        "venv/lib/python3.13/site-packages/sklearn/tests/test_pipeline.py",
        "venv/lib/python3.13/site-packages/sklearn/tests/test_random_projection.py",
        "venv/lib/python3.13/site-packages/sklearn/tree/tests/test_tree.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_array_api.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_chunking.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_estimator_checks.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_estimator_html_repr.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_multiclass.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_seq_dataset.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_show_versions.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_validation.py",
        "venv/lib/python3.13/site-packages/sympy/algebras/tests/test_quaternion.py",
        "venv/lib/python3.13/site-packages/sympy/calculus/tests/test_accumulationbounds.py",
        "venv/lib/python3.13/site-packages/sympy/calculus/tests/test_finite_diff.py",
        "venv/lib/python3.13/site-packages/sympy/codegen/tests/test_numpy_nodes.py",
        "venv/lib/python3.13/site-packages/sympy/codegen/tests/test_scipy_nodes.py",
        "venv/lib/python3.13/site-packages/sympy/combinatorics/tests/test_permutations.py",
        "venv/lib/python3.13/site-packages/sympy/concrete/tests/test_gosper.py",
        "venv/lib/python3.13/site-packages/sympy/core/tests/test_args.py",
        "venv/lib/python3.13/site-packages/sympy/core/tests/test_arit.py",
        "venv/lib/python3.13/site-packages/sympy/core/tests/test_evalf.py",
        "venv/lib/python3.13/site-packages/sympy/core/tests/test_expr.py",
        "venv/lib/python3.13/site-packages/sympy/core/tests/test_exprtools.py",
        "venv/lib/python3.13/site-packages/sympy/core/tests/test_function.py",
        "venv/lib/python3.13/site-packages/sympy/core/tests/test_logic.py",
        "venv/lib/python3.13/site-packages/sympy/core/tests/test_match.py",
        "venv/lib/python3.13/site-packages/sympy/core/tests/test_noncommutative.py",
        "venv/lib/python3.13/site-packages/sympy/core/tests/test_relational.py",
        "venv/lib/python3.13/site-packages/sympy/core/tests/test_subs.py",
        "venv/lib/python3.13/site-packages/sympy/core/tests/test_sympify.py",
        "venv/lib/python3.13/site-packages/sympy/core/tests/test_traversal.py",
        "venv/lib/python3.13/site-packages/sympy/external/tests/test_importtools.py",
        "venv/lib/python3.13/site-packages/sympy/external/tests/test_ntheory.py",
        "venv/lib/python3.13/site-packages/sympy/external/tests/test_numpy.py",
        "venv/lib/python3.13/site-packages/sympy/functions/combinatorial/tests/test_comb_factorials.py",
        "venv/lib/python3.13/site-packages/sympy/functions/combinatorial/tests/test_comb_numbers.py",
        "venv/lib/python3.13/site-packages/sympy/functions/elementary/tests/test_exponential.py",
        "venv/lib/python3.13/site-packages/sympy/functions/elementary/tests/test_integers.py",
        "venv/lib/python3.13/site-packages/sympy/functions/elementary/tests/test_miscellaneous.py",
        "venv/lib/python3.13/site-packages/sympy/functions/elementary/tests/test_piecewise.py",
        "venv/lib/python3.13/site-packages/sympy/functions/elementary/tests/test_trigonometric.py",
        "venv/lib/python3.13/site-packages/sympy/functions/special/tests/test_bessel.py",
        "venv/lib/python3.13/site-packages/sympy/integrals/tests/test_integrals.py",
        "venv/lib/python3.13/site-packages/sympy/integrals/tests/test_laplace.py",
        "venv/lib/python3.13/site-packages/sympy/integrals/tests/test_prde.py",
        "venv/lib/python3.13/site-packages/sympy/integrals/tests/test_rationaltools.py",
        "venv/lib/python3.13/site-packages/sympy/integrals/tests/test_rde.py",
        "venv/lib/python3.13/site-packages/sympy/integrals/tests/test_risch.py",
        "venv/lib/python3.13/site-packages/sympy/integrals/tests/test_transforms.py",
        "venv/lib/python3.13/site-packages/sympy/interactive/tests/test_ipython.py",
        "venv/lib/python3.13/site-packages/sympy/logic/tests/test_boolalg.py",
        "venv/lib/python3.13/site-packages/sympy/logic/tests/test_lra_theory.py",
        "venv/lib/python3.13/site-packages/sympy/matrices/expressions/tests/test_companion.py",
        "venv/lib/python3.13/site-packages/sympy/matrices/expressions/tests/test_matexpr.py",
        "venv/lib/python3.13/site-packages/sympy/matrices/tests/test_commonmatrix.py",
        "venv/lib/python3.13/site-packages/sympy/matrices/tests/test_determinant.py",
        "venv/lib/python3.13/site-packages/sympy/matrices/tests/test_immutable.py",
        "venv/lib/python3.13/site-packages/sympy/matrices/tests/test_matrices.py",
        "venv/lib/python3.13/site-packages/sympy/matrices/tests/test_normalforms.py",
        "venv/lib/python3.13/site-packages/sympy/matrices/tests/test_sparse.py",
        "venv/lib/python3.13/site-packages/sympy/matrices/tests/test_sparsetools.py",
        "venv/lib/python3.13/site-packages/sympy/multipledispatch/tests/test_core.py",
        "venv/lib/python3.13/site-packages/sympy/ntheory/tests/test_continued_fraction.py",
        "venv/lib/python3.13/site-packages/sympy/physics/biomechanics/tests/test_curve.py",
        "venv/lib/python3.13/site-packages/sympy/physics/control/tests/test_lti.py",
        "venv/lib/python3.13/site-packages/sympy/physics/optics/tests/test_gaussopt.py",
        "venv/lib/python3.13/site-packages/sympy/plotting/pygletplot/tests/test_plotting.py",
        "venv/lib/python3.13/site-packages/sympy/polys/agca/tests/test_extensions.py",
        "venv/lib/python3.13/site-packages/sympy/polys/domains/tests/test_domains.py",
        "venv/lib/python3.13/site-packages/sympy/polys/matrices/tests/test_eigen.py",
        "venv/lib/python3.13/site-packages/sympy/polys/matrices/tests/test_sdm.py",
        "venv/lib/python3.13/site-packages/sympy/polys/numberfields/tests/test_galoisgroups.py",
        "venv/lib/python3.13/site-packages/sympy/polys/numberfields/tests/test_minpoly.py",
        "venv/lib/python3.13/site-packages/sympy/polys/numberfields/tests/test_numbers.py",
        "venv/lib/python3.13/site-packages/sympy/polys/numberfields/tests/test_subfield.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_appellseqs.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_constructor.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_densebasic.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_densetools.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_euclidtools.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_factortools.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_galoistools.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_groebnertools.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_hypothesis.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_monomials.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_multivariate_resultants.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_orthopolys.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_partfrac.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_polyroots.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_polytools.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_rationaltools.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_rings.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_rootoftools.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_specialpolys.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_sqfreetools.py",
        "venv/lib/python3.13/site-packages/sympy/polys/tests/test_subresultants_qq_zz.py",
        "venv/lib/python3.13/site-packages/sympy/printing/pretty/tests/test_pretty.py",
        "venv/lib/python3.13/site-packages/sympy/printing/tests/test_latex.py",
        "venv/lib/python3.13/site-packages/sympy/printing/tests/test_smtlib.py",
        "venv/lib/python3.13/site-packages/sympy/printing/tests/test_str.py",
        "venv/lib/python3.13/site-packages/sympy/series/tests/test_demidovich.py",
        "venv/lib/python3.13/site-packages/sympy/series/tests/test_fourier.py",
        "venv/lib/python3.13/site-packages/sympy/series/tests/test_gruntz.py",
        "venv/lib/python3.13/site-packages/sympy/series/tests/test_limits.py",
        "venv/lib/python3.13/site-packages/sympy/sets/tests/test_fancysets.py",
        "venv/lib/python3.13/site-packages/sympy/sets/tests/test_sets.py",
        "venv/lib/python3.13/site-packages/sympy/simplify/tests/test_cse.py",
        "venv/lib/python3.13/site-packages/sympy/simplify/tests/test_epathtools.py",
        "venv/lib/python3.13/site-packages/sympy/simplify/tests/test_radsimp.py",
        "venv/lib/python3.13/site-packages/sympy/simplify/tests/test_simplify.py",
        "venv/lib/python3.13/site-packages/sympy/simplify/tests/test_trigsimp.py",
        "venv/lib/python3.13/site-packages/sympy/solvers/ode/tests/test_ode.py",
        "venv/lib/python3.13/site-packages/sympy/solvers/ode/tests/test_riccati.py",
        "venv/lib/python3.13/site-packages/sympy/solvers/ode/tests/test_single.py",
        "venv/lib/python3.13/site-packages/sympy/solvers/tests/test_inequalities.py",
        "venv/lib/python3.13/site-packages/sympy/solvers/tests/test_polysys.py",
        "venv/lib/python3.13/site-packages/sympy/solvers/tests/test_recurr.py",
        "venv/lib/python3.13/site-packages/sympy/solvers/tests/test_simplex.py",
        "venv/lib/python3.13/site-packages/sympy/solvers/tests/test_solvers.py",
        "venv/lib/python3.13/site-packages/sympy/solvers/tests/test_solveset.py",
        "venv/lib/python3.13/site-packages/sympy/stats/tests/test_finite_rv.py",
        "venv/lib/python3.13/site-packages/sympy/strategies/branch/tests/test_tools.py",
        "venv/lib/python3.13/site-packages/sympy/strategies/tests/test_tools.py",
        "venv/lib/python3.13/site-packages/sympy/strategies/tests/test_tree.py",
        "venv/lib/python3.13/site-packages/sympy/tensor/array/tests/test_arrayop.py",
        "venv/lib/python3.13/site-packages/sympy/utilities/tests/test_autowrap.py",
        "venv/lib/python3.13/site-packages/sympy/utilities/tests/test_decorator.py",
        "venv/lib/python3.13/site-packages/sympy/utilities/tests/test_enumerative.py",
        "venv/lib/python3.13/site-packages/sympy/utilities/tests/test_iterables.py",
        "venv/lib/python3.13/site-packages/sympy/utilities/tests/test_lambdify.py",
        "venv/lib/python3.13/site-packages/sympy/utilities/tests/test_pickling.py",
        "venv/lib/python3.13/site-packages/sympy/utilities/tests/test_timeutils.py",
        "venv/lib/python3.13/site-packages/sympy/utilities/tests/test_wester.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/distributed_test.py",
        "venv/lib/python3.13/site-packages/torch/testing/_internal/distributed/rpc/rpc_test.py",
        "venv/lib/python3.13/site-packages/trio/_core/_tests/test_guest_mode.py",
        "venv/lib/python3.13/site-packages/trio/_core/_tests/test_run.py",
        "venv/lib/python3.13/site-packages/trio/_core/_tests/test_unbounded_queue.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_dtls.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_exports.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_highlevel_serve_listeners.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_highlevel_ssl_helpers.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_ssl.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_subprocess.py",
        "venv/lib/python3.13/site-packages/trio/_tests/test_threads.py",
        "venv/lib/python3.13/site-packages/trio/_tests/tools/test_gen_exports.py",
        "venv/lib/python3.13/site-packages/trio/_tests/tools/test_mypy_annotate.py",
        "venv/lib/python3.13/site-packages/trio/testing/_trio_test.py"
      ],
      "coverage": {
        "lines_total": 197,
        "lines_covered": 167,
        "lines_missing": 30,
        "coverage_percentage": 85.0,
        "complexity_score": 21.31979695431472,
        "test_score": 0.85,
        "tdd_compliance": true
      },
      "code_quality": {
        "docstring_coverage": 78.57142857142857,
        "type_hints": 19.230769230769234,
        "error_handling": 0.0,
        "function_complexity": 34.69230769230769
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "sources/tools/webSearch.py": {
      "file_path": "sources/tools/webSearch.py",
      "functions": [
        "__init__",
        "link_valid",
        "check_all_links",
        "execute",
        "execution_failure_check",
        "interpreter_feedback"
      ],
      "classes": [
        "webSearch"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 100,
        "lines_covered": 0,
        "lines_missing": 100,
        "coverage_percentage": 0.0,
        "complexity_score": 28.71287128712871,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 42.857142857142854,
        "type_hints": 29.166666666666668,
        "error_handling": 16.666666666666664,
        "function_complexity": 8.666666666666671
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "sources/utility.py": {
      "file_path": "sources/utility.py",
      "functions": [
        "get_color_map",
        "pretty_print",
        "animate_thinking",
        "timer_decorator",
        "_animate",
        "wrapper"
      ],
      "classes": [],
      "test_files": [
        "test_browser_automation_integration.py",
        "test_browser_automation_integration_mock.py",
        "test_streaming_response_integration.py",
        "test_tool_ecosystem_integration.py",
        "test_voice_pipeline_integration.py",
        "venv/lib/python3.13/site-packages/networkx/generators/tests/test_classic.py",
        "venv/lib/python3.13/site-packages/networkx/generators/tests/test_small.py",
        "venv/lib/python3.13/site-packages/numba/tests/test_ir_utils.py",
        "venv/lib/python3.13/site-packages/pooch/tests/test_utils.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_bsd.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_linux.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_osx.py",
        "venv/lib/python3.13/site-packages/psutil/tests/test_posix.py",
        "venv/lib/python3.13/site-packages/scipy/ndimage/tests/test_filters.py",
        "venv/lib/python3.13/site-packages/scipy/ndimage/tests/test_measurements.py",
        "venv/lib/python3.13/site-packages/scipy/sparse/tests/test_sputils.py",
        "venv/lib/python3.13/site-packages/scipy/spatial/tests/test_qhull.py",
        "venv/lib/python3.13/site-packages/scipy/stats/tests/test_distributions.py",
        "venv/lib/python3.13/site-packages/sklearn/cluster/tests/test_k_means.py",
        "venv/lib/python3.13/site-packages/sklearn/manifold/tests/test_locally_linear.py",
        "venv/lib/python3.13/site-packages/sklearn/utils/tests/test_validation.py",
        "venv/lib/python3.13/site-packages/sympy/physics/quantum/tests/test_circuitplot.py"
      ],
      "coverage": {
        "lines_total": 120,
        "lines_covered": 0,
        "lines_missing": 120,
        "coverage_percentage": 0.0,
        "complexity_score": 11.570247933884298,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 50.0,
        "type_hints": 0.0,
        "error_handling": 0.0,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "sources/video_generation_coordination_system.py": {
      "file_path": "sources/video_generation_coordination_system.py",
      "functions": [
        "__init__",
        "_detect_apple_silicon",
        "_detect_optimizations",
        "_create_performance_profile",
        "optimize_generation_parameters",
        "__init__",
        "_initialize_platforms",
        "get_best_platform",
        "__init__",
        "_extract_score",
        "_extract_feedback",
        "_get_technical_metrics",
        "__init__",
        "_create_director_prompt",
        "_create_script_writer_prompt",
        "_create_visual_storyteller_prompt",
        "_create_style_curator_prompt",
        "_create_tech_specialist_prompt",
        "_create_default_prompt",
        "_extract_visual_elements",
        "_extract_mood",
        "_create_generation_prompt",
        "_get_resolution_for_quality",
        "_get_frame_rate_for_quality",
        "_select_model_for_platform",
        "_create_generation_parameters",
        "get_project_status",
        "get_system_metrics"
      ],
      "classes": [
        "VideoGenerationPlatform",
        "VideoQuality",
        "VideoStyle",
        "ProductionStage",
        "AppleSiliconOptimization",
        "VideoProjectSpec",
        "SceneSpec",
        "VideoGenerationTask",
        "QualityAssessment",
        "AppleSiliconVideoAccelerator",
        "VideoGenerationPlatformManager",
        "VideoQualityAssessor",
        "VideoGenerationCoordinationSystem"
      ],
      "test_files": [
        "test_langchain_video_workflows.py"
      ],
      "coverage": {
        "lines_total": 1086,
        "lines_covered": 0,
        "lines_missing": 1086,
        "coverage_percentage": 0.0,
        "complexity_score": 11.11111111111111,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 92.6829268292683,
        "type_hints": 67.85714285714286,
        "error_handling": 21.428571428571427,
        "function_complexity": 2.4285714285714306
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/voice_enabled_agent_router.py": {
      "file_path": "sources/voice_enabled_agent_router.py",
      "functions": [
        "__init__",
        "_initialize_command_patterns",
        "_classify_voice_command",
        "_find_agent_by_role",
        "_set_workflow_state",
        "_handle_voice_result",
        "_handle_voice_status_change",
        "_update_performance_metrics",
        "get_status_report",
        "is_ready"
      ],
      "classes": [
        "VoiceCommandType",
        "VoiceWorkflowState",
        "VoiceRoutingResult",
        "VoiceWorkflowSession",
        "VoiceEnabledAgentRouter"
      ],
      "test_files": [
        "test_voice_integration_pipeline.py"
      ],
      "coverage": {
        "lines_total": 536,
        "lines_covered": 0,
        "lines_missing": 536,
        "coverage_percentage": 0.0,
        "complexity_score": 11.379310344827587,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 93.33333333333333,
        "type_hints": 45.0,
        "error_handling": 50.0,
        "function_complexity": 5.799999999999997
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "sources/voice_first_multi_agent_integration.py": {
      "file_path": "sources/voice_first_multi_agent_integration.py",
      "functions": [
        "__init__",
        "_process_raw_transcript",
        "_classify_voice_command",
        "_determine_task_type",
        "_determine_task_complexity",
        "_combine_workflow_results",
        "_create_voice_optimized_response",
        "_create_spoken_summary",
        "_create_voice_optimized_text",
        "_update_voice_metrics",
        "get_voice_system_status"
      ],
      "classes": [
        "VoiceWorkflowState",
        "VoiceCommandType",
        "VoiceAgentActivity",
        "VoiceWorkflowProgress",
        "VoiceCommand",
        "VoiceResponse",
        "VoiceFirstMultiAgentIntegration"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 603,
        "lines_covered": 0,
        "lines_missing": 603,
        "coverage_percentage": 0.0,
        "complexity_score": 13.213213213213212,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 94.44444444444444,
        "type_hints": 97.72727272727273,
        "error_handling": 22.727272727272727,
        "function_complexity": 0
      },
      "tdd_comments": true,
      "has_tests": false
    },
    "sources/voice_pipeline_bridge.py": {
      "file_path": "sources/voice_pipeline_bridge.py",
      "functions": [
        "__init__",
        "_initialize_components",
        "_initialize_production_pipeline",
        "_initialize_legacy_system",
        "_select_optimal_mode",
        "_start_legacy_pipeline",
        "_process_results_loop",
        "_set_status",
        "get_status",
        "get_performance_report",
        "is_ready",
        "get_capabilities"
      ],
      "classes": [
        "VoicePipelineMode",
        "VoiceStatus",
        "VoiceBridgeResult",
        "VoiceBridgeConfig",
        "VoicePipelineBridge"
      ],
      "test_files": [
        "test_voice_integration_pipeline.py"
      ],
      "coverage": {
        "lines_total": 464,
        "lines_covered": 0,
        "lines_missing": 464,
        "coverage_percentage": 0.0,
        "complexity_score": 15.551181102362206,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 94.11764705882352,
        "type_hints": 33.33333333333333,
        "error_handling": 58.333333333333336,
        "function_complexity": 0.4166666666666714
      },
      "tdd_comments": true,
      "has_tests": true
    },
    "supervisor_worker_3tier_memory_performance_test.py": {
      "file_path": "supervisor_worker_3tier_memory_performance_test.py",
      "functions": [
        "__init__",
        "init_database",
        "__init__",
        "_mock_response",
        "__init__",
        "_generate_recommendations",
        "_result_to_dict",
        "calculate_averages"
      ],
      "classes": [
        "PerformanceMetrics",
        "TestResult",
        "ThreeTierMemorySystem",
        "SupervisorWorkerAgent",
        "SupervisorWorkerPerformanceTest"
      ],
      "test_files": [
        "supervisor_worker_3tier_memory_performance_test.py"
      ],
      "coverage": {
        "lines_total": 683,
        "lines_covered": 0,
        "lines_missing": 683,
        "coverage_percentage": 0.0,
        "complexity_score": 9.178082191780822,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 69.23076923076923,
        "type_hints": 100,
        "error_handling": 37.5,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": true
    },
    "testflight_comprehensive_build_verification.py": {
      "file_path": "testflight_comprehensive_build_verification.py",
      "functions": [
        "main",
        "__init__",
        "verify_react_build_for_testflight",
        "verify_macos_build_for_testflight",
        "verify_deployment_readiness",
        "log_react_result",
        "log_macos_result",
        "log_deployment_result",
        "generate_testflight_summary_report",
        "run_comprehensive_testflight_verification"
      ],
      "classes": [
        "TestFlightBuildVerifier"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 373,
        "lines_covered": 0,
        "lines_missing": 373,
        "coverage_percentage": 0.0,
        "complexity_score": 16.91542288557214,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 81.81818181818183,
        "type_hints": 0.0,
        "error_handling": 25.0,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "verify_memory_system_ui_integration.py": {
      "file_path": "verify_memory_system_ui_integration.py",
      "functions": [
        "__init__",
        "_generate_recommendations",
        "_print_verification_summary"
      ],
      "classes": [
        "MemorySystemUIVerifier"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 419,
        "lines_covered": 0,
        "lines_missing": 419,
        "coverage_percentage": 0.0,
        "complexity_score": 12.008733624454148,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 75.0,
        "type_hints": 58.333333333333336,
        "error_handling": 100,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "verify_testflight_builds.py": {
      "file_path": "verify_testflight_builds.py",
      "functions": [
        "verify_build_exists",
        "get_build_info",
        "main"
      ],
      "classes": [],
      "test_files": [],
      "coverage": {
        "lines_total": 171,
        "lines_covered": 0,
        "lines_missing": 171,
        "coverage_percentage": 0.0,
        "complexity_score": 11.11111111111111,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 100.0,
        "type_hints": 8.333333333333332,
        "error_handling": 16.666666666666664,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    },
    "xcode_project_structure_compliance.py": {
      "file_path": "xcode_project_structure_compliance.py",
      "functions": [
        "main",
        "__init__",
        "verify_directory_structure",
        "verify_workspace_configuration",
        "verify_sandbox_compliance",
        "verify_production_clean",
        "verify_build_capability",
        "test_xcode_build",
        "log_workspace_result",
        "log_sandbox_result",
        "log_production_result",
        "log_build_result",
        "generate_compliance_summary",
        "run_comprehensive_verification"
      ],
      "classes": [
        "XcodeStructureVerifier"
      ],
      "test_files": [],
      "coverage": {
        "lines_total": 352,
        "lines_covered": 0,
        "lines_missing": 352,
        "coverage_percentage": 0.0,
        "complexity_score": 19.17808219178082,
        "test_score": 0.0,
        "tdd_compliance": false
      },
      "code_quality": {
        "docstring_coverage": 86.66666666666667,
        "type_hints": 1.7857142857142856,
        "error_handling": 21.428571428571427,
        "function_complexity": 0
      },
      "tdd_comments": false,
      "has_tests": false
    }
  },
  "recommendations": [
    "\ud83c\udfaf Increase test coverage to reach 80% threshold",
    "\ud83d\udcdd Add TDD comment blocks to all source files",
    "\ud83e\uddea Create test files for all untested source files",
    "\u26a0\ufe0f  Address 36 high-priority coverage gaps"
  ]
}