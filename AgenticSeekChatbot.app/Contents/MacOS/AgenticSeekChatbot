#!/usr/bin/osascript

-- AgenticSeek Chatbot with Apple Sign In and Real LLM APIs
-- Accessibility: Window has proper labels for automation testing

property userEmail : "bernhardbudiono@gmail.com"
property isAuthenticated : false
property currentProvider : "Anthropic Claude"
property apiKeys : {}

on run
	-- Load API keys from .env file
	loadAPIKeys()
	
	-- Show authentication dialog
	if authenticateUser() then
		-- Show main chatbot window
		showChatbotWindow()
	else
		display dialog "Authentication required to use AgenticSeek" buttons {"OK"} default button "OK"
	end if
end run

on loadAPIKeys()
	try
		set envFile to POSIX file "/Users/bernhardbudiono/Library/CloudStorage/Dropbox/_Documents - Apps (Working)/repos_github/Working/_repo_agenticseek/.env"
		set envContent to read envFile as ¬´class utf8¬ª
		
		set AppleScript's text item delimiters to return
		set envLines to text items of envContent
		set AppleScript's text item delimiters to ""
		
		repeat with envLine in envLines
			if envLine contains "=" and not (envLine starts with "#") then
				set AppleScript's text item delimiters to "="
				set keyValue to text items of envLine
				set keyName to item 1 of keyValue
				set keyVal to item 2 of keyValue
				-- Remove quotes if present
				if keyVal starts with "\"" and keyVal ends with "\"" then
					set keyVal to text 2 thru -2 of keyVal
				end if
				set apiKeys to apiKeys & {keyName:keyVal}
				set AppleScript's text item delimiters to ""
			end if
		end repeat
		
		log "‚úÖ API keys loaded successfully"
		
	on error errMsg
		log "‚ùå Error loading API keys: " & errMsg
		display dialog "Error loading API keys from .env file" buttons {"OK"} default button "OK"
	end try
end loadAPIKeys

on authenticateUser()
	-- Apple Sign In simulation with proper accessibility
	tell application "System Events"
		activate
		set authDialog to display dialog "üîê AgenticSeek Authentication" & return & return & "Sign in with Apple ID:" & return & userEmail & return & return & "This app requires authentication to access AI services." buttons {"Cancel", "Sign In with Apple"} default button "Sign In with Apple" with title "AgenticSeek SSO Authentication" giving up after 30
		
		if button returned of authDialog is "Sign In with Apple" then
			set isAuthenticated to true
			display notification "‚úÖ Signed in as " & userEmail with title "AgenticSeek Authentication"
			return true
		else
			return false
		end if
	end tell
end authenticateUser

on showChatbotWindow()
	-- Create main chatbot interface with accessibility labels
	tell application "System Events"
		activate
		
		-- Set proper window accessibility properties
		set chatWindow to display dialog "ü§ñ AgenticSeek AI Assistant" & return & return & "üë§ Signed in as: " & userEmail & return & "üß† Provider: " & currentProvider & return & return & "Type your message below:" buttons {"Switch Provider", "Send Message"} default button "Send Message" with title "AgenticSeek AI Chatbot - Main Window" default answer "" giving up after 300
		
		-- Set accessibility properties for the window
		try
			tell process "osascript"
				set frontmost to true
				-- Set accessibility identifier for automation
				set value of attribute "AXIdentifier" of window 1 to "AgenticSeekMainChatWindow"
				set value of attribute "AXTitle" of window 1 to "AgenticSeek AI Chatbot - Main Window"
				set value of attribute "AXDescription" of window 1 to "Main chat interface for AgenticSeek AI assistant with provider switching and message input"
				set value of attribute "AXRoleDescription" of window 1 to "AgenticSeek Chat Window"
			end tell
		end try
		
		if gave up of chatWindow then
			-- User closed window
			return
		end if
		
		if button returned of chatWindow is "Switch Provider" then
			switchProvider()
			showChatbotWindow() -- Show window again
		else if button returned of chatWindow is "Send Message" then
			set userMessage to text returned of chatWindow
			if userMessage is not "" then
				processMessage(userMessage)
			end if
			showChatbotWindow() -- Show window again for next message
		end if
	end tell
end showChatbotWindow

on switchProvider()
	tell application "System Events"
		set providerDialog to display dialog "üîÑ Switch AI Provider" & return & return & "Current: " & currentProvider & return & return & "Choose your AI provider:" buttons {"Cancel", "OpenAI GPT", "Anthropic Claude"} default button currentProvider with title "AgenticSeek Provider Selection"
		
		if button returned of providerDialog is "Anthropic Claude" then
			set currentProvider to "Anthropic Claude"
			display notification "üß† Switched to Anthropic Claude" with title "AgenticSeek"
		else if button returned of providerDialog is "OpenAI GPT" then
			set currentProvider to "OpenAI GPT"
			display notification "ü§ñ Switched to OpenAI GPT" with title "AgenticSeek"
		end if
	end tell
end switchProvider

on processMessage(userMessage)
	-- Show loading state with accessibility
	tell application "System Events"
		set loadingDialog to display dialog "ü§î " & currentProvider & " is thinking..." & return & return & "Your message: " & userMessage & return & return & "Please wait for response..." buttons {"Cancel"} default button "Cancel" with title "AgenticSeek - Processing Message" giving up after 2
	end tell
	
	-- Get AI response
	set aiResponse to getAIResponse(userMessage)
	
	-- Show response with accessibility
	tell application "System Events"
		set responseDialog to display dialog "üí¨ " & currentProvider & " Response:" & return & return & aiResponse & return & return & "Your message was: " & userMessage buttons {"Copy Response", "Continue Chatting"} default button "Continue Chatting" with title "AgenticSeek AI Response"
		
		-- Set accessibility for response window
		try
			tell process "osascript"
				set value of attribute "AXIdentifier" of window 1 to "AgenticSeekResponseWindow"
				set value of attribute "AXDescription" of window 1 to "AI response window showing message from " & currentProvider
			end tell
		end try
		
		if button returned of responseDialog is "Copy Response" then
			set the clipboard to aiResponse
			display notification "üìã Response copied to clipboard" with title "AgenticSeek"
		end if
	end tell
end processMessage

on getAIResponse(message)
	try
		if currentProvider is "Anthropic Claude" then
			return callAnthropicAPI(message)
		else if currentProvider is "OpenAI GPT" then
			return callOpenAIAPI(message)
		else
			return "‚ùå Provider not configured"
		end if
	on error errMsg
		return "‚ùå Error getting AI response: " & errMsg
	end try
end getAIResponse

on callAnthropicAPI(message)
	try
		set anthropicKey to getAPIKey("ANTHROPIC_API_KEY")
		if anthropicKey is "" then
			return "‚ùå Anthropic API key not found in .env file"
		end if
		
		-- Create JSON payload
		set jsonPayload to "{\"model\":\"claude-3-5-sonnet-20241022\",\"max_tokens\":1000,\"messages\":[{\"role\":\"user\",\"content\":\"" & message & "\"}]}"
		
		-- Call API using curl
		set curlCommand to "curl -s -X POST https://api.anthropic.com/v1/messages -H 'Content-Type: application/json' -H 'x-api-key: " & anthropicKey & "' -H 'anthropic-version: 2023-06-01' -d '" & jsonPayload & "'"
		
		set apiResponse to do shell script curlCommand
		
		-- Parse response (simplified)
		if apiResponse contains "\"text\":" then
			set AppleScript's text item delimiters to "\"text\":\""
			set responseText to text item 2 of apiResponse
			set AppleScript's text item delimiters to "\""
			set responseText to text item 1 of responseText
			set AppleScript's text item delimiters to ""
			return responseText
		else
			return "‚ùå Invalid API response format"
		end if
		
	on error errMsg
		return "‚ùå Anthropic API error: " & errMsg
	end try
end callAnthropicAPI

on callOpenAIAPI(message)
	try
		set openaiKey to getAPIKey("OPENAI_API_KEY")
		if openaiKey is "" then
			return "‚ùå OpenAI API key not found in .env file"
		end if
		
		-- Create JSON payload
		set jsonPayload to "{\"model\":\"gpt-4\",\"messages\":[{\"role\":\"user\",\"content\":\"" & message & "\"}],\"max_tokens\":1000}"
		
		-- Call API using curl
		set curlCommand to "curl -s -X POST https://api.openai.com/v1/chat/completions -H 'Content-Type: application/json' -H 'Authorization: Bearer " & openaiKey & "' -d '" & jsonPayload & "'"
		
		set apiResponse to do shell script curlCommand
		
		-- Parse response (simplified)
		if apiResponse contains "\"content\":" then
			set AppleScript's text item delimiters to "\"content\":\""
			set responseText to text item 2 of apiResponse
			set AppleScript's text item delimiters to "\""
			set responseText to text item 1 of responseText
			set AppleScript's text item delimiters to ""
			return responseText
		else
			return "‚ùå Invalid API response format"
		end if
		
	on error errMsg
		return "‚ùå OpenAI API error: " & errMsg
	end try
end callOpenAIAPI

on getAPIKey(keyName)
	repeat with keyPair in apiKeys
		if keyName of keyPair is keyName then
			return keyVal of keyPair
		end if
	end repeat
	return ""
end getAPIKey