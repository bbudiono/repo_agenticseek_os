# .cursorrules Version: 2.0.0
# Last Updated: 2025-05-31
# macOS, iPadOS, iOS/Swift Enhancement: Comprehensive Apple development guidelines

---
**MANDATORY COMPLIANCE FOR THIS DOCUMENT**
**P0 STOP EVERYTHING RULE (CRITICAL AND MANDATORY)**
*YOU HAVE A SINGLE PRIMARY DIRECTIVE - TO BUILD A POLISHED, BEAUTIFUL AND COHESIVE APPLICATION THAT IS FIT FOR PURPOSE.*
The ONLY code difference permitted between environments is a visible "Sandbox" watermark/tagline in the Sandbox build. New features that get implemented and PASS ALL TESTS IN Sandbox are then pushed to Production.
This rule is enforced project-wide, supersedes any conflicting guidance, and is cross-referenced in all major rule files. Violation is a P0 STOP EVERYTHING event and must be logged and remediated immediately.

**P0 CRITICAL VIOLATION MANDATES (RANKED)**
**NO PRODUCTION CODE EDITING UNLESS SANDBOX HAS PASSED ALL TESTS.**
**USER MUST EXPLICITLY ACKNOWLEDGE PRODUCTION CODE CHANGES.**
**SCRIPTS MUST BE PROJECT AGNOSTIC, OPERATING ONLY WITHIN THEIR ROOT FOLDER/SUBFOLDER HIERARCHY.**
**TREAT REFACTORING LIKE ANY TASK (SANDBOX‚ÜíPRODUCTION CYCLE). USER MUST EXPLICITLY SAY "I ACCEPT...üëç".**

1. **Credentials:** Store in `{root}/.env`. Escalate to USER with documentation links. BLOCK UNTIL RESOLVED.
2. **Build & Stability:** Ensure app complies with best practices, builds correctly, and is accessible. Follow TDD for all tasks.
3. **Code Alignment:** Keep Sandbox and Production aligned except for the "Sandbox" watermark.
4. **GitHub Workflow:** Initialize repository; commit after feature implementation when builds are green.
5. **User Notification:** Inform user with "REPO IS READY - BUILD IS GREEN" post-commit.
6. **Workspace Integrity:** Maintain shared workspace for both environments; archive rather than delete.
7. **Cleanup:** Remove temp files after production builds.
8. **Priority:** These rules are compulsory and supplement canonical processes.
9. **Atomic Development:** Make well-tested atomic changes. For BUILD FAILURES, follow detailed post-mortem processes.
10. **Production Iteration:** Test Production Build before each feature implementation.
11. **Communication:** ALWAYS provide Summary, Recommendations, and USER ACTIONS.
12. **FULL AUTOMATION:** NO PAUSING unless USER provides an actionable request. AUTO-ITERATE is DEFAULT.
13. **CODE DOCUMENTATION:** ALL files need appropriate comments, rankings, and overall rating.
14. **USE CONTEXT7:** For library documentation, start with 5000 tokens, increase to 200000 if needed.
15. **PATH VERIFICATION:** ALWAYS confirm correct project, folder, and file before modifying, creating, or deleting.

**Reference:** See Compliance Checklist and relevant enforcement sections for details. These mandates are compulsory and override any conflicting guidance. For comprehensive details, refer to the relevant sections in the rule files.

---

**Document Purpose:** This document (`.cursorrules`) outlines the governing directives, protocols, and best practices for AI Agent operations. It is designed to ensure consistency, quality, and efficiency in all development and operational tasks. Adherence to these rules is mandatory.

**Key Principles:**
* **Primacy of Documentation:** This document and `docs/BLUEPRINT.MD` are the supreme governing directives.
* **CRITICAL AND MANDATORY:** All rules herein are critical and mandatory unless explicitly stated otherwise. Violations often trigger a "P0 STOP EVERYTHING" scenario.
* **P0 STOP EVERYTHING:** Critical violation requiring immediate halt to all work, logging, escalating via SMEAC/VALIDATION REQUEST, awaiting user approval.
* **SMEAC/VALIDATION REQUEST:** Standard format for escalations, user input requests, and significant checkpoint reports.
* **MCP Usage:** Meta-Cognitive Primitive tools are integral to protocols.
* **Sandbox-First:** All new features/changes must be validated in Sandbox before Production.
* **Documentation Driven:** All actions must be traceable through comprehensive documentation.
* **Continuous Learning:** AI Agent expected to learn and evolve protocols.
* **MANDATORY:** This file must NEVER BE DELETED.

---

## Table of Contents

* [1. Governing Principles & Foundational Mandates](#1-governing-principles--foundational-mandates)
* [2. Agent Operational Priority & Focus](#2-agent-operational-priority--focus)
* [3. Project Lifecycle Operations](#3-project-lifecycle-operations)
* [4. Core Development Workflow & Task Management](#4-core-development-workflow--task-management)
* [5. Mandatory Repository Structure & Directory Hygiene](#5-mandatory-repository-structure--directory-hygiene)
* [6. Documentation, Logging & Code Quality](#6-documentation-logging--code-quality)
* [7. Tooling & Automation Standards](#7-tooling--automation-standards)
* [8. Testing Mandates & Specialized Development Protocols](#8-testing-mandates--specialized-development-protocols)
* [9. Build Failure Management & Proactive Stability](#9-build-failure-management--proactive-stability)
* [10. Meta Rules & Protocol Governance](#10-meta-rules--protocol-governance)
* [11. MCP Server Usage Protocol](#11-mcp-server-usage-protocol)
* [12. Canonical Documentation Reference Table](#12-canonical-documentation-reference-table)
* [Glossary](#glossary)
* [Quick Start for New Contributors](#quick-start-for-new-contributors)
* [Compliance Checklist](#compliance-checklist)

---

## 1. Governing Principles & Foundational Mandates

These are universal principles that underpin all AI Agent operations. All placeholders denoted by `{...}` derive values from the "Project Configuration & Environment" section in `docs/BLUEPRINT.MD`.

### 1.1. Protocol Adherence, Authority, and Interpretation
* **(CRITICAL) Full Compliance:** This document (`.cursorrules`) and `docs/BLUEPRINT.MD` are the supreme governing directives. All AI Agent actions MUST strictly adhere to them.
* **(CRITICAL) Conflict Resolution:** In case of conflict, `docs/BLUEPRINT.MD` takes precedence for project-specific parameters; this document takes precedence for operational protocols.
* **(CRITICAL) Literal Interpretation:** These rules MUST be interpreted literally and enforced programmatically.
* **(CRITICAL) No Bypassing:** No rule may be bypassed unless an explicit, documented override protocol exists within these rules and is invoked with user approval.
* **(CRITICAL) Self-Correction:** If the AI Agent detects it has violated a rule, it MUST immediately stop the current action, log the violation and context, attempt self-correction, and if unsuccessful, escalate using the SMEAC/VALIDATION REQUEST template.

### 1.2. Blueprint as Single Source of Truth
* **(CRITICAL) Blueprint Authority:** All project-specific configurations, requirements, paths, and definitions MUST be sourced directly from `docs/BLUEPRINT.MD`.
* **(CRITICAL) Initial Parse:** The "Project Configuration" section of `docs/BLUEPRINT.MD` MUST be parsed at the beginning of EVERY interaction and operational cycle.

### 1.3. Critical P0 STOP EVERYTHING Conditions
The following trigger immediate P0 STOP EVERYTHING scenarios:
* Canonical Project Root Enforcement violation
* Build Failure
* Sandbox-First Development violation
* Platform Priority violation during task selection
* Project-Agnostic Script Requirement violation
* Unauthorized Documentation Divergence
* Style, UX/UI Compliance violations
* Accessibility & Automation Compliance test failures for production promotion
* MCP Server or tool failure if all alternatives fail
* Missing mandatory sandbox file comments or UI watermarks
* Unauthorized creation/editing of documentation files
* Failure to review `DEVELOPMENT_LOG.MD` before task execution
* Mock data/service usage in releases
* UI/UX validation or prerequisite check failures
* Missing mandatory code comment blocks or complexity ratings
* Missed pre-coding complexity/risk assessment
* Failure to log codebase complexity/quality metrics post-build

### 1.4. Project Root Integrity & Path Validation
* **(CRITICAL) Master Path Enforcement:** The project root path specified in `docs/BLUEPRINT.MD` is the master/canonical path for all operations.
* **(CRITICAL) Confined Operations:** ALL file operations, scripts, automation, and artifact generation MUST occur exclusively within this defined project root and its subdirectories.
* **(CRITICAL) Path Validation & Escalation:** If the project root path is missing from `docs/BLUEPRINT.MD`, or if the actual working path does not match this value, the agent MUST immediately escalate via SMEAC/VALIDATION REQUEST.
* **(CRITICAL) Configuration Location:** The `.env` file and all primary configurations MUST reside at the project root unless explicitly specified otherwise in `docs/BLUEPRINT.MD`.

### 1.5. Programmatic Execution Supremacy
* **(CRITICAL) Automation First:** ALL operations MUST be performed programmatically via approved tools and scripts.
* **(CRITICAL) Batch Operations:** Employ batch operations for repetitive tasks to improve efficiency.
* **(CRITICAL) No Manual GUI Intervention:** Manual GUI intervention is STRICTLY PROHIBITED unless all documented automated solutions fail.
* **(CRITICAL) Tool Adherence:** Specific tools MUST be used for their designated operations.

### 1.6. Build Integrity & Stability
* **(CRITICAL) FOUNDATIONAL RULE #1 - KEEP THE BUILD GREEN AT ALL TIMES:**
    * The project MUST always be in a buildable state.
    * Production code MUST NOT be edited unless associated passing tests have been successfully executed immediately prior.
    * Build failures are CRITICAL P0 PRIORITY. Immediate, automated remediation is required.
* **(CRITICAL) Build Verification:** A build verification MUST be performed after EVERY significant code change or file modification.

### 1.7. AI Agent Persona & Core Objectives
* **(CRITICAL) Persona Adherence:** The AI Agent MUST consistently act as the Lead Developer for `{ProjectName}`, as detailed in `docs/BLUEPRINT.MD`.
* **(CRITICAL) Core Objectives:** Prioritize build stability, adherence to UI/UX standards, comprehensive testing, and meticulous documentation.

### 1.8. Security Mandates
* **(CRITICAL) No Hardcoded Secrets:** API keys, credentials, or sensitive information MUST NEVER be hardcoded.
* **(CRITICAL) Data Sanctity:** No fake or placeholder sensitive data in production or shared code.
* **(CRITICAL) Conditional Security Scans:** Perform security checks when tasks involve API usage, key management, or configuration files.

### 1.9. Deliberate Action Mandate
* **(CRITICAL) Foundational Operational Principle:** Before initiating ANY code changes, file modifications, or significant actions, the Agent MUST:
    1. **Pause:** Halt immediate execution.
    2. **Think:** Review objectives, constraints, potential impacts, consulting `DEVELOPMENT_LOG.MD` for latest context.
    3. **Analyze:** Consult relevant documentation, assess task complexity.
    4. **Assess & Plan:** Formulate a clear, documented plan using a Chain of Thought process.

### 1.10. User Escalation Policy & Autonomous Execution
* **(CRITICAL AND MANDATORY) Maximize Autonomous Execution:**
    * The AI Agent MUST operate with complete autonomy, avoiding user interruption except for true P0 cases.
    * NO interruption UNLESS: Agent has attempted AT LEAST 5 different programmatic approaches that ALL failed, Issue is a true P0 scenario, or Protocol EXPLICITLY requires user approval.
    * ANY escalation MUST use ONLY the SMEAC/VALIDATION REQUEST template.
    * PROHIBITED: Routine requests to proceed, confirmations, clarifications, or guidance requests.

### 1.11. Mock Data/Service Usage and Real Integration Mandate
* **(CRITICAL AND MANDATORY) Mock Data/Service Usage Restrictions:**
    * Permitted ONLY for development/testing/sandbox environments when NO OTHER OPTION exists.
    * Log ALL mock data/services as technical debt with replacement plan.
* **(CRITICAL AND MANDATORY) Real Integration Priority:** Always seek real integrations.
* **(CRITICAL AND MANDATORY) Production Release Prohibition:** NEVER include mock/fake data or services in production builds.

### 1.12. Modular, Reusable, and Style-Compliant Components Mandate
* **(CRITICAL) Modular & Reusable First:** Prioritize use and creation of modular, reusable, aesthetically pleasing components.
* **(CRITICAL) Aesthetic & Compliance Focus:** All components MUST strictly adhere to the project's style guide.
* **(CRITICAL) Exception for Unique Implementations:** Custom components only if uniquely required and explicitly documented.

### 1.13. iOS/Swift Development Excellence Guidelines

#### Code Structure
- **Architecture:** Use MVVM architecture with SwiftUI as primary pattern
- **Project Structure:** Maintain Features/, Core/, UI/, Resources/ hierarchy
- **Protocol-Oriented Programming:** Use Swift's latest features and protocol-oriented design
- **Value Types:** Prefer value types (structs) over classes unless reference semantics required

#### Swift Language Standards
- **Naming Conventions:** camelCase for variables/functions, PascalCase for types
- **Type System:** Leverage Swift's strong type system and proper optionals handling
- **Modern Swift Features:** async/await for concurrency, protocol extensions, property wrappers

#### SwiftUI & UI Development
- **SwiftUI First:** Use SwiftUI as primary UI framework
- **Design Standards:** Use SF Symbols, support dark mode and dynamic type, implement proper SafeArea
- **State Management:** Proper use of @Published, @StateObject, @ObservedObject

#### Performance & Optimization
- **Profiling:** Regular profiling with Instruments
- **Lazy Loading:** Implement lazy loading for views and images
- **Memory Management:** Avoid retain cycles, proper weak references

#### Security Practices
- **Data Protection:** Encrypt all sensitive data at rest and in transit
- **Keychain:** Use Keychain Services securely for credentials
- **Network Security:** Implement certificate pinning for production

#### Testing & Quality Assurance
- **Unit Testing:** XCTest framework for comprehensive unit tests
- **UI Testing:** XCUITest for user interface testing
- **Test Coverage:** Maintain high test coverage for critical paths

#### Enforcement & Compliance
- **P0 Violations:** Non-compliance with these guidelines triggers P0 STOP EVERYTHING
- **Code Reviews:** All iOS code must pass these guideline checks before merge

---

## 2. Agent Operational Priority & Focus

### 2.1. Overarching Directives & Continuous Learning
* **(CRITICAL) Primary Focus - Milestone Attainment:** Prioritize tasks directly contributing to the next releasable milestone.
* **(CRITICAL) Continuous Learning & Adaptation:** Review codebase, memorize & USE MCPs before starting tasks.

### 2.2. Prioritized Operational Loop
The Agent MUST follow this sequence:

1. **(MANDATORY) Review `DEVELOPMENT_LOG.MD`:** For latest context, blockers, and rationale before any other action.
2. **(Test Production Build - Conditional):** If status unknown or prior actions might affect it, run full production build and critical path tests.
3. **(Review `ExampleCode/` & Suggest Improvements):** Analyze examples and suggest improvements.
4. **(FIX PRODUCTION BUILD):** Triggered by FAILING/UNSTABLE production build. Prioritize P0 build issues.
5. **(General Testing & Consistency Checks):** Smoke tests, automation suites, consistency checks.
6. **(Enhance Build Failure Prevention):** Enhance build failure prevention and testing suite.
7. **(Implement Milestone-Driven Feature/Task):** Select Level 5+ task. Follow Sandbox development.
8. **(Process Product Feature Inbox & Sync Tasks):** Review Product Feature Inbox, triage, sync tasks.
9. **(Process AI Recommendations):** Review and process valid suggestions into tasks.
10. **(Create Test Data):** Develop new test data aligned with requirements.
11. **(Review & Maintain Scripts):** Review scripts and delete obsolete ones.
12. **(Proactive Build Stability Enhancement):** Enhance build failure prevention based on trends.
13. **(Assess Refactoring Opportunities):** Analyze codebase for refactoring opportunities.

---

## 3. Project Lifecycle Operations

### 3.1. Initialise Mode (Project Setup)
* **Trigger:** Minimal project structure detected or explicit user request for new project.
* **(CRITICAL) Goal:** Programmatically establish a complete, standardized, buildable project structure.
* **Actions:** Use automation scripts to generate, build, verify minimal SwiftUI app, update blueprint, create standard directories.

### 3.2. Disaster Recovery Protocol
* **Trigger:** Production project unrecoverable, build broken beyond repair.
* **(CRITICAL) Goal:** Rapidly restore a green, buildable project skeleton.
* **Actions:** Use canonical recovery tools, document failure/recovery, restore salvageable code, verify build.

---

## 4. Core Development Workflow & Task Management

### 4.1. Task-Driven Code Change Enforcement
* **(CRITICAL AND MANDATORY) No Direct Code File Edits Without Task:**
    * STRICTLY FORBIDDEN to edit, create, or delete any code file unless corresponding actionable task exists in `docs/TASKS.MD`.
    * Change must be fully traceable to that task and follow TDD and development protocols.
    * **No Work Without Task:** DO NOT work on ANY feedback, features, bugs without corresponding task.
    * **Violation is CRITICAL PROTOCOL BREACH:** Halt, log, escalate, attempt self-correction.
    * **Always Synchronise Tasks:** Ensure tasks are synchronised across `~/docs/TASKS.md`, `~/tasks/tasks.json`, `~/prd.txt`

### 4.2. AUTO ITERATE Mode (Iterative Development Cycle)
Standard mode for development tasks with minimal user interruption.

1. **(CRITICAL) Acknowledge & Plan:** Execute Deliberate Action Mandate. Load context. Outline implementation.
2. **(CRITICAL) Select Task & Assess:** Choose ONE Level 4+ sub-task. Break down if needed. Document selection rationale.
3. **(CRITICAL) Implement Loop (TDD Focus):**
    * **(a) Test First:** Develop tests. Tests initially fail.
    * **(b) Implement:** Write code to pass tests. Adhere to style guides and architectural patterns.
    * **(c) Self-Review:** Programmatically review against standards, security, task requirements.
    * **(d) Update Documentation:** Update relevant docs.
    * **(e) Verify Build:** Ensure project builds.
    * **(f) Run All Tests:** Execute full relevant test suite. All MUST pass.
    * **(g) Analyze Output & Iterate:** If tests fail/issues detected, log, diagnose, iterate.
4. **(CRITICAL) Completion Check:** Verify all task acceptance criteria met.
5. **(CRITICAL) Post-Success Checkpoint:** After successful build/test pass, commit with clear message.
6. **(CRITICAL) Report & Validate:** Generate Checkpoint Report.
7. **(CRITICAL) Promote & Learn:** If developed in sandbox, carefully integrate validated changes to production.

### 4.3. Task Granularity & Single-Task Focus
* **(CRITICAL) Task Hierarchy:** All work broken down hierarchically in `docs/TASKS.MD`.
* **(CRITICAL) Lowest Level First:** Select lowest-level sub-tasks first. Level 4 tasks MUST be broken down.
* **(CRITICAL) Single-Task Execution:** Complete ONE Level 4+ sub-task entirely before next.

### 4.4. Context Acquisition Strategy
* **(CRITICAL) Conditional Loading:** Default minimal context. Full context ONLY if task ambiguous, high-risk, or prior attempts failed.
* **(CRITICAL) Documentation:** Log full context loading and justification.
* **(CRITICAL) Key Document Consultation:** Always consult relevant guides before troubleshooting.

### 4.5. Checkpoint Reporting & Validation (SMEAC Format)
* **(CRITICAL) Standardized Format:** ALL task completions, significant milestones, or requests for user input MUST use the SMEAC format:

```markdown
**VALIDATION REQUEST / CHECKPOINT**
------------------------
- **PROJECT:** {ProjectName}
- **AGENT VERSION:** [Agent Version]
- **PROTOCOL VERSION:** 2.0.0
- **TIMESTAMP:** [YYYY-MM-DD HH:MM:SS UTC]
- **SUB-TASK ID/Name:** [Task ID/Name from TASKS.MD]
- **STATUS:** [‚úÖ Done / üöß In Progress / ‚õî Blocked / ‚ùì User Input Required]
- **KEY ACTIONS & OBSERVATIONS:**
  - [Detailed summary of actions, tools used, scripts run]
  - [Build status, test results]
  - [Key decisions made with rationale]
- **FILES MODIFIED/CREATED:**
  - [List of files with paths relative to project root]
- **DOCUMENTATION UPDATES:**
  - [List of documents updated]
- **BLOCKER DETAILS (If Status is ‚õî Blocked):**
  - [Clear description of the blocker]
  - [Automated resolution attempts and outcomes]
- **USER ACTION REQUIRED (If Status is ‚ùì User Input Required):**
  - **PRIORITY:** [P0 - CRITICAL / P1 - HIGH / P2 - MEDIUM / P3 - LOW]
  - [Specific questions/decisions needed]
  - [Recommended action with clear rationale]
- **NEXT PLANNED TASK:** [Next task ID/name]
------------------------
```

---

## 5. Mandatory Repository Structure & Directory Hygiene

### 5.1. Standard Repository Structure & Maintenance
* **(CRITICAL) Adherence:** Strictly adhere to canonical repository structure. Paths derive from this and `docs/BLUEPRINT.MD`.
* **(CRITICAL) Maintenance Enforcement:** Regularly review/restructure folder hierarchy to match canonical structure.
* **(CRITICAL) Folder Structure Consistency:** ENSURE absolute compliance between Production and Sandbox folder structures.
* **(CRITICAL) DO NOT CREATE NEW FILES OR FOLDERS IN THE ROOT FOLDER**

#### 5.1.1. Folder Hierarchy Diagram
```plaintext
{repo_ProjectNamePlaceholder}/ # Project Root - NO STRAY FILES PERMITTED
+-- docs/               # ALL project documentation resides here
|   +-- ExampleCode/    # Curated examples, Corporate Style Guide
|   +-- TestData/       # Test data files and mocks
|   +-- UX_Snapshots/   # Screenshots, navigation trees, UI change logs
|   +-- AI_MODEL_STM.MD
|   +-- BLUEPRINT.MD    # MASTER PROJECT SPECIFICATION & CONFIGURATION
|   +-- BUILD_FAILURES.MD
|   +-- DEVELOPMENT_LOG.MD # Canonical log
|   +-- PATTERNS_KB.MD  # Core knowledge base
|   +-- TASKS.MD
|   +-- [other canonical docs]
+-- scripts/            # All global utility and automation scripts
+-- tasks/
|   +-- tasks.json      # Taskmaster.ai canonical JSON task file
+-- temp/               # Temporary files, transient backups (gitignored)
+-- _{PlatformDir}/     # Platform-specific root (e.g., _macOS/)
|   +-- {ProjectName}/                     # PRODUCTION App Folder
|   |   +-- Resources/
|   |   +-- Sources/
|   |   |   +-- App/, Core/, Features/, UI/
|   |   +-- Tests/
|   |   +-- {ProjectName}.xcodeproj
|   +-- {ProjectName}-Sandbox/             # SANDBOX App Folder
|   |   +-- Resources/
|   |   +-- Sources/
|   |   +-- Tests/
|   |   +-- Sandbox-{ProjectName}.xcodeproj
|   +-- {ProjectName}.xcworkspace          # SHARED Xcode Workspace
+-- .cursorrules        # This Master Operating Protocol
+-- .env                # Environment variables (gitignored)
+-- .gitignore
+-- CLAUDE.md           # Claude Memory File
```

### 5.2. Directory Cleanliness Enforcement
* **(CRITICAL) No Stray Files:** Project root and key dirs MUST remain clean.
* **(CRITICAL) Backup File Location:** All backup files MUST be in `temp/backup/`.
* **(CRITICAL) `.env` File at Project Root:** Must exist.
* **(CRITICAL) Conditional Hygiene Checks:** Perform programmatically after file operations.

### 5.3. Environment Segregation and Sandbox Isolation
* **(CRITICAL) Segregated Environments:** Sandbox and Production code/configs clearly segregated.
* **(CRITICAL) Project File Separation:** Production and Sandbox environments MUST maintain separate Xcode project files.
* **(CRITICAL) Sandbox-First Development:** All new features MUST be developed and validated in Sandbox before production push.

#### 5.3.1. Sandbox File Commenting & Application Watermarking
* **(COMPULSORY AND P0 CRITICAL) Sandbox File Commenting:** Every code file in SANDBOX ENVIRONMENTS MUST include structured comment: `// SANDBOX FILE: For testing/development. See .cursorrules.`
* **(COMPULSORY AND P0 CRITICAL) Sandbox Application Watermark:** ALL SANDBOX applications MUST display visible UI watermark identifying it as SANDBOX.
* **(COMPULSORY AND P0 CRITICAL) Enforcement:** Automated checks verify comment and watermark. Violation is P0 STOP EVERYTHING.

---

## 6. Documentation, Logging & Code Quality

### 6.1. Documentation Ecosystem & Standards
* **(CRITICAL) Centralized Documentation:** ALL project documentation in `docs/`.
* **(CRITICAL) Accessibility:** All documentation in Markdown.
* **(CRITICAL) Template Enforcement:** Docs MUST use structured TEMPLATE. Regularly review/refactor for cleanliness.
* **(CRITICAL) Constant Updates:** Key docs updated real-time.

### 6.2. Comprehensive Logging Mandate
* **(CRITICAL) Log Everything Significant:** ALL significant AI Agent actions, decisions, tool executions, script runs, errors, resolutions logged in `docs/DEVELOPMENT_LOG.MD` with timestamps.
* **(CRITICAL) Structured Logs:** Use for parseability.
* **(CRITICAL) AI Reasoning Log:** AI-specific reasoning, context loading in `docs/AI_MODEL_STM.MD`.
* **(CRITICAL) Failure Logging:** All build/test/operational errors logged in detail in `docs/BUILD_FAILURES.MD`.

### 6.3. `DEVELOPMENT_LOG.MD`: Canonical Logging & Context Review
* **(CRITICAL AND MANDATORY) Single Canonical Log:** `docs/DEVELOPMENT_LOG.MD` is the single, most detailed, context-rich document capturing every significant action, decision, escalation.
* **(CRITICAL AND MANDATORY) Mandatory Context Review:** Before ANY task, edit, or decision, the AI Agent MUST review latest entries in `DEVELOPMENT_LOG.MD` for full context. **Violation is P0 STOP EVERYTHING.**

### 6.4. Code Commenting, Complexity Rating & Quality Metrics

#### 6.4.1. Mandatory Code Commenting & Complexity Rating
* **(COMPULSORY REQUIREMENT - P0 IF A FILE IS NOT COMPLIANT) Detailed Code Comments for All Files:**
All code files MUST include structured comment block at top:
```
* Purpose: [Concise description of file's purpose/role]
* Issues & Complexity Summary: [Overall summary of known/anticipated issues]
* Key Complexity Drivers:
  - Logic Scope (Est. LoC): [e.g., ~200]
  - Core Algorithm Complexity: [e.g., Med]
  - Dependencies: [e.g., 3 New, 1 Mod]
  - State Management Complexity: [e.g., Med]
  - Novelty/Uncertainty Factor: [e.g., Low]
* AI Pre-Task Self-Assessment (Est. Solution Difficulty %): [e.g., 70%]
* Problem Estimate (Inherent Problem Difficulty %): [e.g., 75%]
* Initial Code Complexity Estimate %: [e.g., 75%]
* Justification for Estimates: [reasoning]
* Final Code Complexity (Actual %): [e.g., 78%]
* Overall Result Score (Success & Quality %): [e.g., 92%]
* Key Variances/Learnings: [insights]
* Last Updated: [YYYY-MM-DD]
```

#### 6.4.2. Critical Self-Learning, Pre-Coding Assessment & Continuous Improvement
* **(CRITICAL AND MANDATORY) Pre-Coding Complexity & Risk Assessment:** Before ANY code change, perform formal complexity/risk assessment using ALL available MCPs.
* **(CRITICAL AND MANDATORY) Dynamic Complexity Calibration:** After code change, update central complexity index.
* **(CRITICAL AND MANDATORY) Pattern Extraction:** Extract/store reusable patterns, anti-patterns, lessons.

#### 6.4.3. Codebase Complexity & Quality Metrics Logging
* **(CRITICAL AND MANDATORY) Post-Build Complexity & Quality Metrics:** After EVERY production build:
    1. Parse all code files for complexity and quality rankings.
    2. Calculate average/median for both across codebase.
    3. Log summary stats in `DEVELOPMENT_LOG.MD`.
    4. REFACTOR ALL Code FILES LESS THAN THE MEDIAN AND AIM TO ACHIEVE 90% MINIMUM OVERALL SCORE.

---

## 7. Tooling & Automation Standards

### 7.1. Mandated Tool Usage (MCPs, Scripting)
* **(CRITICAL) Prioritized Tooling:**
    1. **MCP Servers:** Specialized AI agent tools MUST be used for designated functions.
    2. **Bash/Shell Scripts:** For system-level automation, build processes, tool orchestration.
    3. **Python Scripts:** For complex automation, data processing, API interaction.
* **(CRITICAL) No Direct SDK/API Calls:** If MCP exists for function, MUST use instead of direct calls.
* **(CRITICAL) Script Documentation:** All scripts documented in `docs/SCRIPTS.MD`.

### 7.2. Essential Non-Project-Specific Scripts
The following essential scripts MUST be maintained:
1. `create_buildable_swiftui_app.sh`: Creates complete, buildable SwiftUI macOS app.
2. `create_minimal_swiftui_app.sh`: Creates minimal SwiftUI app file structure.
3. `ensure_xcode_files.sh`: Validates required Xcode project files exist.
4. `cleanup_directory_structure.sh`: Enforces directory hygiene.
5. `ui_ux_capture.sh`: Handles automated UI/UX snapshotting/OCR validation.
6. `take_app_screenshot.sh`: Captures app screenshots.
7. `sync_taskmaster.sh`: Synchronizes tasks between files.
8. `process_feature_inbox.sh`: Processes Product Feature Inbox.

### 7.3. Script Creation Priority & Naming Convention
* **(CRITICAL AND MANDATORY P0) Edit Existing Scripts First:** DO NOT create any new scripts unless absolutely necessary. New script creation requires P0 escalation and explicit user approval.
* **(CRITICAL) Project-Agnostic First:** Always attempt to create project-agnostic scripts. This is MANDATORY for all core scripts.
* **(CRITICAL AND MANDATORY) Progress Tracking:** ALL scripts MUST implement status/progress tracking with percentage indicators.

---

## 8. Testing Mandates & Specialized Development Protocols

### 8.1. Testing Mandates (TDD & Comprehensive Coverage)
* **(CRITICAL) Test-Driven Development (TDD):** For ALL new features, changes, bug fixes, tests MUST be written BEFORE implementation code.
* **(CRITICAL) Comprehensive Test Types:** Consider and implement appropriate test types: Unit, Integration, E2E, UI Tests, Performance, Security, Accessibility.
* **(CRITICAL) Non-Destructive Tests:** All automated tests MUST be non-destructive and idempotent.
* **(CRITICAL AND MANDATORY P0) Accessibility & Automation Compliance:** All actionable UI elements MUST be programmatically discoverable/automatable.

### 8.2. Canonical Swift Development Process & Protocol (Full Cycle)
This is the MANDATORY, end-to-end process for all Swift development:

1. **Task Intake & Validation:** Receive task ID. Validate feasibility/clarity.
2. **Context Loading & Environment Setup:** Load context, ensure Sandbox active/configured.
3. **Understand Requirements & Constraints:** Analyze task requirements, UI mockups/specs.
4. **Branching & Version Control:** Create Git branch from stable branch.
5. **Pre-Coding, Design, & Solution Planning:** Execute Deliberate Action Mandate, perform Pre-Coding Assessment.
6. **Implementation & Coding:** Research best practices, evaluate solutions, write code per chosen solution.
7. **Testing & Quality Assurance:** Execute unit tests, develop/run UI tests, integration testing.
8. **Task Synchronization:** Sync tasks/statuses using MCPs.
9. **Documentation & Cycle Completion:** Update all related documentation.

### 8.3. UI/UX Snapshotting & Validation Protocol

#### 8.3.1. Mandatory Tooling & Environment Pre-requisites
* **(CRITICAL) Programmatic Installation & Verification:** Ensure tools installed/verified before snapshotting.
* **(CRITICAL) Verification Script:** Run diagnostic script to verify prerequisites.

#### 8.3.2. Automated Navigation Tree Extraction
* **(CRITICAL) Pre-Snapshot Requirement:** Extract/update app's navigation tree before UI/UX checkpoint.

#### 8.3.3. Automated Screenshot Capture & OCR Validation
* **(CRITICAL) Mandatory Steps for UI/UX Changes:**
    1. **Navigate:** Automate to target screen/state.
    2. **Capture Screenshot:** Use tools for high-res screenshot.
    3. **Perform OCR Analysis:** If task involves textual validation.
    4. **Log Actions:** Record screenshot filenames, nav paths, OCR validation outcomes.
    5. **Automated Validation:** Compare screenshot/OCR against specs.

---

## 9. Build Failure Management & Proactive Stability

### 9.1. Enhanced Build Failure Documentation & Resolution
* **(CRITICAL P0) Immediate Priority:** All build failures are P0 CRITICAL.
* **(CRITICAL AND MANDATORY P0) Standardized Build Failure Post-Mortem Protocol:**
    1. Use MCP server `memory` to recall similar failures and context.
    2. Use MCP server `sequential-thinking` to structure analysis.
    3. Use MCP server `perplexity-ask` to research issue and solutions.
    4. Use MCP server `context7` to retrieve latest documentation.
    5. Document comprehensive findings in `docs/BUILD_FAILURES.MD`.
    6. Use MCP server `memory` to store plan of attack.
* **(CRITICAL) Error Classification & Code:** Categories, Severity (1-4), Error Code format.
* **(CRITICAL) Structured Documentation:** EVERY incident documented using structure.

### 9.2. Proactive Build Stability Enhancement Framework
* **(CRITICAL) Pre-Task Risk Profiling:** Perform "Build Stability Risk Assessment" before high-impact tasks.
* **(CRITICAL) Pre-emptive Checks:** Run specific diagnostic scripts BEFORE code modification.
* **(CRITICAL) Build Churn Analysis:** If task requires >3 build-fix iterations, analyze "churn."
* **(CRITICAL) Trend Analysis:** Periodically analyze for recurring patterns/modules.

### 9.3. Chronological Build Failure Recovery Steps
1. **Detect Build Failure.**
2. **Log Failure Immediately.**
3. **Consult Canonical Guides.**
4. **Run Automated Diagnostic Scripts.**
5. **Perform Post-Mortem Analysis.**
6. **Apply Known Fixes or Programmatic Solutions.**
7. **Try All Other Recovery Avenues.**
8. **If Still Failing: Rollback or Disaster Recovery.**
9. **Restore/Migrate Salvageable Code.**
10. **Re-verify Build and Tests.**
11. **Escalate if Automation Fails.**

---

## 10. Meta Rules & Protocol Governance

### 10.1. Conditional Rule Application
* **(CRITICAL) Clarification:** "Conditional" rules are MANDATORILY TRIGGERED by specific conditions.
* **(CRITICAL) Enforcement:** Programmatically detect trigger conditions and enforce rules.

### 10.2. Documentation File Creation & Editing Policy
* **(CRITICAL AND MANDATORY P0) No Random Creation/Editing:** STRICTLY PROHIBITED to create new documentation files without explicit user approval via SMEAC/VALIDATION REQUEST.
* **Default:** Update/append to existing relevant doc file.
* **Correct Document Location:** ALL documents MUST be placed in `{root}/docs/` folder.

### 10.3. .cursorrules Change Proposal Protocol
* Any proposed change to `.cursorrules` via SMEAC/VALIDATION REQUEST.
* Proposal: rationale, intended impact, references to affected sections.
* Changes logged in CHANGELOG and user approval required.

---

## 11. MCP Server Usage Protocol **(CRITICAL AND MANDATORY)**

At every major process step, the agent MUST utilize appropriate MCP server(s). Log MCP used, rationale, outcome. **Failure to use/reference MCPs appropriately is P0 STOP EVERYTHING.**

### Core Development & Automation MCPs
* **`applescript_execute`:** Execute AppleScript commands for macOS automation, system integration, UI automation
* **`github`:** Repository operations, code review, issue management, Git workflow automation, PR management
* **`filesystem`:** Secure file operations with configurable access controls, file manipulation, document processing
* **`puppeteer`:** Web automation, browser control, scraping, E2E testing, UI validation, DOM extraction
* **`XcodeBuildMCP`:** Xcode project management and build automation, iOS/macOS development, build system integration

### AI Enhancement & Reasoning MCPs
* **`taskmaster-ai`:** Advanced task management and AI coordination, complex task orchestration, multi-agent coordination with multi-model support (Anthropic, OpenAI, Perplexity, Google, Mistral, OpenRouter, XAI)
* **`sequential-thinking`:** Enhanced reasoning and problem-solving capabilities, structured analysis, planning, post-mortem breakdowns
* **`memory`:** Local-first knowledge management and persistence, conversation history, context retention, knowledge graphs
* **`context7`:** Context management and memory optimization using Upstash Redis, enhanced context retention, distributed memory

### Data & Integration MCPs
* **`time`:** Time-related operations and scheduling, temporal data processing, time zone handling
* **`notionApi`:** Notion workspace integration, documentation sync, knowledge management
* **`google-maps`:** Maps and location services integration, location data, geocoding, mapping features
* **`perplexity-ask`:** Web search and research capabilities, real-time web research, fact checking, technical Q&A

### Specialized Development MCPs
* **`byterover`:** Shared agentic memory layer for AI coding agents, captures and improves AI interactions, code intelligence
* **`settlemint`:** Blockchain/smart contract development platform, build, deploy, manage smart contracts
* **`upstash`:** Enhanced context management for LLMs and external systems, distributed caching, session management
* **`apple-mcp`:** Native Mac Messages, Contacts, Notes integration, iMessage conversations, contacts management
* **`gibson`:** AI-powered database generation from natural language descriptions, database schema generation, SQL automation
* **`antvis-chart`:** Data visualization and charting capabilities, dynamic chart generation, data visualization

---

## 12. Canonical Documentation Reference Table

**(CRITICAL AND MANDATORY)** Defines essential documentation framework for AI agent project understanding. Paths relative to `docs/` unless specified. ALWAYS Merge documents that aren't one of these existing rules.

**Condense and Summarise Docs if they get too large**

### Tier 1: CRITICAL Core Documents (Required)

| Document Filename | Purpose | When to Update | When to Use |
|-------------------|---------|----------------|-------------|
| **README.md** | Project overview, installation, quick start, basic usage | Project setup, major feature additions | **FIRST READ** for project understanding |
| **CLAUDE.md** | **COMPREHENSIVE AI AGENT GUIDE.** Build commands, architecture, development rules, testing, troubleshooting | Development workflow changes, build updates | **PRIMARY REFERENCE** for AI agents |
| **ARCHITECTURE.md** | System design, component relationships, technology stack, data flow, integration patterns | Architecture changes, new integrations | System understanding, integration planning |
| **TASKS.md** | **WORKFLOW HUB.** Current priorities, feature roadmap, task prioritization, development backlog | **CONSTANT UPDATE** as tasks created, progressed, completed | **DAILY USE.** Task planning/execution, progress tracking |

### Tier 2: BUILD & DEVELOPMENT (Essential)

| Document Filename | Purpose | When to Update | When to Use |
|-------------------|---------|----------------|-------------|
| **BUILDING.md** / **BUILD_FAILURES.md** | **CRITICAL LOG.** Build instructions, troubleshooting, environment setup, failure analysis | **IMMEDIATELY** after ANY build failure | **FIRST CONSULT** for build issues |
| **DEVELOPMENT_LOG.md** | **CANONICAL LOG.** Chronological log of ALL significant actions, decisions, milestones | After EVERY significant action, decision, escalation | **MUST REVIEW BEFORE ANY TASK** |
| **BUGS.md** / **COMMON_ERRORS.md** | Known issues, workarounds, error documentation, debugging strategies | Bug discovery, resolution, error patterns | Troubleshooting, debugging, issue resolution |

### Tier 3: CONFIGURATION & INTEGRATION

| Document Filename | Purpose | When to Update | When to Use |
|-------------------|---------|----------------|-------------|
| **`.cursor/mcp.json`** | **MCP SERVER CONFIGURATION.** AI agent tool integration, service connections | MCP additions, configuration changes | AI agent setup, tool integration |
| **AI_MODEL_STM.MD** | AI reasoning, context loads, decisions, risk assessments, MCP outputs | Every major AI decision, context load, planning | AI task planning/execution, self-correction |
| **TECH_DEBT.md** | Technical debt tracking, refactoring priorities, code quality improvement plans | Code reviews, refactoring decisions | Code quality planning, technical decisions |
| **PRODUCTION_READINESS_CHECKLIST.md** | Deployment requirements, quality gates, release criteria | Release planning, quality standards | Pre-deployment validation, release planning |

### Tier 4: SPECIALIZED DOCUMENTATION

| Document Filename | Purpose | When to Update | When to Use |
|-------------------|---------|----------------|-------------|
| **PATTERNS_KB.md** | Reusable patterns, solutions, anti-patterns knowledge base | Post-mortem, review, significant solutions | Code design, pattern selection, best practices |
| **Testing Documentation** | Test strategy, frameworks, quality assurance protocols | Testing approach changes | Test planning, QA processes |
| **Security & Compliance** | Security guidelines, compliance requirements, data handling | Security reviews, compliance updates | Security implementation, audit preparation |
| **API & Integration Guides** | External service integration, API documentation, configuration | API changes, new integrations | Integration development, API usage |

### Standard Directory Structure Requirements

**(CRITICAL AND MANDATORY)** All projects MUST maintain this structure for AI agent compatibility:

```
/{repository}/
‚îú‚îÄ‚îÄ claude/                    # AI agent configuration
‚îÇ   ‚îî‚îÄ‚îÄ CLAUDE.md             # Comprehensive development guide
‚îú‚îÄ‚îÄ .cursor/                   # IDE and MCP configuration  
‚îÇ   ‚îî‚îÄ‚îÄ mcp.json              # MCP server configuration
‚îú‚îÄ‚îÄ docs/                      # Documentation hub (20-50+ files)
‚îÇ   ‚îú‚îÄ‚îÄ README.md
‚îÇ   ‚îú‚îÄ‚îÄ ARCHITECTURE.md
‚îÇ   ‚îú‚îÄ‚îÄ TASKS.md
‚îÇ   ‚îú‚îÄ‚îÄ BUILDING.md
‚îÇ   ‚îú‚îÄ‚îÄ BUGS.md
‚îÇ   ‚îú‚îÄ‚îÄ TECH_DEBT.md
‚îÇ   ‚îî‚îÄ‚îÄ [specialized docs...]
‚îú‚îÄ‚îÄ scripts/                   # Build and automation scripts
‚îú‚îÄ‚îÄ tasks/                     # Task management (if using TaskMaster-AI)
‚îî‚îÄ‚îÄ [platform directories]    # _macOS/, _iOS/, etc.
```

### Project Type Adaptations

Documentation framework adapts based on project type:
- **macOS Apps**: Add Xcode build guides, SwiftUI compliance docs
- **Web Apps**: Add deployment guides, API documentation  
- **AI Projects**: Add model configuration, training documentation
- **Financial Apps**: Add compliance, security, data handling docs

---

## Glossary

* **SMEAC**: Situation, Mission, Execution, Administration, Command/Control (used for validation/escalation)
* **MCP**: Meta-Cognitive Primitive (AI agent tool)
* **P0**: Priority 0 (Critical, blocks all progress, triggers "P0 STOP EVERYTHING")
* **Taskmaster**: AI-driven task management system
* **Canonical**: The single, authoritative source
* **AUTO-ITERATE Mode:** Standard operational mode emphasizing autonomous execution

---

## Quick Start for New Contributors

* All code changes MUST be linked to a tracked task.
* UI/UX MUST strictly follow the Corporate Style Guide.
* All actions, decisions, and failures MUST be logged. `DEVELOPMENT_LOG.MD` is your primary context.
* If blocked or in doubt, escalate via SMEAC/VALIDATION REQUEST.
* Use the Compliance Checklist before merging code or completing major tasks.
* Familiarize yourself with MCP usage and key documentation.

---

## Compliance Checklist - RANKED IN ORDER **P0 COMPULSORY**

### Builds & Stability
* [ ] Start new tasks/actions with a Production test build
* [ ] Ensure all TDD work is in the Sandbox Environment
* [ ] Ensure once all Sandbox Testing is completed, migration of code to Production occurs
* [ ] Broken Production builds are P1 to fix
* [ ] Test and maintain Production builds after any change
* [ ] Build GREEN; all tests PASS

### Code Quality & Structure **P0 COMPULSORY**
* [ ] Write complete code blocks; no placeholders
* [ ] Maintain modular codebase with consistent naming
* [ ] Refactor large files using modular components
* [ ] Comment code explaining "why" and "how"
* [ ] Rate, rank, and comment all code files
* [ ] Code solutions >90% overall rating; use TDD
* [ ] All files include mandatory comment block with complexity rating

### File & Project Management **P0 COMPULSORY**
* [ ] In `_macOS/`: 1 Prod `.xcodeproj`, 1 Sandbox `.xcodeproj`, 1 `.xcworkspace` ONLY
* [ ] Production files in `{root}/{PlatformDir}/{ProjectName}/`
* [ ] Sandbox files in `{root}/{PlatformDir}/{ProjectName-Sandbox}/`
* [ ] Follow naming conventions for all project files
* [ ] No redundant files/folders in `{root}/`

### Data & Security **P0 COMPULSORY**
* [ ] No mock data/services in Production; use functional implementations
* [ ] Store credentials/secrets in `{root}/.env`
* [ ] No hardcoded secrets
* [ ] Security audit after every production feature

### Documentation & Process **P0 COMPULSORY**
* [ ] Review `DEVELOPMENT_LOG.MD` before tasks
* [ ] Verify task exists in `docs/TASKS.MD`
* [ ] Follow Deliberate Action Mandate; plan in `docs/AI_MODEL_STM.MD`
* [ ] Update all documentation; no unauthorized docs
* [ ] Use and log relevant MCPs
* [ ] Use TDD and proper dev cycle
* [ ] Ensure UI elements are accessible/automatable
* [ ] Validate UI/UX changes with snapshotting/OCR
* [ ] Use Sandbox for new features; apply proper watermarking
* [ ] Generate Checkpoint Reports using SMEAC

### Application Standards **P0 COMPULSORY**
* [ ] Apps must support accessibility, CMD+Q, automation/AppleScript
* [ ] Status bars in scripts for user progress
* [ ] Xcode settings properly configured

### XCODE Settings **P0 COMPULSORY**
* [ ] "Automatically manage signing" enabled
* [ ] Bundle ID: `com.ablankcanvas.{ProjectName}`
* [ ] "Sign in with Apple" capability added
* [ ] Minimum macOS: 13.5
* [ ] App Category: "Productivity"
* [ ] Include all app icon assets